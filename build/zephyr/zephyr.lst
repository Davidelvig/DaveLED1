
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 1d 00 20 99 39 00 00 81 85 00 00 51 39 00 00     ... .9......Q9..
  10:	51 39 00 00 51 39 00 00 51 39 00 00 00 00 00 00     Q9..Q9..Q9......
	...
  2c:	3d 2a 00 00 51 39 00 00 00 00 00 00 e5 29 00 00     =*..Q9.......)..
  3c:	51 39 00 00                                         Q9..

00000040 <_irq_vector_table>:
  40:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  50:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  60:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  70:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  80:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  90:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  a0:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  b0:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  c0:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  d0:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  e0:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..
  f0:	1d 2b 00 00 1d 2b 00 00 1d 2b 00 00 1d 2b 00 00     .+...+...+...+..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <__data_size+0x26>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <main>:
#include <Test.h>
#include <TestCPP.h>

#define LED_1_NODE DT_ALIAS(led1)
void main(void)
{
     3dc:	b530      	push	{r4, r5, lr}
     3de:	b083      	sub	sp, #12
    static bool isOn = false;
    static int counter = 0;
    const struct gpio_dt_spec led_1 = GPIO_DT_SPEC_GET(LED_1_NODE, gpios);
     3e0:	4b34      	ldr	r3, [pc, #208]	; (4b4 <CONFIG_FLASH_SIZE+0xb4>)
     3e2:	e893 0003 	ldmia.w	r3, {r0, r1}
     3e6:	ab02      	add	r3, sp, #8
     3e8:	e903 0003 	stmdb	r3, {r0, r1}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
     3ec:	f89d 1004 	ldrb.w	r1, [sp, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
     3f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return gpio_pin_configure(spec->port,
     3f4:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
	const struct gpio_driver_api *api =
     3f8:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
     3fa:	6904      	ldr	r4, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     3fc:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
     400:	d004      	beq.n	40c <CONFIG_FLASH_SIZE+0xc>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     402:	f013 0f01 	tst.w	r3, #1
     406:	d001      	beq.n	40c <CONFIG_FLASH_SIZE+0xc>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     408:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     40c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     410:	f013 0f01 	tst.w	r3, #1
     414:	d009      	beq.n	42a <CONFIG_FLASH_SIZE+0x2a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     416:	2301      	movs	r3, #1
     418:	fa03 fc01 	lsl.w	ip, r3, r1
     41c:	6823      	ldr	r3, [r4, #0]
     41e:	ea43 030c 	orr.w	r3, r3, ip
     422:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
     424:	682b      	ldr	r3, [r5, #0]
     426:	4798      	blx	r3
	return gpio_pin_configure(spec->port,
     428:	e00f      	b.n	44a <CONFIG_FLASH_SIZE+0x4a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     42a:	2301      	movs	r3, #1
     42c:	fa03 fc01 	lsl.w	ip, r3, r1
     430:	6823      	ldr	r3, [r4, #0]
     432:	ea23 030c 	bic.w	r3, r3, ip
     436:	6023      	str	r3, [r4, #0]
     438:	e7f4      	b.n	424 <CONFIG_FLASH_SIZE+0x24>

    gpio_pin_configure_dt(&led_1, GPIO_OUTPUT_ACTIVE);

    while (true) {
        k_sleep(K_MSEC(1000));
        printk("%-5d squared = %-5d\t %s\n", counter, squareIt(counter++), isOn ? "ON" : "off");
     43a:	4b1f      	ldr	r3, [pc, #124]	; (4b8 <CONFIG_FLASH_SIZE+0xb8>)
     43c:	e017      	b.n	46e <CONFIG_FLASH_SIZE+0x6e>
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
     43e:	2301      	movs	r3, #1
     440:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
     444:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     446:	68db      	ldr	r3, [r3, #12]
     448:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     44a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     44e:	2100      	movs	r1, #0
     450:	f006 fd7e 	bl	6f50 <z_impl_k_sleep>
     454:	4b19      	ldr	r3, [pc, #100]	; (4bc <CONFIG_FLASH_SIZE+0xbc>)
     456:	681c      	ldr	r4, [r3, #0]
     458:	1c62      	adds	r2, r4, #1
     45a:	601a      	str	r2, [r3, #0]
     45c:	4620      	mov	r0, r4
     45e:	f007 f9c7 	bl	77f0 <squareIt>
     462:	4602      	mov	r2, r0
     464:	4b16      	ldr	r3, [pc, #88]	; (4c0 <CONFIG_FLASH_SIZE+0xc0>)
     466:	781b      	ldrb	r3, [r3, #0]
     468:	2b00      	cmp	r3, #0
     46a:	d1e6      	bne.n	43a <CONFIG_FLASH_SIZE+0x3a>
     46c:	4b15      	ldr	r3, [pc, #84]	; (4c4 <CONFIG_FLASH_SIZE+0xc4>)
     46e:	4621      	mov	r1, r4
     470:	4815      	ldr	r0, [pc, #84]	; (4c8 <CONFIG_FLASH_SIZE+0xc8>)
     472:	f007 fa75 	bl	7960 <printk>
     476:	2063      	movs	r0, #99	; 0x63
     478:	2100      	movs	r1, #0
     47a:	f006 fd69 	bl	6f50 <z_impl_k_sleep>
        k_sleep(K_MSEC(3)); // <== this delay is required at >= 2ms or greater to avoid aparent tow printk's every 2 seconds
        isOn = !isOn;
     47e:	4a10      	ldr	r2, [pc, #64]	; (4c0 <CONFIG_FLASH_SIZE+0xc0>)
     480:	7813      	ldrb	r3, [r2, #0]
     482:	f083 0301 	eor.w	r3, r3, #1
     486:	7013      	strb	r3, [r2, #0]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
     488:	9800      	ldr	r0, [sp, #0]
     48a:	f89d 1004 	ldrb.w	r1, [sp, #4]
	const struct gpio_driver_data *const data =
     48e:	6902      	ldr	r2, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     490:	6814      	ldr	r4, [r2, #0]
     492:	2201      	movs	r2, #1
     494:	408a      	lsls	r2, r1
     496:	4214      	tst	r4, r2
     498:	d002      	beq.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
		value = (value != 0) ? 0 : 1;
     49a:	fab3 f383 	clz	r3, r3
     49e:	095b      	lsrs	r3, r3, #5
	if (value != 0)	{
     4a0:	2b00      	cmp	r3, #0
     4a2:	d1cc      	bne.n	43e <CONFIG_FLASH_SIZE+0x3e>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
     4a4:	2301      	movs	r3, #1
     4a6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
     4aa:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     4ac:	691b      	ldr	r3, [r3, #16]
     4ae:	4798      	blx	r3
    while (true) {
     4b0:	e7cb      	b.n	44a <CONFIG_FLASH_SIZE+0x4a>
     4b2:	bf00      	nop
     4b4:	00009ac0 	.word	0x00009ac0
     4b8:	00009adc 	.word	0x00009adc
     4bc:	20000840 	.word	0x20000840
     4c0:	200015d8 	.word	0x200015d8
     4c4:	00009ad8 	.word	0x00009ad8
     4c8:	00009ae0 	.word	0x00009ae0

000004cc <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4d0:	b08d      	sub	sp, #52	; 0x34
     4d2:	9205      	str	r2, [sp, #20]
     4d4:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     4d6:	4613      	mov	r3, r2
     4d8:	f002 0204 	and.w	r2, r2, #4
     4dc:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     4de:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     4e2:	f010 0303 	ands.w	r3, r0, #3
     4e6:	9302      	str	r3, [sp, #8]
     4e8:	f040 822f 	bne.w	94a <CONFIG_ISR_STACK_SIZE+0x14a>
     4ec:	4607      	mov	r7, r0
     4ee:	468a      	mov	sl, r1
     4f0:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     4f2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     4f4:	2800      	cmp	r0, #0
     4f6:	d041      	beq.n	57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     4f8:	b127      	cbz	r7, 504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4fa:	1be3      	subs	r3, r4, r7
     4fc:	3304      	adds	r3, #4
     4fe:	4553      	cmp	r3, sl
     500:	f200 8226 	bhi.w	950 <CONFIG_ISR_STACK_SIZE+0x150>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     504:	9b03      	ldr	r3, [sp, #12]
     506:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     508:	f8dd b008 	ldr.w	fp, [sp, #8]
     50c:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     510:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     514:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     516:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     51a:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     51c:	b10f      	cbz	r7, 522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
				*(const char **)buf = s;
     51e:	9b03      	ldr	r3, [sp, #12]
     520:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     522:	1e53      	subs	r3, r2, #1
     524:	9307      	str	r3, [sp, #28]
     526:	2a00      	cmp	r2, #0
     528:	f340 817d 	ble.w	826 <CONFIG_ISR_STACK_SIZE+0x26>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     52c:	9b05      	ldr	r3, [sp, #20]
     52e:	f013 0202 	ands.w	r2, r3, #2
     532:	d021      	beq.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     534:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     536:	1be1      	subs	r1, r4, r7
     538:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     53a:	b11a      	cbz	r2, 544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     53c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     540:	f080 820c 	bcs.w	95c <CONFIG_ISR_STACK_SIZE+0x15c>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     544:	f1bb 0f0f 	cmp.w	fp, #15
     548:	f200 820b 	bhi.w	962 <CONFIG_ISR_STACK_SIZE+0x162>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     54c:	2f00      	cmp	r7, #0
     54e:	f000 8182 	beq.w	856 <CONFIG_ISR_STACK_SIZE+0x56>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     552:	b2db      	uxtb	r3, r3
     554:	aa0c      	add	r2, sp, #48	; 0x30
     556:	445a      	add	r2, fp
     558:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     55c:	2800      	cmp	r0, #0
     55e:	f000 8176 	beq.w	84e <CONFIG_ISR_STACK_SIZE+0x4e>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     562:	f063 037f 	orn	r3, r3, #127	; 0x7f
     566:	aa0c      	add	r2, sp, #48	; 0x30
     568:	445a      	add	r2, fp
     56a:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     56e:	9b04      	ldr	r3, [sp, #16]
     570:	3301      	adds	r3, #1
     572:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     574:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     578:	3404      	adds	r4, #4
     57a:	e00e      	b.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     57c:	f001 0a07 	and.w	sl, r1, #7
     580:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     582:	f1ca 0a08 	rsb	sl, sl, #8
     586:	e7b7      	b.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
			if (*fmt == '%') {
     588:	2b25      	cmp	r3, #37	; 0x25
     58a:	d105      	bne.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
				parsing = true;
     58c:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
     58e:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
     592:	46c1      	mov	r9, r8
			continue;
     594:	e000      	b.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
		switch (*fmt) {
     596:	2600      	movs	r6, #0
     598:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
     59a:	f105 0c01 	add.w	ip, r5, #1
     59e:	786b      	ldrb	r3, [r5, #1]
     5a0:	2b00      	cmp	r3, #0
     5a2:	f000 816c 	beq.w	87e <CONFIG_ISR_STACK_SIZE+0x7e>
		if (!parsing) {
     5a6:	2e00      	cmp	r6, #0
     5a8:	d0ee      	beq.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
		switch (*fmt) {
     5aa:	f1a3 0120 	sub.w	r1, r3, #32
     5ae:	295a      	cmp	r1, #90	; 0x5a
     5b0:	d8f1      	bhi.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
     5b2:	a201      	add	r2, pc, #4	; (adr r2, 5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     5b4:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
     5b8:	00000599 	.word	0x00000599
     5bc:	00000597 	.word	0x00000597
     5c0:	00000597 	.word	0x00000597
     5c4:	00000599 	.word	0x00000599
     5c8:	00000597 	.word	0x00000597
     5cc:	00000597 	.word	0x00000597
     5d0:	00000597 	.word	0x00000597
     5d4:	00000597 	.word	0x00000597
     5d8:	00000597 	.word	0x00000597
     5dc:	00000597 	.word	0x00000597
     5e0:	00000745 	.word	0x00000745
     5e4:	00000599 	.word	0x00000599
     5e8:	00000597 	.word	0x00000597
     5ec:	00000599 	.word	0x00000599
     5f0:	00000599 	.word	0x00000599
     5f4:	00000597 	.word	0x00000597
     5f8:	00000599 	.word	0x00000599
     5fc:	00000599 	.word	0x00000599
     600:	00000599 	.word	0x00000599
     604:	00000599 	.word	0x00000599
     608:	00000599 	.word	0x00000599
     60c:	00000599 	.word	0x00000599
     610:	00000599 	.word	0x00000599
     614:	00000599 	.word	0x00000599
     618:	00000599 	.word	0x00000599
     61c:	00000599 	.word	0x00000599
     620:	00000597 	.word	0x00000597
     624:	00000597 	.word	0x00000597
     628:	00000597 	.word	0x00000597
     62c:	00000597 	.word	0x00000597
     630:	00000597 	.word	0x00000597
     634:	00000597 	.word	0x00000597
     638:	00000597 	.word	0x00000597
     63c:	000007ad 	.word	0x000007ad
     640:	00000597 	.word	0x00000597
     644:	00000597 	.word	0x00000597
     648:	00000597 	.word	0x00000597
     64c:	000007ad 	.word	0x000007ad
     650:	000007ad 	.word	0x000007ad
     654:	000007ad 	.word	0x000007ad
     658:	00000597 	.word	0x00000597
     65c:	00000597 	.word	0x00000597
     660:	00000597 	.word	0x00000597
     664:	00000597 	.word	0x00000597
     668:	00000599 	.word	0x00000599
     66c:	00000597 	.word	0x00000597
     670:	00000597 	.word	0x00000597
     674:	00000597 	.word	0x00000597
     678:	00000597 	.word	0x00000597
     67c:	00000597 	.word	0x00000597
     680:	00000597 	.word	0x00000597
     684:	00000597 	.word	0x00000597
     688:	00000597 	.word	0x00000597
     68c:	00000597 	.word	0x00000597
     690:	00000597 	.word	0x00000597
     694:	00000597 	.word	0x00000597
     698:	0000073d 	.word	0x0000073d
     69c:	00000597 	.word	0x00000597
     6a0:	00000597 	.word	0x00000597
     6a4:	00000597 	.word	0x00000597
     6a8:	00000597 	.word	0x00000597
     6ac:	00000597 	.word	0x00000597
     6b0:	00000597 	.word	0x00000597
     6b4:	00000597 	.word	0x00000597
     6b8:	00000597 	.word	0x00000597
     6bc:	000007ad 	.word	0x000007ad
     6c0:	00000597 	.word	0x00000597
     6c4:	0000073d 	.word	0x0000073d
     6c8:	0000073d 	.word	0x0000073d
     6cc:	000007ad 	.word	0x000007ad
     6d0:	000007ad 	.word	0x000007ad
     6d4:	000007ad 	.word	0x000007ad
     6d8:	00000599 	.word	0x00000599
     6dc:	0000073d 	.word	0x0000073d
     6e0:	00000725 	.word	0x00000725
     6e4:	00000597 	.word	0x00000597
     6e8:	00000599 	.word	0x00000599
     6ec:	00000597 	.word	0x00000597
     6f0:	0000080d 	.word	0x0000080d
     6f4:	0000073d 	.word	0x0000073d
     6f8:	0000080d 	.word	0x0000080d
     6fc:	00000597 	.word	0x00000597
     700:	00000597 	.word	0x00000597
     704:	0000080d 	.word	0x0000080d
     708:	00000735 	.word	0x00000735
     70c:	0000073d 	.word	0x0000073d
     710:	00000597 	.word	0x00000597
     714:	00000597 	.word	0x00000597
     718:	0000073d 	.word	0x0000073d
     71c:	00000597 	.word	0x00000597
     720:	0000072d 	.word	0x0000072d
			align = VA_STACK_ALIGN(intmax_t);
     724:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
     728:	46c1      	mov	r9, r8
			continue;
     72a:	e735      	b.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
			align = VA_STACK_ALIGN(size_t);
     72c:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
     730:	46c1      	mov	r9, r8
			continue;
     732:	e731      	b.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
			align = VA_STACK_ALIGN(ptrdiff_t);
     734:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
     738:	46c1      	mov	r9, r8
			continue;
     73a:	e72d      	b.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
			if (fmt[-1] == 'l') {
     73c:	782a      	ldrb	r2, [r5, #0]
     73e:	2a6c      	cmp	r2, #108	; 0x6c
     740:	d026      	beq.n	790 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a8>
			parsing = false;
     742:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     744:	eb04 0208 	add.w	r2, r4, r8
     748:	3a01      	subs	r2, #1
     74a:	f1c8 0100 	rsb	r1, r8, #0
     74e:	400a      	ands	r2, r1
     750:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     752:	b127      	cbz	r7, 75e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x276>
     754:	1bd1      	subs	r1, r2, r7
     756:	4449      	add	r1, r9
     758:	4551      	cmp	r1, sl
     75a:	f200 80fc 	bhi.w	956 <CONFIG_ISR_STACK_SIZE+0x156>
		if (*fmt == 's') {
     75e:	2b73      	cmp	r3, #115	; 0x73
     760:	d059      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		} else if (size == sizeof(int)) {
     762:	f1b9 0f04 	cmp.w	r9, #4
     766:	f000 8082 	beq.w	86e <CONFIG_ISR_STACK_SIZE+0x6e>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     76a:	f1b9 0f08 	cmp.w	r9, #8
     76e:	f040 80fb 	bne.w	968 <CONFIG_ISR_STACK_SIZE+0x168>
			long long v = va_arg(ap, long long);
     772:	9b16      	ldr	r3, [sp, #88]	; 0x58
     774:	3307      	adds	r3, #7
     776:	f023 0307 	bic.w	r3, r3, #7
     77a:	f103 0108 	add.w	r1, r3, #8
     77e:	9116      	str	r1, [sp, #88]	; 0x58
     780:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
     784:	b10f      	cbz	r7, 78a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a2>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     786:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
     78a:	f102 0408 	add.w	r4, r2, #8
     78e:	e703      	b.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
				if (fmt[-2] == 'l') {
     790:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
     794:	2a6c      	cmp	r2, #108	; 0x6c
     796:	d004      	beq.n	7a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ba>
			parsing = false;
     798:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
     79a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
     79e:	46c1      	mov	r9, r8
     7a0:	e7d0      	b.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
			parsing = false;
     7a2:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
     7a4:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
     7a8:	46c1      	mov	r9, r8
     7aa:	e7cb      	b.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
			if (fmt[-1] == 'L') {
     7ac:	782b      	ldrb	r3, [r5, #0]
     7ae:	2b4c      	cmp	r3, #76	; 0x4c
     7b0:	d01c      	beq.n	7ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x304>
				v.d = va_arg(ap, double);
     7b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
     7b4:	3307      	adds	r3, #7
     7b6:	f023 0307 	bic.w	r3, r3, #7
     7ba:	f103 0208 	add.w	r2, r3, #8
     7be:	9216      	str	r2, [sp, #88]	; 0x58
     7c0:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
     7c4:	1de2      	adds	r2, r4, #7
     7c6:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
     7ca:	b147      	cbz	r7, 7de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f6>
				if (BUF_OFFSET + size > len) {
     7cc:	1bd3      	subs	r3, r2, r7
     7ce:	3308      	adds	r3, #8
     7d0:	4553      	cmp	r3, sl
     7d2:	d815      	bhi.n	800 <CONFIG_ISR_STACK_SIZE>
				} else if (fmt[-1] == 'L') {
     7d4:	782b      	ldrb	r3, [r5, #0]
     7d6:	2b4c      	cmp	r3, #76	; 0x4c
     7d8:	d015      	beq.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
					*(double *)buf = v.d;
     7da:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
     7de:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
     7e2:	2600      	movs	r6, #0
			continue;
     7e4:	f04f 0808 	mov.w	r8, #8
     7e8:	46c1      	mov	r9, r8
     7ea:	e6d5      	b.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
				v.ld = va_arg(ap, long double);
     7ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
     7ee:	3307      	adds	r3, #7
     7f0:	f023 0307 	bic.w	r3, r3, #7
     7f4:	f103 0208 	add.w	r2, r3, #8
     7f8:	9216      	str	r2, [sp, #88]	; 0x58
     7fa:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
     7fe:	e7e1      	b.n	7c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2dc>
					return -ENOSPC;
     800:	f06f 001b 	mvn.w	r0, #27
     804:	e09e      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
					*(long double *)buf = v.ld;
     806:	e9c2 0100 	strd	r0, r1, [r2]
     80a:	e7e8      	b.n	7de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f6>
			parsing = false;
     80c:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
     80e:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
     812:	46c1      	mov	r9, r8
     814:	e796      	b.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
			s = va_arg(ap, char *);
     816:	9b16      	ldr	r3, [sp, #88]	; 0x58
     818:	1d1a      	adds	r2, r3, #4
     81a:	9216      	str	r2, [sp, #88]	; 0x58
     81c:	681b      	ldr	r3, [r3, #0]
     81e:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     820:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
     822:	4665      	mov	r5, ip
     824:	e67a      	b.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     826:	4b56      	ldr	r3, [pc, #344]	; (980 <CONFIG_ISR_STACK_SIZE+0x180>)
     828:	9a03      	ldr	r2, [sp, #12]
     82a:	429a      	cmp	r2, r3
     82c:	d304      	bcc.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     82e:	4b55      	ldr	r3, [pc, #340]	; (984 <CONFIG_ISR_STACK_SIZE+0x184>)
     830:	429a      	cmp	r2, r3
     832:	d30a      	bcc.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
     834:	2300      	movs	r3, #0
     836:	e000      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     838:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     83a:	2b00      	cmp	r3, #0
     83c:	f47f ae76 	bne.w	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     840:	9b05      	ldr	r3, [sp, #20]
     842:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     846:	2000      	movs	r0, #0
     848:	e675      	b.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     84a:	2301      	movs	r3, #1
     84c:	e7f5      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
						s_rw_cnt++;
     84e:	9b06      	ldr	r3, [sp, #24]
     850:	3301      	adds	r3, #1
     852:	9306      	str	r3, [sp, #24]
     854:	e68e      	b.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
				} else if (is_ro || rws_pos_en) {
     856:	b908      	cbnz	r0, 85c <CONFIG_ISR_STACK_SIZE+0x5c>
     858:	9b01      	ldr	r3, [sp, #4]
     85a:	b113      	cbz	r3, 862 <CONFIG_ISR_STACK_SIZE+0x62>
					len += 1;
     85c:	f10a 0a01 	add.w	sl, sl, #1
     860:	e688      	b.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
					len += strlen(s) + 1 + 1;
     862:	9803      	ldr	r0, [sp, #12]
     864:	f007 ff15 	bl	8692 <strlen>
     868:	1c83      	adds	r3, r0, #2
     86a:	449a      	add	sl, r3
     86c:	e682      	b.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
			int v = va_arg(ap, int);
     86e:	9b16      	ldr	r3, [sp, #88]	; 0x58
     870:	1d19      	adds	r1, r3, #4
     872:	9116      	str	r1, [sp, #88]	; 0x58
     874:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
     876:	b107      	cbz	r7, 87a <CONFIG_ISR_STACK_SIZE+0x7a>
				*(int *)buf = v;
     878:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
     87a:	1d14      	adds	r4, r2, #4
     87c:	e68c      	b.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     87e:	1be3      	subs	r3, r4, r7
     880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     884:	d273      	bcs.n	96e <CONFIG_ISR_STACK_SIZE+0x16e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     886:	b187      	cbz	r7, 8aa <CONFIG_ISR_STACK_SIZE+0xaa>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     888:	2200      	movs	r2, #0
     88a:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
     88c:	089b      	lsrs	r3, r3, #2
     88e:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     890:	9b01      	ldr	r3, [sp, #4]
     892:	b173      	cbz	r3, 8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
     894:	9b06      	ldr	r3, [sp, #24]
     896:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
     898:	9b04      	ldr	r3, [sp, #16]
     89a:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     89c:	bb03      	cbnz	r3, 8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
     89e:	9d02      	ldr	r5, [sp, #8]
     8a0:	f8dd 9010 	ldr.w	r9, [sp, #16]
     8a4:	f8dd 800c 	ldr.w	r8, [sp, #12]
     8a8:	e031      	b.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     8aa:	4453      	add	r3, sl
     8ac:	f1a3 0008 	sub.w	r0, r3, #8
     8b0:	e048      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
		buf0[1] = s_rw_cnt;
     8b2:	9b06      	ldr	r3, [sp, #24]
     8b4:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
     8b6:	e7ef      	b.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
		for (i = 0; i < s_idx; i++) {
     8b8:	3301      	adds	r3, #1
     8ba:	459b      	cmp	fp, r3
     8bc:	d9ef      	bls.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     8be:	aa0c      	add	r2, sp, #48	; 0x30
     8c0:	441a      	add	r2, r3
     8c2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     8c6:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     8ca:	2a00      	cmp	r2, #0
     8cc:	daf4      	bge.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     8ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     8d2:	1be2      	subs	r2, r4, r7
     8d4:	3201      	adds	r2, #1
     8d6:	4552      	cmp	r2, sl
     8d8:	d84c      	bhi.n	974 <CONFIG_ISR_STACK_SIZE+0x174>
			*buf++ = pos;
     8da:	f804 1b01 	strb.w	r1, [r4], #1
     8de:	e7eb      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
		for (i = 0; i < s_idx; i++) {
     8e0:	9b02      	ldr	r3, [sp, #8]
     8e2:	e7ea      	b.n	8ba <CONFIG_ISR_STACK_SIZE+0xba>
		if (rws_pos_en) {
     8e4:	9b01      	ldr	r3, [sp, #4]
     8e6:	b1f3      	cbz	r3, 926 <CONFIG_ISR_STACK_SIZE+0x126>
			size = 0;
     8e8:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     8ea:	1be3      	subs	r3, r4, r7
     8ec:	4433      	add	r3, r6
     8ee:	3301      	adds	r3, #1
     8f0:	4553      	cmp	r3, sl
     8f2:	d842      	bhi.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     8f4:	ab0c      	add	r3, sp, #48	; 0x30
     8f6:	442b      	add	r3, r5
     8f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     8fc:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     900:	4632      	mov	r2, r6
     902:	4641      	mov	r1, r8
     904:	4620      	mov	r0, r4
     906:	f007 fed7 	bl	86b8 <memcpy>
		buf += size;
     90a:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     90c:	3501      	adds	r5, #1
     90e:	45ab      	cmp	fp, r5
     910:	d917      	bls.n	942 <CONFIG_ISR_STACK_SIZE+0x142>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     912:	f1b9 0f00 	cmp.w	r9, #0
     916:	d0e5      	beq.n	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     918:	ab0c      	add	r3, sp, #48	; 0x30
     91a:	442b      	add	r3, r5
     91c:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     920:	2b00      	cmp	r3, #0
     922:	dadf      	bge.n	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     924:	e7f2      	b.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     926:	ab0c      	add	r3, sp, #48	; 0x30
     928:	442b      	add	r3, r5
     92a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     92e:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     932:	2200      	movs	r2, #0
     934:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     938:	4640      	mov	r0, r8
     93a:	f007 feaa 	bl	8692 <strlen>
     93e:	1c46      	adds	r6, r0, #1
     940:	e7d3      	b.n	8ea <CONFIG_ISR_STACK_SIZE+0xea>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     942:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     944:	b00d      	add	sp, #52	; 0x34
     946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     94a:	f06f 000d 	mvn.w	r0, #13
     94e:	e7f9      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
		return -ENOSPC;
     950:	f06f 001b 	mvn.w	r0, #27
     954:	e7f6      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
			return -ENOSPC;
     956:	f06f 001b 	mvn.w	r0, #27
     95a:	e7f3      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
					return -EINVAL;
     95c:	f06f 0015 	mvn.w	r0, #21
     960:	e7f0      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
					return -EINVAL;
     962:	f06f 0015 	mvn.w	r0, #21
     966:	e7ed      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
			return -EINVAL;
     968:	f06f 0015 	mvn.w	r0, #21
     96c:	e7ea      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
		return -EINVAL;
     96e:	f06f 0015 	mvn.w	r0, #21
     972:	e7e7      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
				return -ENOSPC;
     974:	f06f 001b 	mvn.w	r0, #27
     978:	e7e4      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
			return -ENOSPC;
     97a:	f06f 001b 	mvn.w	r0, #27
     97e:	e7e1      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
     980:	0000978c 	.word	0x0000978c
     984:	0000a540 	.word	0x0000a540

00000988 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     98c:	b08b      	sub	sp, #44	; 0x2c
     98e:	4605      	mov	r5, r0
     990:	4692      	mov	sl, r2
     992:	9305      	str	r3, [sp, #20]
     994:	9e14      	ldr	r6, [sp, #80]	; 0x50
     996:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     99a:	9103      	str	r1, [sp, #12]
     99c:	b161      	cbz	r1, 9b8 <cbprintf_package_copy+0x30>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     99e:	f895 8002 	ldrb.w	r8, [r5, #2]
     9a2:	f8cd 8008 	str.w	r8, [sp, #8]
	ro_cpy = ros_nbr &&
     9a6:	f1b8 0f00 	cmp.w	r8, #0
     9aa:	d008      	beq.n	9be <cbprintf_package_copy+0x36>
     9ac:	f016 0f01 	tst.w	r6, #1
     9b0:	d10e      	bne.n	9d0 <cbprintf_package_copy+0x48>
     9b2:	f04f 0900 	mov.w	r9, #0
     9b6:	e004      	b.n	9c2 <cbprintf_package_copy+0x3a>
	in_len != 0 ? in_len : get_package_len(in_packaged);
     9b8:	f006 ff38 	bl	782c <get_package_len>
     9bc:	e7ef      	b.n	99e <cbprintf_package_copy+0x16>
	ro_cpy = ros_nbr &&
     9be:	f04f 0900 	mov.w	r9, #0
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     9c2:	78ef      	ldrb	r7, [r5, #3]
	rw_cpy = rws_nbr > 0 &&
     9c4:	b13f      	cbz	r7, 9d6 <cbprintf_package_copy+0x4e>
     9c6:	f016 0f02 	tst.w	r6, #2
     9ca:	d12b      	bne.n	a24 <cbprintf_package_copy+0x9c>
     9cc:	2300      	movs	r3, #0
     9ce:	e003      	b.n	9d8 <cbprintf_package_copy+0x50>
	ro_cpy = ros_nbr &&
     9d0:	f04f 0901 	mov.w	r9, #1
     9d4:	e7f5      	b.n	9c2 <cbprintf_package_copy+0x3a>
	rw_cpy = rws_nbr > 0 &&
     9d6:	2300      	movs	r3, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     9d8:	b913      	cbnz	r3, 9e0 <cbprintf_package_copy+0x58>
     9da:	f1b9 0f00 	cmp.w	r9, #0
     9de:	d023      	beq.n	a28 <cbprintf_package_copy+0xa0>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = buf[0] * sizeof(int);
     9e0:	782c      	ldrb	r4, [r5, #0]
     9e2:	00a3      	lsls	r3, r4, #2
     9e4:	9301      	str	r3, [sp, #4]
	size_t out_len = in_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	uint8_t *str_pos = &buf[args_size];
     9e6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (packaged == NULL) {
     9ea:	f1ba 0f00 	cmp.w	sl, #0
     9ee:	d025      	beq.n	a3c <cbprintf_package_copy+0xb4>
	uint8_t cpy_str_pos[16];
	uint8_t scpy_cnt;
	uint8_t *dst = packaged;
	uint8_t *dst_hdr = packaged;

	memcpy(dst, in_packaged, args_size);
     9f0:	9a01      	ldr	r2, [sp, #4]
     9f2:	4629      	mov	r1, r5
     9f4:	4650      	mov	r0, sl
     9f6:	f007 fe5f 	bl	86b8 <memcpy>
	dst += args_size;
     9fa:	9b01      	ldr	r3, [sp, #4]
     9fc:	4453      	add	r3, sl
     9fe:	9304      	str	r3, [sp, #16]

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
     a00:	f1b9 0f00 	cmp.w	r9, #0
     a04:	f040 8096 	bne.w	b34 <cbprintf_package_copy+0x1ac>
		/* Read only string indexes removed from package. */
		dst_hdr[2] = 0;
		str_pos += ros_nbr;
	} else {
		scpy_cnt = 0;
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     a08:	9b02      	ldr	r3, [sp, #8]
     a0a:	b11b      	cbz	r3, a14 <cbprintf_package_copy+0x8c>
     a0c:	f016 0f04 	tst.w	r6, #4
     a10:	f040 809e 	bne.w	b50 <cbprintf_package_copy+0x1c8>
			memcpy(dst, str_pos, ros_nbr);
			dst += ros_nbr;
			str_pos += ros_nbr;
		} else {
			dst_hdr[2] = 0;
     a14:	f04f 0800 	mov.w	r8, #0
     a18:	f88a 8002 	strb.w	r8, [sl, #2]
	dst += args_size;
     a1c:	f8dd 9010 	ldr.w	r9, [sp, #16]
     a20:	2300      	movs	r3, #0
     a22:	e0b1      	b.n	b88 <cbprintf_package_copy+0x200>
	rw_cpy = rws_nbr > 0 &&
     a24:	2301      	movs	r3, #1
     a26:	e7d7      	b.n	9d8 <cbprintf_package_copy+0x50>
		if (packaged) {
     a28:	f1ba 0f00 	cmp.w	sl, #0
     a2c:	d004      	beq.n	a38 <cbprintf_package_copy+0xb0>
			memcpy(packaged, in_packaged, in_len);
     a2e:	9a03      	ldr	r2, [sp, #12]
     a30:	4629      	mov	r1, r5
     a32:	4650      	mov	r0, sl
     a34:	f007 fe40 	bl	86b8 <memcpy>
		return in_len;
     a38:	9803      	ldr	r0, [sp, #12]
     a3a:	e078      	b.n	b2e <cbprintf_package_copy+0x1a6>
		if (ro_cpy) {
     a3c:	f1b9 0f00 	cmp.w	r9, #0
     a40:	d120      	bne.n	a84 <cbprintf_package_copy+0xfc>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     a42:	9b02      	ldr	r3, [sp, #8]
     a44:	2b00      	cmp	r3, #0
     a46:	d03d      	beq.n	ac4 <cbprintf_package_copy+0x13c>
     a48:	f016 0a04 	ands.w	sl, r6, #4
     a4c:	d02f      	beq.n	aae <cbprintf_package_copy+0x126>
				str_pos += ros_nbr;
     a4e:	441c      	add	r4, r3
	size_t strl_cnt = 0;
     a50:	f04f 0a00 	mov.w	sl, #0
     a54:	e02b      	b.n	aae <cbprintf_package_copy+0x126>
				out_len += len;
     a56:	4407      	add	r7, r0
				str_pos++;
     a58:	3401      	adds	r4, #1
			for (int i = 0; i < ros_nbr; i++) {
     a5a:	f108 0801 	add.w	r8, r8, #1
     a5e:	45c8      	cmp	r8, r9
     a60:	d21e      	bcs.n	aa0 <cbprintf_package_copy+0x118>
				const char *str = *(const char **)&buf32[*str_pos];
     a62:	7822      	ldrb	r2, [r4, #0]
				int len = append_string(NULL, 0, str, 0);
     a64:	2300      	movs	r3, #0
     a66:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
     a6a:	4619      	mov	r1, r3
     a6c:	4618      	mov	r0, r3
     a6e:	f006 fef2 	bl	7856 <append_string>
				if (strl && strl_cnt < strl_len) {
     a72:	2d00      	cmp	r5, #0
     a74:	d0ef      	beq.n	a56 <cbprintf_package_copy+0xce>
     a76:	45b2      	cmp	sl, r6
     a78:	d2ed      	bcs.n	a56 <cbprintf_package_copy+0xce>
					strl[strl_cnt++] = (uint16_t)len;
     a7a:	f825 001a 	strh.w	r0, [r5, sl, lsl #1]
     a7e:	f10a 0a01 	add.w	sl, sl, #1
     a82:	e7e8      	b.n	a56 <cbprintf_package_copy+0xce>
			for (int i = 0; i < ros_nbr; i++) {
     a84:	f04f 0800 	mov.w	r8, #0
	size_t strl_cnt = 0;
     a88:	46c2      	mov	sl, r8
     a8a:	f8dd 9008 	ldr.w	r9, [sp, #8]
     a8e:	9701      	str	r7, [sp, #4]
     a90:	9f03      	ldr	r7, [sp, #12]
     a92:	9614      	str	r6, [sp, #80]	; 0x50
     a94:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
     a98:	46ab      	mov	fp, r5
     a9a:	9e16      	ldr	r6, [sp, #88]	; 0x58
     a9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
     a9e:	e7de      	b.n	a5e <cbprintf_package_copy+0xd6>
     aa0:	9703      	str	r7, [sp, #12]
     aa2:	9f01      	ldr	r7, [sp, #4]
     aa4:	9e14      	ldr	r6, [sp, #80]	; 0x50
     aa6:	9515      	str	r5, [sp, #84]	; 0x54
     aa8:	465d      	mov	r5, fp
     aaa:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
		bool drop_ro_str_pos = !(flags &
     aae:	f006 0305 	and.w	r3, r6, #5
     ab2:	9301      	str	r3, [sp, #4]
		for (int i = 0; i < rws_nbr; i++) {
     ab4:	f04f 0800 	mov.w	r8, #0
     ab8:	f8dd 900c 	ldr.w	r9, [sp, #12]
     abc:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
     ac0:	46ab      	mov	fp, r5
     ac2:	e024      	b.n	b0e <cbprintf_package_copy+0x186>
	size_t strl_cnt = 0;
     ac4:	f8dd a008 	ldr.w	sl, [sp, #8]
     ac8:	e7f1      	b.n	aae <cbprintf_package_copy+0x126>
     aca:	2300      	movs	r3, #0
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     acc:	461d      	mov	r5, r3
     ace:	b113      	cbz	r3, ad6 <cbprintf_package_copy+0x14e>
     ad0:	f016 0f01 	tst.w	r6, #1
     ad4:	d103      	bne.n	ade <cbprintf_package_copy+0x156>
     ad6:	b995      	cbnz	r5, afe <cbprintf_package_copy+0x176>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     ad8:	f016 0f02 	tst.w	r6, #2
     adc:	d00f      	beq.n	afe <cbprintf_package_copy+0x176>
				int len = append_string(NULL, 0, str, 0);
     ade:	2300      	movs	r3, #0
     ae0:	4619      	mov	r1, r3
     ae2:	4618      	mov	r0, r3
     ae4:	f006 feb7 	bl	7856 <append_string>
				if (strl && strl_cnt < strl_len) {
     ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
     aea:	b13b      	cbz	r3, afc <cbprintf_package_copy+0x174>
     aec:	9b16      	ldr	r3, [sp, #88]	; 0x58
     aee:	459a      	cmp	sl, r3
     af0:	d204      	bcs.n	afc <cbprintf_package_copy+0x174>
					strl[strl_cnt++] = (uint16_t)len;
     af2:	9b15      	ldr	r3, [sp, #84]	; 0x54
     af4:	f823 001a 	strh.w	r0, [r3, sl, lsl #1]
     af8:	f10a 0a01 	add.w	sl, sl, #1
				out_len += len;
     afc:	4481      	add	r9, r0
			if (is_ro && drop_ro_str_pos) {
     afe:	b11d      	cbz	r5, b08 <cbprintf_package_copy+0x180>
     b00:	9b01      	ldr	r3, [sp, #4]
     b02:	b90b      	cbnz	r3, b08 <cbprintf_package_copy+0x180>
				out_len--;
     b04:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
			str_pos++;
     b08:	3401      	adds	r4, #1
		for (int i = 0; i < rws_nbr; i++) {
     b0a:	f108 0801 	add.w	r8, r8, #1
     b0e:	45b8      	cmp	r8, r7
     b10:	d20c      	bcs.n	b2c <cbprintf_package_copy+0x1a4>
			const char *str = *(const char **)&buf32[*str_pos];
     b12:	7823      	ldrb	r3, [r4, #0]
     b14:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
     b18:	4b58      	ldr	r3, [pc, #352]	; (c7c <cbprintf_package_copy+0x2f4>)
     b1a:	429a      	cmp	r2, r3
     b1c:	d3d5      	bcc.n	aca <cbprintf_package_copy+0x142>
     b1e:	4b58      	ldr	r3, [pc, #352]	; (c80 <cbprintf_package_copy+0x2f8>)
     b20:	429a      	cmp	r2, r3
     b22:	d301      	bcc.n	b28 <cbprintf_package_copy+0x1a0>
     b24:	2300      	movs	r3, #0
     b26:	e7d1      	b.n	acc <cbprintf_package_copy+0x144>
     b28:	2301      	movs	r3, #1
     b2a:	e7cf      	b.n	acc <cbprintf_package_copy+0x144>
		return out_len;
     b2c:	4648      	mov	r0, r9
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     b2e:	b00b      	add	sp, #44	; 0x2c
     b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     b34:	f8dd 9008 	ldr.w	r9, [sp, #8]
     b38:	464a      	mov	r2, r9
     b3a:	4621      	mov	r1, r4
     b3c:	a806      	add	r0, sp, #24
     b3e:	f007 fdbb 	bl	86b8 <memcpy>
		dst_hdr[2] = 0;
     b42:	2300      	movs	r3, #0
     b44:	f88a 3002 	strb.w	r3, [sl, #2]
		str_pos += ros_nbr;
     b48:	444c      	add	r4, r9
	dst += args_size;
     b4a:	f8dd 9010 	ldr.w	r9, [sp, #16]
     b4e:	e767      	b.n	a20 <cbprintf_package_copy+0x98>
			memcpy(dst, str_pos, ros_nbr);
     b50:	4698      	mov	r8, r3
     b52:	461a      	mov	r2, r3
     b54:	4621      	mov	r1, r4
     b56:	f8dd 9010 	ldr.w	r9, [sp, #16]
     b5a:	4648      	mov	r0, r9
     b5c:	f007 fdac 	bl	86b8 <memcpy>
			dst += ros_nbr;
     b60:	44c1      	add	r9, r8
			str_pos += ros_nbr;
     b62:	4444      	add	r4, r8
		scpy_cnt = 0;
     b64:	f04f 0800 	mov.w	r8, #0
			str_pos += ros_nbr;
     b68:	e75a      	b.n	a20 <cbprintf_package_copy+0x98>
     b6a:	2100      	movs	r1, #0
		if (is_ro) {
     b6c:	b331      	cbz	r1, bbc <cbprintf_package_copy+0x234>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     b6e:	f016 0f01 	tst.w	r6, #1
     b72:	d018      	beq.n	ba6 <cbprintf_package_copy+0x21e>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     b74:	f108 0101 	add.w	r1, r8, #1
     b78:	a80a      	add	r0, sp, #40	; 0x28
     b7a:	4480      	add	r8, r0
     b7c:	f808 2c10 	strb.w	r2, [r8, #-16]
     b80:	fa5f f881 	uxtb.w	r8, r1
		str_pos++;
     b84:	3401      	adds	r4, #1
	for (int i = 0; i < rws_nbr; i++) {
     b86:	3301      	adds	r3, #1
     b88:	42bb      	cmp	r3, r7
     b8a:	d226      	bcs.n	bda <cbprintf_package_copy+0x252>
		const char *str = *(const char **)&buf32[*str_pos];
     b8c:	7822      	ldrb	r2, [r4, #0]
     b8e:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
     b92:	483a      	ldr	r0, [pc, #232]	; (c7c <cbprintf_package_copy+0x2f4>)
     b94:	4281      	cmp	r1, r0
     b96:	d3e8      	bcc.n	b6a <cbprintf_package_copy+0x1e2>
     b98:	4839      	ldr	r0, [pc, #228]	; (c80 <cbprintf_package_copy+0x2f8>)
     b9a:	4281      	cmp	r1, r0
     b9c:	d301      	bcc.n	ba2 <cbprintf_package_copy+0x21a>
     b9e:	2100      	movs	r1, #0
     ba0:	e7e4      	b.n	b6c <cbprintf_package_copy+0x1e4>
     ba2:	2101      	movs	r1, #1
     ba4:	e7e2      	b.n	b6c <cbprintf_package_copy+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     ba6:	f016 0f04 	tst.w	r6, #4
     baa:	d0eb      	beq.n	b84 <cbprintf_package_copy+0x1fc>
				*dst++ = *str_pos;
     bac:	f809 2b01 	strb.w	r2, [r9], #1
				dst_hdr[2]++;
     bb0:	f89a 2002 	ldrb.w	r2, [sl, #2]
     bb4:	3201      	adds	r2, #1
     bb6:	f88a 2002 	strb.w	r2, [sl, #2]
     bba:	e7e3      	b.n	b84 <cbprintf_package_copy+0x1fc>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     bbc:	f016 0f02 	tst.w	r6, #2
     bc0:	d008      	beq.n	bd4 <cbprintf_package_copy+0x24c>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     bc2:	f108 0101 	add.w	r1, r8, #1
     bc6:	a80a      	add	r0, sp, #40	; 0x28
     bc8:	4480      	add	r8, r0
     bca:	f808 2c10 	strb.w	r2, [r8, #-16]
     bce:	fa5f f881 	uxtb.w	r8, r1
     bd2:	e7d7      	b.n	b84 <cbprintf_package_copy+0x1fc>
				*dst++ = *str_pos;
     bd4:	f809 2b01 	strb.w	r2, [r9], #1
     bd8:	e7d4      	b.n	b84 <cbprintf_package_copy+0x1fc>
	dst_hdr[1] += scpy_cnt;
     bda:	f89a 3001 	ldrb.w	r3, [sl, #1]
     bde:	4443      	add	r3, r8
     be0:	f88a 3001 	strb.w	r3, [sl, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     be4:	9b04      	ldr	r3, [sp, #16]
     be6:	eba9 0303 	sub.w	r3, r9, r3
     bea:	b2db      	uxtb	r3, r3
     bec:	f89a 2002 	ldrb.w	r2, [sl, #2]
     bf0:	1a9b      	subs	r3, r3, r2
     bf2:	f88a 3003 	strb.w	r3, [sl, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     bf6:	9b02      	ldr	r3, [sp, #8]
     bf8:	9a01      	ldr	r2, [sp, #4]
     bfa:	4413      	add	r3, r2
     bfc:	441f      	add	r7, r3
     bfe:	9b03      	ldr	r3, [sp, #12]
     c00:	1bdf      	subs	r7, r3, r7
	memcpy(dst, str_pos, strs_len);
     c02:	463a      	mov	r2, r7
     c04:	4621      	mov	r1, r4
     c06:	4648      	mov	r0, r9
     c08:	f007 fd56 	bl	86b8 <memcpy>
	dst += strs_len;
     c0c:	44b9      	add	r9, r7
	if (scpy_cnt == 0) {
     c0e:	f1b8 0f00 	cmp.w	r8, #0
     c12:	d009      	beq.n	c28 <cbprintf_package_copy+0x2a0>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     c14:	eba9 0a0a 	sub.w	sl, r9, sl
     c18:	9b05      	ldr	r3, [sp, #20]
     c1a:	eba3 0a0a 	sub.w	sl, r3, sl
	if (rem <= scpy_cnt) {
     c1e:	45d0      	cmp	r8, sl
     c20:	d225      	bcs.n	c6e <cbprintf_package_copy+0x2e6>
	for (int i = 0; i < scpy_cnt; i++) {
     c22:	2400      	movs	r4, #0
     c24:	465e      	mov	r6, fp
     c26:	e011      	b.n	c4c <cbprintf_package_copy+0x2c4>
		return dst - dst_hdr;
     c28:	eba9 000a 	sub.w	r0, r9, sl
     c2c:	e77f      	b.n	b2e <cbprintf_package_copy+0x1a6>
		uint16_t str_len = strl ? strl[i] : 0;
     c2e:	2300      	movs	r3, #0
		*dst = loc;
     c30:	f809 1b01 	strb.w	r1, [r9], #1
		rem--;
     c34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
		cpy_len = append_string(dst, rem, str, str_len);
     c38:	4651      	mov	r1, sl
     c3a:	4648      	mov	r0, r9
     c3c:	f006 fe0b 	bl	7856 <append_string>
		if (cpy_len < 0) {
     c40:	2800      	cmp	r0, #0
     c42:	db17      	blt.n	c74 <cbprintf_package_copy+0x2ec>
		rem -= cpy_len;
     c44:	ebaa 0a00 	sub.w	sl, sl, r0
		dst += cpy_len;
     c48:	4481      	add	r9, r0
	for (int i = 0; i < scpy_cnt; i++) {
     c4a:	3401      	adds	r4, #1
     c4c:	45a0      	cmp	r8, r4
     c4e:	dd0a      	ble.n	c66 <cbprintf_package_copy+0x2de>
		uint8_t loc = cpy_str_pos[i];
     c50:	ab0a      	add	r3, sp, #40	; 0x28
     c52:	4423      	add	r3, r4
     c54:	f813 1c10 	ldrb.w	r1, [r3, #-16]
		const char *str = *(const char **)&buf32[loc];
     c58:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     c5c:	2e00      	cmp	r6, #0
     c5e:	d0e6      	beq.n	c2e <cbprintf_package_copy+0x2a6>
     c60:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
     c64:	e7e4      	b.n	c30 <cbprintf_package_copy+0x2a8>
	return len - rem;
     c66:	9b05      	ldr	r3, [sp, #20]
     c68:	eba3 000a 	sub.w	r0, r3, sl
     c6c:	e75f      	b.n	b2e <cbprintf_package_copy+0x1a6>
		return -ENOSPC;
     c6e:	f06f 001b 	mvn.w	r0, #27
     c72:	e75c      	b.n	b2e <cbprintf_package_copy+0x1a6>
			return -ENOSPC;
     c74:	f06f 001b 	mvn.w	r0, #27
     c78:	e759      	b.n	b2e <cbprintf_package_copy+0x1a6>
     c7a:	bf00      	nop
     c7c:	0000978c 	.word	0x0000978c
     c80:	0000a540 	.word	0x0000a540

00000c84 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     c84:	4b01      	ldr	r3, [pc, #4]	; (c8c <__printk_hook_install+0x8>)
     c86:	6018      	str	r0, [r3, #0]
}
     c88:	4770      	bx	lr
     c8a:	bf00      	nop
     c8c:	20000000 	.word	0x20000000

00000c90 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     c90:	b510      	push	{r4, lr}
     c92:	b084      	sub	sp, #16
     c94:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     c96:	9001      	str	r0, [sp, #4]
     c98:	9102      	str	r1, [sp, #8]
     c9a:	2100      	movs	r1, #0
     c9c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     c9e:	a901      	add	r1, sp, #4
     ca0:	4805      	ldr	r0, [pc, #20]	; (cb8 <vsnprintk+0x28>)
     ca2:	f000 fa41 	bl	1128 <cbvprintf>

	if (ctx.count < ctx.max) {
     ca6:	9b03      	ldr	r3, [sp, #12]
     ca8:	9a02      	ldr	r2, [sp, #8]
     caa:	4293      	cmp	r3, r2
     cac:	da01      	bge.n	cb2 <vsnprintk+0x22>
		str[ctx.count] = '\0';
     cae:	2200      	movs	r2, #0
     cb0:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     cb2:	9803      	ldr	r0, [sp, #12]
     cb4:	b004      	add	sp, #16
     cb6:	bd10      	pop	{r4, pc}
     cb8:	00007929 	.word	0x00007929

00000cbc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     cc0:	b083      	sub	sp, #12
     cc2:	4604      	mov	r4, r0
     cc4:	4608      	mov	r0, r1
     cc6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cc8:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     cca:	f013 0f08 	tst.w	r3, #8
     cce:	d105      	bne.n	cdc <process_event+0x20>
     cd0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     cd4:	2300      	movs	r3, #0
     cd6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     cd8:	9301      	str	r3, [sp, #4]
}
     cda:	e069      	b.n	db0 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     cdc:	2901      	cmp	r1, #1
     cde:	d009      	beq.n	cf4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     ce0:	f043 0320 	orr.w	r3, r3, #32
     ce4:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     ce6:	f385 8811 	msr	BASEPRI, r5
     cea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     cee:	b003      	add	sp, #12
     cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     cf4:	f043 0310 	orr.w	r3, r3, #16
     cf8:	83a3      	strh	r3, [r4, #28]
     cfa:	e7f4      	b.n	ce6 <process_event+0x2a>
			evt = process_recheck(mgr);
     cfc:	4620      	mov	r0, r4
     cfe:	f006 fe72 	bl	79e6 <process_recheck>
     d02:	e057      	b.n	db4 <process_event+0xf8>
			res = mgr->last_res;
     d04:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     d08:	464a      	mov	r2, r9
     d0a:	4669      	mov	r1, sp
     d0c:	4620      	mov	r0, r4
     d0e:	f006 fe83 	bl	7a18 <process_complete>
		onoff_transition_fn transit = NULL;
     d12:	2700      	movs	r7, #0
     d14:	e05a      	b.n	dcc <process_event+0x110>
			transit = mgr->transitions->start;
     d16:	6923      	ldr	r3, [r4, #16]
     d18:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     d1a:	2106      	movs	r1, #6
     d1c:	4620      	mov	r0, r4
     d1e:	f006 fe3b 	bl	7998 <set_state>
		res = 0;
     d22:	f04f 0900 	mov.w	r9, #0
     d26:	e051      	b.n	dcc <process_event+0x110>
			transit = mgr->transitions->stop;
     d28:	6923      	ldr	r3, [r4, #16]
     d2a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     d2c:	2104      	movs	r1, #4
     d2e:	4620      	mov	r0, r4
     d30:	f006 fe32 	bl	7998 <set_state>
		res = 0;
     d34:	f04f 0900 	mov.w	r9, #0
     d38:	e048      	b.n	dcc <process_event+0x110>
			transit = mgr->transitions->reset;
     d3a:	6923      	ldr	r3, [r4, #16]
     d3c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     d3e:	2105      	movs	r1, #5
     d40:	4620      	mov	r0, r4
     d42:	f006 fe29 	bl	7998 <set_state>
		res = 0;
     d46:	f04f 0900 	mov.w	r9, #0
     d4a:	e03f      	b.n	dcc <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     d4c:	2200      	movs	r2, #0
     d4e:	e046      	b.n	dde <process_event+0x122>
     d50:	2200      	movs	r2, #0
     d52:	e044      	b.n	dde <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d54:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     d58:	83a3      	strh	r3, [r4, #28]
     d5a:	f385 8811 	msr	BASEPRI, r5
     d5e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     d62:	2900      	cmp	r1, #0
     d64:	d144      	bne.n	df0 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     d66:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     d68:	b12b      	cbz	r3, d76 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     d6a:	464b      	mov	r3, r9
     d6c:	4642      	mov	r2, r8
     d6e:	4669      	mov	r1, sp
     d70:	4620      	mov	r0, r4
     d72:	f006 fec8 	bl	7b06 <notify_all>
			if (transit != NULL) {
     d76:	b117      	cbz	r7, d7e <process_event+0xc2>
				transit(mgr, transition_complete);
     d78:	4925      	ldr	r1, [pc, #148]	; (e10 <process_event+0x154>)
     d7a:	4620      	mov	r0, r4
     d7c:	47b8      	blx	r7
	__asm__ volatile(
     d7e:	f04f 0320 	mov.w	r3, #32
     d82:	f3ef 8511 	mrs	r5, BASEPRI
     d86:	f383 8812 	msr	BASEPRI_MAX, r3
     d8a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     d8e:	8ba3      	ldrh	r3, [r4, #28]
     d90:	f023 0308 	bic.w	r3, r3, #8
     d94:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     d96:	8ba3      	ldrh	r3, [r4, #28]
     d98:	f013 0f10 	tst.w	r3, #16
     d9c:	d02e      	beq.n	dfc <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     d9e:	f023 0310 	bic.w	r3, r3, #16
     da2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     da4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     da6:	8ba6      	ldrh	r6, [r4, #28]
     da8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     dac:	2800      	cmp	r0, #0
     dae:	d09a      	beq.n	ce6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     db0:	2802      	cmp	r0, #2
     db2:	d0a3      	beq.n	cfc <process_event+0x40>
		if (evt == EVT_NOP) {
     db4:	2800      	cmp	r0, #0
     db6:	d096      	beq.n	ce6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     db8:	2801      	cmp	r0, #1
     dba:	d0a3      	beq.n	d04 <process_event+0x48>
		} else if (evt == EVT_START) {
     dbc:	2803      	cmp	r0, #3
     dbe:	d0aa      	beq.n	d16 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     dc0:	2804      	cmp	r0, #4
     dc2:	d0b1      	beq.n	d28 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     dc4:	2805      	cmp	r0, #5
     dc6:	d0b8      	beq.n	d3a <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     dc8:	2700      	movs	r7, #0
		res = 0;
     dca:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     dcc:	8ba3      	ldrh	r3, [r4, #28]
     dce:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     dd2:	45b0      	cmp	r8, r6
     dd4:	d0ba      	beq.n	d4c <process_event+0x90>
     dd6:	68a2      	ldr	r2, [r4, #8]
     dd8:	2a00      	cmp	r2, #0
     dda:	d0b9      	beq.n	d50 <process_event+0x94>
     ddc:	2201      	movs	r2, #1
		if (do_monitors
     dde:	4611      	mov	r1, r2
     de0:	2a00      	cmp	r2, #0
     de2:	d1b7      	bne.n	d54 <process_event+0x98>
     de4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     de6:	2a00      	cmp	r2, #0
     de8:	d1b4      	bne.n	d54 <process_event+0x98>
		    || (transit != NULL)) {
     dea:	2f00      	cmp	r7, #0
     dec:	d1b2      	bne.n	d54 <process_event+0x98>
     dee:	e7d2      	b.n	d96 <process_event+0xda>
				notify_monitors(mgr, state, res);
     df0:	464a      	mov	r2, r9
     df2:	4641      	mov	r1, r8
     df4:	4620      	mov	r0, r4
     df6:	f006 fdd7 	bl	79a8 <notify_monitors>
     dfa:	e7b4      	b.n	d66 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     dfc:	f013 0f20 	tst.w	r3, #32
     e00:	d004      	beq.n	e0c <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     e02:	f023 0320 	bic.w	r3, r3, #32
     e06:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     e08:	2002      	movs	r0, #2
     e0a:	e7cc      	b.n	da6 <process_event+0xea>
		evt = EVT_NOP;
     e0c:	2000      	movs	r0, #0
     e0e:	e7ca      	b.n	da6 <process_event+0xea>
     e10:	00007b35 	.word	0x00007b35

00000e14 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     e14:	b570      	push	{r4, r5, r6, lr}
     e16:	b082      	sub	sp, #8
     e18:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     e1a:	2300      	movs	r3, #0
     e1c:	6003      	str	r3, [r0, #0]
     e1e:	6043      	str	r3, [r0, #4]
     e20:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     e22:	784b      	ldrb	r3, [r1, #1]
     e24:	2b25      	cmp	r3, #37	; 0x25
     e26:	d002      	beq.n	e2e <extract_conversion+0x1a>
     e28:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     e2a:	2501      	movs	r5, #1
     e2c:	e01f      	b.n	e6e <extract_conversion+0x5a>
		conv->specifier = *sp++;
     e2e:	1c88      	adds	r0, r1, #2
     e30:	70e3      	strb	r3, [r4, #3]
		return sp;
     e32:	e145      	b.n	10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
			conv->flag_dash = true;
     e34:	7823      	ldrb	r3, [r4, #0]
     e36:	f043 0304 	orr.w	r3, r3, #4
     e3a:	7023      	strb	r3, [r4, #0]
		if (loop) {
     e3c:	b1b5      	cbz	r5, e6c <extract_conversion+0x58>
			++sp;
     e3e:	3601      	adds	r6, #1
     e40:	e014      	b.n	e6c <extract_conversion+0x58>
			conv->flag_plus = true;
     e42:	7823      	ldrb	r3, [r4, #0]
     e44:	f043 0308 	orr.w	r3, r3, #8
     e48:	7023      	strb	r3, [r4, #0]
			break;
     e4a:	e7f7      	b.n	e3c <extract_conversion+0x28>
			conv->flag_space = true;
     e4c:	7823      	ldrb	r3, [r4, #0]
     e4e:	f043 0310 	orr.w	r3, r3, #16
     e52:	7023      	strb	r3, [r4, #0]
			break;
     e54:	e7f2      	b.n	e3c <extract_conversion+0x28>
			conv->flag_hash = true;
     e56:	7823      	ldrb	r3, [r4, #0]
     e58:	f043 0320 	orr.w	r3, r3, #32
     e5c:	7023      	strb	r3, [r4, #0]
			break;
     e5e:	e7ed      	b.n	e3c <extract_conversion+0x28>
			conv->flag_zero = true;
     e60:	7823      	ldrb	r3, [r4, #0]
     e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     e66:	7023      	strb	r3, [r4, #0]
			break;
     e68:	e7e8      	b.n	e3c <extract_conversion+0x28>
		switch (*sp) {
     e6a:	2500      	movs	r5, #0
	} while (loop);
     e6c:	b345      	cbz	r5, ec0 <extract_conversion+0xac>
		switch (*sp) {
     e6e:	7833      	ldrb	r3, [r6, #0]
     e70:	3b20      	subs	r3, #32
     e72:	2b10      	cmp	r3, #16
     e74:	d8f9      	bhi.n	e6a <extract_conversion+0x56>
     e76:	a201      	add	r2, pc, #4	; (adr r2, e7c <extract_conversion+0x68>)
     e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e7c:	00000e4d 	.word	0x00000e4d
     e80:	00000e6b 	.word	0x00000e6b
     e84:	00000e6b 	.word	0x00000e6b
     e88:	00000e57 	.word	0x00000e57
     e8c:	00000e6b 	.word	0x00000e6b
     e90:	00000e6b 	.word	0x00000e6b
     e94:	00000e6b 	.word	0x00000e6b
     e98:	00000e6b 	.word	0x00000e6b
     e9c:	00000e6b 	.word	0x00000e6b
     ea0:	00000e6b 	.word	0x00000e6b
     ea4:	00000e6b 	.word	0x00000e6b
     ea8:	00000e43 	.word	0x00000e43
     eac:	00000e6b 	.word	0x00000e6b
     eb0:	00000e35 	.word	0x00000e35
     eb4:	00000e6b 	.word	0x00000e6b
     eb8:	00000e6b 	.word	0x00000e6b
     ebc:	00000e61 	.word	0x00000e61
	if (conv->flag_zero && conv->flag_dash) {
     ec0:	7823      	ldrb	r3, [r4, #0]
     ec2:	f003 0344 	and.w	r3, r3, #68	; 0x44
     ec6:	2b44      	cmp	r3, #68	; 0x44
     ec8:	d05f      	beq.n	f8a <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
     eca:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
     ecc:	7823      	ldrb	r3, [r4, #0]
     ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ed2:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
     ed4:	7833      	ldrb	r3, [r6, #0]
     ed6:	2b2a      	cmp	r3, #42	; 0x2a
     ed8:	d05c      	beq.n	f94 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
     eda:	a801      	add	r0, sp, #4
     edc:	f006 feba 	bl	7c54 <extract_decimal>
	if (sp != wp) {
     ee0:	9b01      	ldr	r3, [sp, #4]
     ee2:	429e      	cmp	r6, r3
     ee4:	d00f      	beq.n	f06 <extract_conversion+0xf2>
		conv->width_present = true;
     ee6:	7823      	ldrb	r3, [r4, #0]
     ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     eec:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
     eee:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
     ef0:	b2db      	uxtb	r3, r3
     ef2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     ef6:	2800      	cmp	r0, #0
     ef8:	db54      	blt.n	fa4 <extract_conversion+0x190>
     efa:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     efc:	4313      	orrs	r3, r2
     efe:	7822      	ldrb	r2, [r4, #0]
     f00:	f363 0241 	bfi	r2, r3, #1, #1
     f04:	7022      	strb	r2, [r4, #0]
	return sp;
     f06:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
     f08:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
     f0a:	781b      	ldrb	r3, [r3, #0]
     f0c:	2b2e      	cmp	r3, #46	; 0x2e
     f0e:	bf14      	ite	ne
     f10:	2300      	movne	r3, #0
     f12:	2301      	moveq	r3, #1
     f14:	7862      	ldrb	r2, [r4, #1]
     f16:	f363 0241 	bfi	r2, r3, #1, #1
     f1a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
     f1c:	2b00      	cmp	r3, #0
     f1e:	d043      	beq.n	fa8 <extract_conversion+0x194>
	++sp;
     f20:	9b01      	ldr	r3, [sp, #4]
     f22:	1c5a      	adds	r2, r3, #1
     f24:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
     f26:	785b      	ldrb	r3, [r3, #1]
     f28:	2b2a      	cmp	r3, #42	; 0x2a
     f2a:	d03f      	beq.n	fac <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
     f2c:	a801      	add	r0, sp, #4
     f2e:	f006 fe91 	bl	7c54 <extract_decimal>
	conv->prec_value = prec;
     f32:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
     f34:	7823      	ldrb	r3, [r4, #0]
     f36:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     f3a:	2800      	cmp	r0, #0
     f3c:	db3e      	blt.n	fbc <extract_conversion+0x1a8>
     f3e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     f40:	4313      	orrs	r3, r2
     f42:	7822      	ldrb	r2, [r4, #0]
     f44:	f363 0241 	bfi	r2, r3, #1, #1
     f48:	7022      	strb	r2, [r4, #0]
	return sp;
     f4a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
     f4c:	7803      	ldrb	r3, [r0, #0]
     f4e:	3b4c      	subs	r3, #76	; 0x4c
     f50:	2b2e      	cmp	r3, #46	; 0x2e
     f52:	f200 809d 	bhi.w	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
     f56:	e8df f003 	tbb	[pc, r3]
     f5a:	9b90      	.short	0x9b90
     f5c:	9b9b9b9b 	.word	0x9b9b9b9b
     f60:	9b9b9b9b 	.word	0x9b9b9b9b
     f64:	9b9b9b9b 	.word	0x9b9b9b9b
     f68:	9b9b9b9b 	.word	0x9b9b9b9b
     f6c:	9b9b9b9b 	.word	0x9b9b9b9b
     f70:	9b9b9b9b 	.word	0x9b9b9b9b
     f74:	9b339b9b 	.word	0x9b339b9b
     f78:	9b459b57 	.word	0x9b459b57
     f7c:	9b9b9b9b 	.word	0x9b9b9b9b
     f80:	9b899b9b 	.word	0x9b899b9b
     f84:	9b9b9b9b 	.word	0x9b9b9b9b
     f88:	82          	.byte	0x82
     f89:	00          	.byte	0x00
		conv->flag_zero = false;
     f8a:	7823      	ldrb	r3, [r4, #0]
     f8c:	f36f 1386 	bfc	r3, #6, #1
     f90:	7023      	strb	r3, [r4, #0]
     f92:	e79a      	b.n	eca <extract_conversion+0xb6>
		conv->width_star = true;
     f94:	7863      	ldrb	r3, [r4, #1]
     f96:	f043 0301 	orr.w	r3, r3, #1
     f9a:	7063      	strb	r3, [r4, #1]
		return ++sp;
     f9c:	4633      	mov	r3, r6
     f9e:	3301      	adds	r3, #1
     fa0:	9301      	str	r3, [sp, #4]
     fa2:	e7b1      	b.n	f08 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
     fa4:	2201      	movs	r2, #1
     fa6:	e7a9      	b.n	efc <extract_conversion+0xe8>
		return sp;
     fa8:	9801      	ldr	r0, [sp, #4]
     faa:	e7cf      	b.n	f4c <extract_conversion+0x138>
		conv->prec_star = true;
     fac:	7863      	ldrb	r3, [r4, #1]
     fae:	f043 0304 	orr.w	r3, r3, #4
     fb2:	7063      	strb	r3, [r4, #1]
		return ++sp;
     fb4:	4610      	mov	r0, r2
     fb6:	3001      	adds	r0, #1
     fb8:	9001      	str	r0, [sp, #4]
     fba:	e7c7      	b.n	f4c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
     fbc:	2201      	movs	r2, #1
     fbe:	e7bf      	b.n	f40 <extract_conversion+0x12c>
		if (*++sp == 'h') {
     fc0:	1c42      	adds	r2, r0, #1
     fc2:	7843      	ldrb	r3, [r0, #1]
     fc4:	2b68      	cmp	r3, #104	; 0x68
     fc6:	d006      	beq.n	fd6 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
     fc8:	7863      	ldrb	r3, [r4, #1]
     fca:	2102      	movs	r1, #2
     fcc:	f361 03c6 	bfi	r3, r1, #3, #4
     fd0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
     fd2:	4610      	mov	r0, r2
     fd4:	e01e      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
			conv->length_mod = LENGTH_HH;
     fd6:	7863      	ldrb	r3, [r4, #1]
     fd8:	2201      	movs	r2, #1
     fda:	f362 03c6 	bfi	r3, r2, #3, #4
     fde:	7063      	strb	r3, [r4, #1]
			++sp;
     fe0:	3002      	adds	r0, #2
     fe2:	e017      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
		if (*++sp == 'l') {
     fe4:	1c42      	adds	r2, r0, #1
     fe6:	7843      	ldrb	r3, [r0, #1]
     fe8:	2b6c      	cmp	r3, #108	; 0x6c
     fea:	d006      	beq.n	ffa <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
     fec:	7863      	ldrb	r3, [r4, #1]
     fee:	2103      	movs	r1, #3
     ff0:	f361 03c6 	bfi	r3, r1, #3, #4
     ff4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
     ff6:	4610      	mov	r0, r2
     ff8:	e00c      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
			conv->length_mod = LENGTH_LL;
     ffa:	7863      	ldrb	r3, [r4, #1]
     ffc:	2204      	movs	r2, #4
     ffe:	f362 03c6 	bfi	r3, r2, #3, #4
    1002:	7063      	strb	r3, [r4, #1]
			++sp;
    1004:	3002      	adds	r0, #2
    1006:	e005      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
		conv->length_mod = LENGTH_J;
    1008:	7863      	ldrb	r3, [r4, #1]
    100a:	2205      	movs	r2, #5
    100c:	f362 03c6 	bfi	r3, r2, #3, #4
    1010:	7063      	strb	r3, [r4, #1]
		++sp;
    1012:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    1014:	f810 3b01 	ldrb.w	r3, [r0], #1
    1018:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    101a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    101e:	2a37      	cmp	r2, #55	; 0x37
    1020:	d87d      	bhi.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
    1022:	e8df f002 	tbb	[pc, r2]
    1026:	7c5e      	.short	0x7c5e
    1028:	5e5e7c7c 	.word	0x5e5e7c7c
    102c:	7c7c7c5e 	.word	0x7c7c7c5e
    1030:	7c7c7c7c 	.word	0x7c7c7c7c
    1034:	7c7c7c7c 	.word	0x7c7c7c7c
    1038:	7c7c7c7c 	.word	0x7c7c7c7c
    103c:	7c7c4f7c 	.word	0x7c7c4f7c
    1040:	7c7c7c7c 	.word	0x7c7c7c7c
    1044:	7c5e7c7c 	.word	0x7c5e7c7c
    1048:	5e5e3a4f 	.word	0x5e5e3a4f
    104c:	7c3a7c5e 	.word	0x7c3a7c5e
    1050:	657c7c7c 	.word	0x657c7c7c
    1054:	7c7c714f 	.word	0x7c7c714f
    1058:	7c4f7c71 	.word	0x7c4f7c71
    105c:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    105e:	7863      	ldrb	r3, [r4, #1]
    1060:	2206      	movs	r2, #6
    1062:	f362 03c6 	bfi	r3, r2, #3, #4
    1066:	7063      	strb	r3, [r4, #1]
		++sp;
    1068:	3001      	adds	r0, #1
		break;
    106a:	e7d3      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
		conv->length_mod = LENGTH_T;
    106c:	7863      	ldrb	r3, [r4, #1]
    106e:	2207      	movs	r2, #7
    1070:	f362 03c6 	bfi	r3, r2, #3, #4
    1074:	7063      	strb	r3, [r4, #1]
		++sp;
    1076:	3001      	adds	r0, #1
		break;
    1078:	e7cc      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
		conv->length_mod = LENGTH_UPPER_L;
    107a:	7863      	ldrb	r3, [r4, #1]
    107c:	2208      	movs	r2, #8
    107e:	f362 03c6 	bfi	r3, r2, #3, #4
    1082:	7063      	strb	r3, [r4, #1]
		++sp;
    1084:	3001      	adds	r0, #1
		conv->unsupported = true;
    1086:	7823      	ldrb	r3, [r4, #0]
    1088:	f043 0302 	orr.w	r3, r3, #2
    108c:	7023      	strb	r3, [r4, #0]
		break;
    108e:	e7c1      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
		conv->length_mod = LENGTH_NONE;
    1090:	7863      	ldrb	r3, [r4, #1]
    1092:	f36f 03c6 	bfc	r3, #3, #4
    1096:	7063      	strb	r3, [r4, #1]
		break;
    1098:	e7bc      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
		conv->specifier_cat = SPECIFIER_SINT;
    109a:	78a2      	ldrb	r2, [r4, #2]
    109c:	2101      	movs	r1, #1
    109e:	f361 0202 	bfi	r2, r1, #0, #3
    10a2:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    10a4:	7862      	ldrb	r2, [r4, #1]
    10a6:	f002 0278 	and.w	r2, r2, #120	; 0x78
    10aa:	2a40      	cmp	r2, #64	; 0x40
    10ac:	d010      	beq.n	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
		if (conv->specifier == 'c') {
    10ae:	2b63      	cmp	r3, #99	; 0x63
    10b0:	d013      	beq.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
	conv->unsupported |= unsupported;
    10b2:	7823      	ldrb	r3, [r4, #0]
    10b4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    10b8:	4315      	orrs	r5, r2
    10ba:	f365 0341 	bfi	r3, r5, #1, #1
    10be:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    10c0:	b002      	add	sp, #8
    10c2:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    10c4:	78a2      	ldrb	r2, [r4, #2]
    10c6:	2102      	movs	r1, #2
    10c8:	f361 0202 	bfi	r2, r1, #0, #3
    10cc:	70a2      	strb	r2, [r4, #2]
    10ce:	e7e9      	b.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
			conv->invalid = true;
    10d0:	7821      	ldrb	r1, [r4, #0]
    10d2:	f041 0101 	orr.w	r1, r1, #1
    10d6:	7021      	strb	r1, [r4, #0]
    10d8:	e7e9      	b.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
			unsupported = (conv->length_mod != LENGTH_NONE);
    10da:	1e15      	subs	r5, r2, #0
    10dc:	bf18      	it	ne
    10de:	2501      	movne	r5, #1
    10e0:	e7e7      	b.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
		conv->specifier_cat = SPECIFIER_FP;
    10e2:	78a3      	ldrb	r3, [r4, #2]
    10e4:	2204      	movs	r2, #4
    10e6:	f362 0302 	bfi	r3, r2, #0, #3
    10ea:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    10ec:	2501      	movs	r5, #1
			break;
    10ee:	e7e0      	b.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
		conv->specifier_cat = SPECIFIER_PTR;
    10f0:	78a3      	ldrb	r3, [r4, #2]
    10f2:	2203      	movs	r2, #3
    10f4:	f362 0302 	bfi	r3, r2, #0, #3
    10f8:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    10fa:	7863      	ldrb	r3, [r4, #1]
    10fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1100:	2b40      	cmp	r3, #64	; 0x40
    1102:	d1d6      	bne.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
			unsupported = true;
    1104:	2501      	movs	r5, #1
    1106:	e7d4      	b.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
		conv->specifier_cat = SPECIFIER_PTR;
    1108:	78a3      	ldrb	r3, [r4, #2]
    110a:	2203      	movs	r2, #3
    110c:	f362 0302 	bfi	r3, r2, #0, #3
    1110:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    1112:	7863      	ldrb	r3, [r4, #1]
    1114:	f013 0f78 	tst.w	r3, #120	; 0x78
    1118:	d0cb      	beq.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
			unsupported = true;
    111a:	2501      	movs	r5, #1
    111c:	e7c9      	b.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
		conv->invalid = true;
    111e:	7823      	ldrb	r3, [r4, #0]
    1120:	f043 0301 	orr.w	r3, r3, #1
    1124:	7023      	strb	r3, [r4, #0]
		break;
    1126:	e7c4      	b.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>

00001128 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    112c:	b091      	sub	sp, #68	; 0x44
    112e:	4606      	mov	r6, r0
    1130:	460d      	mov	r5, r1
    1132:	4691      	mov	r9, r2
    1134:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1136:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1138:	f899 0000 	ldrb.w	r0, [r9]
    113c:	2800      	cmp	r0, #0
    113e:	f000 82d5 	beq.w	16ec <cbvprintf+0x5c4>
		if (*fp != '%') {
    1142:	2825      	cmp	r0, #37	; 0x25
    1144:	d008      	beq.n	1158 <cbvprintf+0x30>
			OUTC(*fp++);
    1146:	f109 0901 	add.w	r9, r9, #1
    114a:	4629      	mov	r1, r5
    114c:	47b0      	blx	r6
    114e:	2800      	cmp	r0, #0
    1150:	f2c0 82cd 	blt.w	16ee <cbvprintf+0x5c6>
    1154:	3401      	adds	r4, #1
			continue;
    1156:	e7ef      	b.n	1138 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1158:	2300      	movs	r3, #0
    115a:	9304      	str	r3, [sp, #16]
    115c:	9305      	str	r3, [sp, #20]
    115e:	9306      	str	r3, [sp, #24]
    1160:	9307      	str	r3, [sp, #28]
    1162:	9308      	str	r3, [sp, #32]
    1164:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    1166:	4649      	mov	r1, r9
    1168:	a806      	add	r0, sp, #24
    116a:	f7ff fe53 	bl	e14 <extract_conversion>
    116e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1170:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1174:	f013 0f01 	tst.w	r3, #1
    1178:	f000 8097 	beq.w	12aa <cbvprintf+0x182>
			width = va_arg(ap, int);
    117c:	9b03      	ldr	r3, [sp, #12]
    117e:	1d1a      	adds	r2, r3, #4
    1180:	9203      	str	r2, [sp, #12]
    1182:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1184:	2f00      	cmp	r7, #0
    1186:	f2c0 8088 	blt.w	129a <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    118a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    118e:	f013 0f04 	tst.w	r3, #4
    1192:	f000 809c 	beq.w	12ce <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    1196:	9b03      	ldr	r3, [sp, #12]
    1198:	1d1a      	adds	r2, r3, #4
    119a:	9203      	str	r2, [sp, #12]
    119c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    11a0:	f1ba 0f00 	cmp.w	sl, #0
    11a4:	f2c0 808a 	blt.w	12bc <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    11a8:	2300      	movs	r3, #0
    11aa:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    11ac:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    11ae:	f89d 301a 	ldrb.w	r3, [sp, #26]
    11b2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    11b6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    11ba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    11be:	2b01      	cmp	r3, #1
    11c0:	f000 808e 	beq.w	12e0 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    11c4:	2b02      	cmp	r3, #2
    11c6:	f000 80d3 	beq.w	1370 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    11ca:	2b04      	cmp	r3, #4
    11cc:	f000 8124 	beq.w	1418 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    11d0:	2b03      	cmp	r3, #3
    11d2:	f000 813b 	beq.w	144c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    11d6:	f89d 8018 	ldrb.w	r8, [sp, #24]
    11da:	f018 0b03 	ands.w	fp, r8, #3
    11de:	f040 813b 	bne.w	1458 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    11e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    11e6:	3b25      	subs	r3, #37	; 0x25
    11e8:	2b53      	cmp	r3, #83	; 0x53
    11ea:	f200 81e6 	bhi.w	15ba <cbvprintf+0x492>
    11ee:	e8df f013 	tbh	[pc, r3, lsl #1]
    11f2:	0140      	.short	0x0140
    11f4:	01e401e4 	.word	0x01e401e4
    11f8:	01e401e4 	.word	0x01e401e4
    11fc:	01e401e4 	.word	0x01e401e4
    1200:	01e401e4 	.word	0x01e401e4
    1204:	01e401e4 	.word	0x01e401e4
    1208:	01e401e4 	.word	0x01e401e4
    120c:	01e401e4 	.word	0x01e401e4
    1210:	01e401e4 	.word	0x01e401e4
    1214:	01e401e4 	.word	0x01e401e4
    1218:	01e401e4 	.word	0x01e401e4
    121c:	01e401e4 	.word	0x01e401e4
    1220:	01e401e4 	.word	0x01e401e4
    1224:	01e401e4 	.word	0x01e401e4
    1228:	01e401e4 	.word	0x01e401e4
    122c:	01e401e4 	.word	0x01e401e4
    1230:	01e401e4 	.word	0x01e401e4
    1234:	01e401e4 	.word	0x01e401e4
    1238:	01e401e4 	.word	0x01e401e4
    123c:	01e401e4 	.word	0x01e401e4
    1240:	01e401e4 	.word	0x01e401e4
    1244:	01e401e4 	.word	0x01e401e4
    1248:	01e401e4 	.word	0x01e401e4
    124c:	01e401e4 	.word	0x01e401e4
    1250:	01e401e4 	.word	0x01e401e4
    1254:	01e401e4 	.word	0x01e401e4
    1258:	01e40181 	.word	0x01e40181
    125c:	01e401e4 	.word	0x01e401e4
    1260:	01e401e4 	.word	0x01e401e4
    1264:	01e401e4 	.word	0x01e401e4
    1268:	01e401e4 	.word	0x01e401e4
    126c:	015e01e4 	.word	0x015e01e4
    1270:	01e40167 	.word	0x01e40167
    1274:	01e401e4 	.word	0x01e401e4
    1278:	016701e4 	.word	0x016701e4
    127c:	01e401e4 	.word	0x01e401e4
    1280:	01e401e4 	.word	0x01e401e4
    1284:	018101be 	.word	0x018101be
    1288:	01e401a2 	.word	0x01e401a2
    128c:	014d01e4 	.word	0x014d01e4
    1290:	018101e4 	.word	0x018101e4
    1294:	01e401e4 	.word	0x01e401e4
    1298:	0181      	.short	0x0181
				conv->flag_dash = true;
    129a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    129e:	f043 0304 	orr.w	r3, r3, #4
    12a2:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    12a6:	427f      	negs	r7, r7
    12a8:	e76f      	b.n	118a <cbvprintf+0x62>
		} else if (conv->width_present) {
    12aa:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    12ae:	2b00      	cmp	r3, #0
    12b0:	db02      	blt.n	12b8 <cbvprintf+0x190>
		int width = -1;
    12b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    12b6:	e768      	b.n	118a <cbvprintf+0x62>
			width = conv->width_value;
    12b8:	9f07      	ldr	r7, [sp, #28]
    12ba:	e766      	b.n	118a <cbvprintf+0x62>
				conv->prec_present = false;
    12bc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    12c0:	f36f 0341 	bfc	r3, #1, #1
    12c4:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    12c8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    12cc:	e76c      	b.n	11a8 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    12ce:	f013 0f02 	tst.w	r3, #2
    12d2:	d002      	beq.n	12da <cbvprintf+0x1b2>
			precision = conv->prec_value;
    12d4:	f8dd a020 	ldr.w	sl, [sp, #32]
    12d8:	e766      	b.n	11a8 <cbvprintf+0x80>
		int precision = -1;
    12da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    12de:	e763      	b.n	11a8 <cbvprintf+0x80>
			switch (length_mod) {
    12e0:	1ecb      	subs	r3, r1, #3
    12e2:	2b04      	cmp	r3, #4
    12e4:	d804      	bhi.n	12f0 <cbvprintf+0x1c8>
    12e6:	e8df f003 	tbb	[pc, r3]
    12ea:	1d0b      	.short	0x1d0b
    12ec:	3529      	.short	0x3529
    12ee:	35          	.byte	0x35
    12ef:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    12f0:	9b03      	ldr	r3, [sp, #12]
    12f2:	1d1a      	adds	r2, r3, #4
    12f4:	9203      	str	r2, [sp, #12]
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	17da      	asrs	r2, r3, #31
    12fa:	9304      	str	r3, [sp, #16]
    12fc:	9205      	str	r2, [sp, #20]
				break;
    12fe:	e006      	b.n	130e <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    1300:	9b03      	ldr	r3, [sp, #12]
    1302:	1d1a      	adds	r2, r3, #4
    1304:	9203      	str	r2, [sp, #12]
    1306:	681b      	ldr	r3, [r3, #0]
    1308:	17da      	asrs	r2, r3, #31
    130a:	9304      	str	r3, [sp, #16]
    130c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    130e:	2901      	cmp	r1, #1
    1310:	d028      	beq.n	1364 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    1312:	2902      	cmp	r1, #2
    1314:	f47f af5f 	bne.w	11d6 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    1318:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    131c:	17da      	asrs	r2, r3, #31
    131e:	9304      	str	r3, [sp, #16]
    1320:	9205      	str	r2, [sp, #20]
    1322:	e758      	b.n	11d6 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    1324:	9b03      	ldr	r3, [sp, #12]
    1326:	3307      	adds	r3, #7
    1328:	f023 0307 	bic.w	r3, r3, #7
    132c:	f103 0208 	add.w	r2, r3, #8
    1330:	9203      	str	r2, [sp, #12]
    1332:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1336:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    133a:	e7e8      	b.n	130e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    133c:	9b03      	ldr	r3, [sp, #12]
    133e:	3307      	adds	r3, #7
    1340:	f023 0307 	bic.w	r3, r3, #7
    1344:	f103 0208 	add.w	r2, r3, #8
    1348:	9203      	str	r2, [sp, #12]
    134a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    134e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1352:	e7dc      	b.n	130e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1354:	9b03      	ldr	r3, [sp, #12]
    1356:	1d1a      	adds	r2, r3, #4
    1358:	9203      	str	r2, [sp, #12]
    135a:	681b      	ldr	r3, [r3, #0]
    135c:	17da      	asrs	r2, r3, #31
				value->sint =
    135e:	9304      	str	r3, [sp, #16]
    1360:	9205      	str	r2, [sp, #20]
				break;
    1362:	e7d4      	b.n	130e <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    1364:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1368:	9304      	str	r3, [sp, #16]
    136a:	2300      	movs	r3, #0
    136c:	9305      	str	r3, [sp, #20]
    136e:	e732      	b.n	11d6 <cbvprintf+0xae>
			switch (length_mod) {
    1370:	1ecb      	subs	r3, r1, #3
    1372:	2b04      	cmp	r3, #4
    1374:	d804      	bhi.n	1380 <cbvprintf+0x258>
    1376:	e8df f003 	tbb	[pc, r3]
    137a:	1f0b      	.short	0x1f0b
    137c:	4135      	.short	0x4135
    137e:	41          	.byte	0x41
    137f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    1380:	9b03      	ldr	r3, [sp, #12]
    1382:	1d1a      	adds	r2, r3, #4
    1384:	9203      	str	r2, [sp, #12]
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	9304      	str	r3, [sp, #16]
    138a:	2300      	movs	r3, #0
    138c:	9305      	str	r3, [sp, #20]
				break;
    138e:	e01e      	b.n	13ce <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    1390:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    1394:	2b63      	cmp	r3, #99	; 0x63
    1396:	d007      	beq.n	13a8 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    1398:	9b03      	ldr	r3, [sp, #12]
    139a:	1d1a      	adds	r2, r3, #4
    139c:	9203      	str	r2, [sp, #12]
    139e:	681b      	ldr	r3, [r3, #0]
    13a0:	9304      	str	r3, [sp, #16]
    13a2:	2300      	movs	r3, #0
    13a4:	9305      	str	r3, [sp, #20]
    13a6:	e012      	b.n	13ce <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    13a8:	9b03      	ldr	r3, [sp, #12]
    13aa:	1d1a      	adds	r2, r3, #4
    13ac:	9203      	str	r2, [sp, #12]
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	9304      	str	r3, [sp, #16]
    13b2:	2300      	movs	r3, #0
    13b4:	9305      	str	r3, [sp, #20]
    13b6:	e00a      	b.n	13ce <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    13b8:	9b03      	ldr	r3, [sp, #12]
    13ba:	3307      	adds	r3, #7
    13bc:	f023 0307 	bic.w	r3, r3, #7
    13c0:	f103 0208 	add.w	r2, r3, #8
    13c4:	9203      	str	r2, [sp, #12]
    13c6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    13ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    13ce:	2901      	cmp	r1, #1
    13d0:	d01c      	beq.n	140c <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    13d2:	2902      	cmp	r1, #2
    13d4:	f47f aeff 	bne.w	11d6 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    13d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    13dc:	9304      	str	r3, [sp, #16]
    13de:	2300      	movs	r3, #0
    13e0:	9305      	str	r3, [sp, #20]
    13e2:	e6f8      	b.n	11d6 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    13e4:	9b03      	ldr	r3, [sp, #12]
    13e6:	3307      	adds	r3, #7
    13e8:	f023 0307 	bic.w	r3, r3, #7
    13ec:	f103 0208 	add.w	r2, r3, #8
    13f0:	9203      	str	r2, [sp, #12]
    13f2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    13f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    13fa:	e7e8      	b.n	13ce <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    13fc:	9b03      	ldr	r3, [sp, #12]
    13fe:	1d1a      	adds	r2, r3, #4
    1400:	9203      	str	r2, [sp, #12]
    1402:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1404:	9304      	str	r3, [sp, #16]
    1406:	2300      	movs	r3, #0
    1408:	9305      	str	r3, [sp, #20]
				break;
    140a:	e7e0      	b.n	13ce <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    140c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1410:	9304      	str	r3, [sp, #16]
    1412:	2300      	movs	r3, #0
    1414:	9305      	str	r3, [sp, #20]
    1416:	e6de      	b.n	11d6 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    1418:	2908      	cmp	r1, #8
    141a:	d00b      	beq.n	1434 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    141c:	9b03      	ldr	r3, [sp, #12]
    141e:	3307      	adds	r3, #7
    1420:	f023 0307 	bic.w	r3, r3, #7
    1424:	f103 0208 	add.w	r2, r3, #8
    1428:	9203      	str	r2, [sp, #12]
    142a:	e9d3 2300 	ldrd	r2, r3, [r3]
    142e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1432:	e6d0      	b.n	11d6 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    1434:	9b03      	ldr	r3, [sp, #12]
    1436:	3307      	adds	r3, #7
    1438:	f023 0307 	bic.w	r3, r3, #7
    143c:	f103 0208 	add.w	r2, r3, #8
    1440:	9203      	str	r2, [sp, #12]
    1442:	e9d3 2300 	ldrd	r2, r3, [r3]
    1446:	e9cd 2304 	strd	r2, r3, [sp, #16]
    144a:	e6c4      	b.n	11d6 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    144c:	9b03      	ldr	r3, [sp, #12]
    144e:	1d1a      	adds	r2, r3, #4
    1450:	9203      	str	r2, [sp, #12]
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	9304      	str	r3, [sp, #16]
    1456:	e6be      	b.n	11d6 <cbvprintf+0xae>
			OUTS(sp, fp);
    1458:	9f02      	ldr	r7, [sp, #8]
    145a:	463b      	mov	r3, r7
    145c:	464a      	mov	r2, r9
    145e:	4629      	mov	r1, r5
    1460:	4630      	mov	r0, r6
    1462:	f006 fc73 	bl	7d4c <outs>
    1466:	2800      	cmp	r0, #0
    1468:	f2c0 8141 	blt.w	16ee <cbvprintf+0x5c6>
    146c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    146e:	46b9      	mov	r9, r7
			continue;
    1470:	e662      	b.n	1138 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1472:	4629      	mov	r1, r5
    1474:	2025      	movs	r0, #37	; 0x25
    1476:	47b0      	blx	r6
    1478:	2800      	cmp	r0, #0
    147a:	f2c0 8138 	blt.w	16ee <cbvprintf+0x5c6>
    147e:	3401      	adds	r4, #1
		char sign = 0;
    1480:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1482:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1486:	f04f 0900 	mov.w	r9, #0
			break;
    148a:	e09b      	b.n	15c4 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    148c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    1490:	f1ba 0f00 	cmp.w	sl, #0
    1494:	db07      	blt.n	14a6 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    1496:	4651      	mov	r1, sl
    1498:	4648      	mov	r0, r9
    149a:	f007 f903 	bl	86a4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    149e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    14a2:	46d8      	mov	r8, fp
			precision = -1;

			break;
    14a4:	e08e      	b.n	15c4 <cbvprintf+0x49c>
				len = strlen(bps);
    14a6:	4648      	mov	r0, r9
    14a8:	f007 f8f3 	bl	8692 <strlen>
    14ac:	e7f7      	b.n	149e <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    14ae:	9b04      	ldr	r3, [sp, #16]
    14b0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    14b4:	46d8      	mov	r8, fp
			bpe = buf + 1;
    14b6:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    14ba:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    14be:	e081      	b.n	15c4 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    14c0:	f018 0f08 	tst.w	r8, #8
    14c4:	d105      	bne.n	14d2 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    14c6:	f018 0810 	ands.w	r8, r8, #16
    14ca:	d004      	beq.n	14d6 <cbvprintf+0x3ae>
				sign = ' ';
    14cc:	f04f 0820 	mov.w	r8, #32
    14d0:	e001      	b.n	14d6 <cbvprintf+0x3ae>
				sign = '+';
    14d2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    14d6:	9a04      	ldr	r2, [sp, #16]
    14d8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    14da:	2b00      	cmp	r3, #0
    14dc:	db02      	blt.n	14e4 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    14de:	9204      	str	r2, [sp, #16]
    14e0:	9305      	str	r3, [sp, #20]
    14e2:	e008      	b.n	14f6 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    14e4:	4252      	negs	r2, r2
    14e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    14ea:	9204      	str	r2, [sp, #16]
    14ec:	9305      	str	r3, [sp, #20]
				sign = '-';
    14ee:	f04f 082d 	mov.w	r8, #45	; 0x2d
    14f2:	e000      	b.n	14f6 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    14f4:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    14f6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    14fa:	9300      	str	r3, [sp, #0]
    14fc:	ab0a      	add	r3, sp, #40	; 0x28
    14fe:	aa06      	add	r2, sp, #24
    1500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1504:	f006 fbb8 	bl	7c78 <encode_uint>
    1508:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    150a:	f1ba 0f00 	cmp.w	sl, #0
    150e:	f2c0 8088 	blt.w	1622 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    1512:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1516:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    151a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    151e:	f36f 1286 	bfc	r2, #6, #1
    1522:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1526:	459a      	cmp	sl, r3
    1528:	d97e      	bls.n	1628 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    152a:	ebaa 0303 	sub.w	r3, sl, r3
    152e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1530:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1534:	e046      	b.n	15c4 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1536:	9804      	ldr	r0, [sp, #16]
    1538:	b928      	cbnz	r0, 1546 <cbvprintf+0x41e>
		char sign = 0;
    153a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    153c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 16f4 <cbvprintf+0x5cc>
			bps = "(nil)";
    1540:	f1aa 0905 	sub.w	r9, sl, #5
    1544:	e03e      	b.n	15c4 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1546:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    154a:	9300      	str	r3, [sp, #0]
    154c:	ab0a      	add	r3, sp, #40	; 0x28
    154e:	aa06      	add	r2, sp, #24
    1550:	2100      	movs	r1, #0
    1552:	f006 fb91 	bl	7c78 <encode_uint>
    1556:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1558:	f89d 301a 	ldrb.w	r3, [sp, #26]
    155c:	f043 0310 	orr.w	r3, r3, #16
    1560:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1564:	2378      	movs	r3, #120	; 0x78
    1566:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    156a:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    156c:	e7cd      	b.n	150a <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    156e:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    1570:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1574:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1578:	2b07      	cmp	r3, #7
    157a:	d806      	bhi.n	158a <cbvprintf+0x462>
    157c:	e8df f003 	tbb	[pc, r3]
    1580:	0f0d0b04 	.word	0x0f0d0b04
    1584:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    1588:	6014      	str	r4, [r2, #0]
		char sign = 0;
    158a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    158c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1590:	f04f 0900 	mov.w	r9, #0
}
    1594:	e016      	b.n	15c4 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    1596:	7014      	strb	r4, [r2, #0]
		break;
    1598:	e7f7      	b.n	158a <cbvprintf+0x462>
		*(short *)dp = (short)count;
    159a:	8014      	strh	r4, [r2, #0]
		break;
    159c:	e7f5      	b.n	158a <cbvprintf+0x462>
		*(long *)dp = (long)count;
    159e:	6014      	str	r4, [r2, #0]
		break;
    15a0:	e7f3      	b.n	158a <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    15a2:	17e3      	asrs	r3, r4, #31
    15a4:	6014      	str	r4, [r2, #0]
    15a6:	6053      	str	r3, [r2, #4]
		break;
    15a8:	e7ef      	b.n	158a <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    15aa:	17e3      	asrs	r3, r4, #31
    15ac:	6014      	str	r4, [r2, #0]
    15ae:	6053      	str	r3, [r2, #4]
		break;
    15b0:	e7eb      	b.n	158a <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    15b2:	6014      	str	r4, [r2, #0]
		break;
    15b4:	e7e9      	b.n	158a <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    15b6:	6014      	str	r4, [r2, #0]
		break;
    15b8:	e7e7      	b.n	158a <cbvprintf+0x462>
		switch (conv->specifier) {
    15ba:	46d8      	mov	r8, fp
    15bc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    15c0:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    15c4:	f1b9 0f00 	cmp.w	r9, #0
    15c8:	f000 808d 	beq.w	16e6 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    15cc:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    15d0:	f1b8 0f00 	cmp.w	r8, #0
    15d4:	d000      	beq.n	15d8 <cbvprintf+0x4b0>
			nj_len += 1U;
    15d6:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    15d8:	f89d 201a 	ldrb.w	r2, [sp, #26]
    15dc:	f012 0f10 	tst.w	r2, #16
    15e0:	d025      	beq.n	162e <cbvprintf+0x506>
			nj_len += 2U;
    15e2:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    15e4:	9907      	ldr	r1, [sp, #28]
    15e6:	440b      	add	r3, r1
		if (conv->pad_fp) {
    15e8:	f012 0f40 	tst.w	r2, #64	; 0x40
    15ec:	d001      	beq.n	15f2 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    15ee:	9a08      	ldr	r2, [sp, #32]
    15f0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    15f2:	2f00      	cmp	r7, #0
    15f4:	dd31      	ble.n	165a <cbvprintf+0x532>
			width -= (int)nj_len;
    15f6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    15f8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    15fc:	f013 0f04 	tst.w	r3, #4
    1600:	d12b      	bne.n	165a <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1602:	f013 0f40 	tst.w	r3, #64	; 0x40
    1606:	d017      	beq.n	1638 <cbvprintf+0x510>
					if (sign != 0) {
    1608:	f1b8 0f00 	cmp.w	r8, #0
    160c:	d017      	beq.n	163e <cbvprintf+0x516>
						OUTC(sign);
    160e:	4629      	mov	r1, r5
    1610:	4640      	mov	r0, r8
    1612:	47b0      	blx	r6
    1614:	2800      	cmp	r0, #0
    1616:	db6a      	blt.n	16ee <cbvprintf+0x5c6>
    1618:	3401      	adds	r4, #1
						sign = 0;
    161a:	46d8      	mov	r8, fp
					}
					pad = '0';
    161c:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1620:	e00f      	b.n	1642 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    1622:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1626:	e7cd      	b.n	15c4 <cbvprintf+0x49c>
    1628:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    162c:	e7ca      	b.n	15c4 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    162e:	f012 0f08 	tst.w	r2, #8
    1632:	d0d7      	beq.n	15e4 <cbvprintf+0x4bc>
			nj_len += 1U;
    1634:	3301      	adds	r3, #1
    1636:	e7d5      	b.n	15e4 <cbvprintf+0x4bc>
				char pad = ' ';
    1638:	f04f 0b20 	mov.w	fp, #32
    163c:	e001      	b.n	1642 <cbvprintf+0x51a>
					pad = '0';
    163e:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1642:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1644:	1e5f      	subs	r7, r3, #1
    1646:	2b00      	cmp	r3, #0
    1648:	dd07      	ble.n	165a <cbvprintf+0x532>
					OUTC(pad);
    164a:	4629      	mov	r1, r5
    164c:	4658      	mov	r0, fp
    164e:	47b0      	blx	r6
    1650:	2800      	cmp	r0, #0
    1652:	db4c      	blt.n	16ee <cbvprintf+0x5c6>
    1654:	3401      	adds	r4, #1
				while (width-- > 0) {
    1656:	463b      	mov	r3, r7
    1658:	e7f4      	b.n	1644 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    165a:	f1b8 0f00 	cmp.w	r8, #0
    165e:	d005      	beq.n	166c <cbvprintf+0x544>
			OUTC(sign);
    1660:	4629      	mov	r1, r5
    1662:	4640      	mov	r0, r8
    1664:	47b0      	blx	r6
    1666:	2800      	cmp	r0, #0
    1668:	db41      	blt.n	16ee <cbvprintf+0x5c6>
    166a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    166c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1670:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1674:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1678:	4313      	orrs	r3, r2
    167a:	d005      	beq.n	1688 <cbvprintf+0x560>
				OUTC('0');
    167c:	4629      	mov	r1, r5
    167e:	2030      	movs	r0, #48	; 0x30
    1680:	47b0      	blx	r6
    1682:	2800      	cmp	r0, #0
    1684:	db33      	blt.n	16ee <cbvprintf+0x5c6>
    1686:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1688:	f89d 301a 	ldrb.w	r3, [sp, #26]
    168c:	f013 0f10 	tst.w	r3, #16
    1690:	d006      	beq.n	16a0 <cbvprintf+0x578>
				OUTC(conv->specifier);
    1692:	4629      	mov	r1, r5
    1694:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1698:	47b0      	blx	r6
    169a:	2800      	cmp	r0, #0
    169c:	db27      	blt.n	16ee <cbvprintf+0x5c6>
    169e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    16a0:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    16a2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    16a6:	2b00      	cmp	r3, #0
    16a8:	dd07      	ble.n	16ba <cbvprintf+0x592>
				OUTC('0');
    16aa:	4629      	mov	r1, r5
    16ac:	2030      	movs	r0, #48	; 0x30
    16ae:	47b0      	blx	r6
    16b0:	2800      	cmp	r0, #0
    16b2:	db1c      	blt.n	16ee <cbvprintf+0x5c6>
    16b4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    16b6:	4643      	mov	r3, r8
    16b8:	e7f3      	b.n	16a2 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    16ba:	4653      	mov	r3, sl
    16bc:	464a      	mov	r2, r9
    16be:	4629      	mov	r1, r5
    16c0:	4630      	mov	r0, r6
    16c2:	f006 fb43 	bl	7d4c <outs>
    16c6:	2800      	cmp	r0, #0
    16c8:	db11      	blt.n	16ee <cbvprintf+0x5c6>
    16ca:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    16cc:	2f00      	cmp	r7, #0
    16ce:	dd07      	ble.n	16e0 <cbvprintf+0x5b8>
			OUTC(' ');
    16d0:	4629      	mov	r1, r5
    16d2:	2020      	movs	r0, #32
    16d4:	47b0      	blx	r6
    16d6:	2800      	cmp	r0, #0
    16d8:	db09      	blt.n	16ee <cbvprintf+0x5c6>
    16da:	3401      	adds	r4, #1
			--width;
    16dc:	3f01      	subs	r7, #1
    16de:	e7f5      	b.n	16cc <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    16e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
    16e4:	e528      	b.n	1138 <cbvprintf+0x10>
    16e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    16ea:	e525      	b.n	1138 <cbvprintf+0x10>
		}
	}

	return count;
    16ec:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    16ee:	b011      	add	sp, #68	; 0x44
    16f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16f4:	00009b01 	.word	0x00009b01

000016f8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    16f8:	b508      	push	{r3, lr}
    16fa:	f04f 0220 	mov.w	r2, #32
    16fe:	f3ef 8311 	mrs	r3, BASEPRI
    1702:	f382 8812 	msr	BASEPRI_MAX, r2
    1706:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    170a:	f002 fb3f 	bl	3d8c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    170e:	4803      	ldr	r0, [pc, #12]	; (171c <sys_reboot+0x24>)
    1710:	f006 f926 	bl	7960 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1714:	f000 ffb4 	bl	2680 <arch_cpu_idle>
    1718:	e7fc      	b.n	1714 <sys_reboot+0x1c>
    171a:	bf00      	nop
    171c:	00009b04 	.word	0x00009b04

00001720 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    1720:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    1722:	4b06      	ldr	r3, [pc, #24]	; (173c <thread_set+0x1c>)
    1724:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1726:	b118      	cbz	r0, 1730 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1728:	4b05      	ldr	r3, [pc, #20]	; (1740 <thread_set+0x20>)
    172a:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    172c:	2b09      	cmp	r3, #9
    172e:	dc00      	bgt.n	1732 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    1730:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1732:	4804      	ldr	r0, [pc, #16]	; (1744 <thread_set+0x24>)
    1734:	f005 f812 	bl	675c <z_impl_k_sem_give>
}
    1738:	e7fa      	b.n	1730 <thread_set+0x10>
    173a:	bf00      	nop
    173c:	2000088c 	.word	0x2000088c
    1740:	20000844 	.word	0x20000844
    1744:	200001bc 	.word	0x200001bc

00001748 <log_process_thread_timer_expiry_fn>:

	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    1748:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    174a:	4802      	ldr	r0, [pc, #8]	; (1754 <log_process_thread_timer_expiry_fn+0xc>)
    174c:	f005 f806 	bl	675c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    1750:	bd08      	pop	{r3, pc}
    1752:	bf00      	nop
    1754:	200001bc 	.word	0x200001bc

00001758 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1758:	b530      	push	{r4, r5, lr}
    175a:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    175c:	2200      	movs	r2, #0
    175e:	490f      	ldr	r1, [pc, #60]	; (179c <enable_logger+0x44>)
    1760:	480f      	ldr	r0, [pc, #60]	; (17a0 <enable_logger+0x48>)
    1762:	f007 ffe5 	bl	9730 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1766:	4d0f      	ldr	r5, [pc, #60]	; (17a4 <enable_logger+0x4c>)
    1768:	2200      	movs	r2, #0
    176a:	2300      	movs	r3, #0
    176c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1770:	2400      	movs	r4, #0
    1772:	9404      	str	r4, [sp, #16]
    1774:	230e      	movs	r3, #14
    1776:	9303      	str	r3, [sp, #12]
    1778:	9402      	str	r4, [sp, #8]
    177a:	9401      	str	r4, [sp, #4]
    177c:	9400      	str	r4, [sp, #0]
    177e:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <enable_logger+0x50>)
    1780:	f44f 7240 	mov.w	r2, #768	; 0x300
    1784:	4909      	ldr	r1, [pc, #36]	; (17ac <enable_logger+0x54>)
    1786:	4628      	mov	r0, r5
    1788:	f007 fdb5 	bl	92f6 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    178c:	4908      	ldr	r1, [pc, #32]	; (17b0 <enable_logger+0x58>)
    178e:	4628      	mov	r0, r5
    1790:	f004 fe2a 	bl	63e8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1794:	4620      	mov	r0, r4
    1796:	b009      	add	sp, #36	; 0x24
    1798:	bd30      	pop	{r4, r5, pc}
    179a:	bf00      	nop
    179c:	00001749 	.word	0x00001749
    17a0:	200005d0 	.word	0x200005d0
    17a4:	20000608 	.word	0x20000608
    17a8:	00001b59 	.word	0x00001b59
    17ac:	200015e0 	.word	0x200015e0
    17b0:	00009b30 	.word	0x00009b30

000017b4 <log_format_func_t_get>:
}
    17b4:	4b01      	ldr	r3, [pc, #4]	; (17bc <log_format_func_t_get+0x8>)
    17b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    17ba:	4770      	bx	lr
    17bc:	00009b3c 	.word	0x00009b3c

000017c0 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    17c0:	4b18      	ldr	r3, [pc, #96]	; (1824 <log_init+0x64>)
    17c2:	f3bf 8f5b 	dmb	ish
    17c6:	e853 2f00 	ldrex	r2, [r3]
    17ca:	1c51      	adds	r1, r2, #1
    17cc:	e843 1000 	strex	r0, r1, [r3]
    17d0:	2800      	cmp	r0, #0
    17d2:	d1f8      	bne.n	17c6 <log_init+0x6>
    17d4:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    17d8:	bb1a      	cbnz	r2, 1822 <log_init+0x62>
{
    17da:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    17dc:	2400      	movs	r4, #0
    17de:	e009      	b.n	17f4 <log_init+0x34>
					   backend->cb->ctx,
    17e0:	4b11      	ldr	r3, [pc, #68]	; (1828 <log_init+0x68>)
    17e2:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    17e6:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    17e8:	2204      	movs	r2, #4
    17ea:	6819      	ldr	r1, [r3, #0]
    17ec:	4628      	mov	r0, r5
    17ee:	f000 f9d9 	bl	1ba4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    17f2:	3401      	adds	r4, #1
    17f4:	4b0d      	ldr	r3, [pc, #52]	; (182c <log_init+0x6c>)
    17f6:	4a0c      	ldr	r2, [pc, #48]	; (1828 <log_init+0x68>)
    17f8:	1a9b      	subs	r3, r3, r2
    17fa:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    17fe:	da0f      	bge.n	1820 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    1800:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    1802:	4d09      	ldr	r5, [pc, #36]	; (1828 <log_init+0x68>)
    1804:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1808:	7b2b      	ldrb	r3, [r5, #12]
    180a:	2b00      	cmp	r3, #0
    180c:	d0f1      	beq.n	17f2 <log_init+0x32>
			if (backend->api->init != NULL) {
    180e:	0123      	lsls	r3, r4, #4
    1810:	4a05      	ldr	r2, [pc, #20]	; (1828 <log_init+0x68>)
    1812:	58d3      	ldr	r3, [r2, r3]
    1814:	699b      	ldr	r3, [r3, #24]
    1816:	2b00      	cmp	r3, #0
    1818:	d0e2      	beq.n	17e0 <log_init+0x20>
				backend->api->init(backend);
    181a:	4628      	mov	r0, r5
    181c:	4798      	blx	r3
    181e:	e7df      	b.n	17e0 <log_init+0x20>
}
    1820:	bd70      	pop	{r4, r5, r6, pc}
    1822:	4770      	bx	lr
    1824:	2000084c 	.word	0x2000084c
    1828:	00009a3c 	.word	0x00009a3c
    182c:	00009a5c 	.word	0x00009a5c

00001830 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1830:	b138      	cbz	r0, 1842 <log_set_timestamp_func+0x12>
{
    1832:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1834:	4a04      	ldr	r2, [pc, #16]	; (1848 <log_set_timestamp_func+0x18>)
    1836:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    1838:	4608      	mov	r0, r1
    183a:	f000 fb9f 	bl	1f7c <log_output_timestamp_freq_set>
	return 0;
    183e:	2000      	movs	r0, #0
}
    1840:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1842:	f06f 0015 	mvn.w	r0, #21
}
    1846:	4770      	bx	lr
    1848:	20000004 	.word	0x20000004

0000184c <z_log_notify_backend_enabled>:
{
    184c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    184e:	4b05      	ldr	r3, [pc, #20]	; (1864 <z_log_notify_backend_enabled+0x18>)
    1850:	781b      	ldrb	r3, [r3, #0]
    1852:	b11b      	cbz	r3, 185c <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    1854:	4b03      	ldr	r3, [pc, #12]	; (1864 <z_log_notify_backend_enabled+0x18>)
    1856:	2201      	movs	r2, #1
    1858:	701a      	strb	r2, [r3, #0]
}
    185a:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    185c:	4802      	ldr	r0, [pc, #8]	; (1868 <z_log_notify_backend_enabled+0x1c>)
    185e:	f004 ff7d 	bl	675c <z_impl_k_sem_give>
}
    1862:	e7f7      	b.n	1854 <z_log_notify_backend_enabled+0x8>
    1864:	200015d9 	.word	0x200015d9
    1868:	200001bc 	.word	0x200001bc

0000186c <z_log_dropped>:
    186c:	4b0d      	ldr	r3, [pc, #52]	; (18a4 <z_log_dropped+0x38>)
    186e:	f3bf 8f5b 	dmb	ish
    1872:	e853 2f00 	ldrex	r2, [r3]
    1876:	3201      	adds	r2, #1
    1878:	e843 2100 	strex	r1, r2, [r3]
    187c:	2900      	cmp	r1, #0
    187e:	d1f8      	bne.n	1872 <z_log_dropped+0x6>
    1880:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    1884:	b900      	cbnz	r0, 1888 <z_log_dropped+0x1c>
}
    1886:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1888:	4b07      	ldr	r3, [pc, #28]	; (18a8 <z_log_dropped+0x3c>)
    188a:	f3bf 8f5b 	dmb	ish
    188e:	e853 2f00 	ldrex	r2, [r3]
    1892:	3a01      	subs	r2, #1
    1894:	e843 2100 	strex	r1, r2, [r3]
    1898:	2900      	cmp	r1, #0
    189a:	d1f8      	bne.n	188e <z_log_dropped+0x22>
    189c:	f3bf 8f5b 	dmb	ish
    18a0:	e7f1      	b.n	1886 <z_log_dropped+0x1a>
    18a2:	bf00      	nop
    18a4:	20000848 	.word	0x20000848
    18a8:	20000844 	.word	0x20000844

000018ac <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    18ac:	4b06      	ldr	r3, [pc, #24]	; (18c8 <z_log_dropped_read_and_clear+0x1c>)
}
    18ae:	2000      	movs	r0, #0
    18b0:	4602      	mov	r2, r0
    18b2:	f3bf 8f5b 	dmb	ish
    18b6:	e853 0f00 	ldrex	r0, [r3]
    18ba:	e843 2100 	strex	r1, r2, [r3]
    18be:	2900      	cmp	r1, #0
    18c0:	d1f9      	bne.n	18b6 <z_log_dropped_read_and_clear+0xa>
    18c2:	f3bf 8f5b 	dmb	ish
    18c6:	4770      	bx	lr
    18c8:	20000848 	.word	0x20000848

000018cc <dropped_notify>:
{
    18cc:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    18ce:	f7ff ffed 	bl	18ac <z_log_dropped_read_and_clear>
    18d2:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    18d4:	2400      	movs	r4, #0
    18d6:	e000      	b.n	18da <dropped_notify+0xe>
    18d8:	3401      	adds	r4, #1
    18da:	4b0b      	ldr	r3, [pc, #44]	; (1908 <dropped_notify+0x3c>)
    18dc:	4a0b      	ldr	r2, [pc, #44]	; (190c <dropped_notify+0x40>)
    18de:	1a9b      	subs	r3, r3, r2
    18e0:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    18e4:	da0f      	bge.n	1906 <dropped_notify+0x3a>
    18e6:	4809      	ldr	r0, [pc, #36]	; (190c <dropped_notify+0x40>)
    18e8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    18ec:	6843      	ldr	r3, [r0, #4]
    18ee:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    18f0:	2b00      	cmp	r3, #0
    18f2:	d0f1      	beq.n	18d8 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    18f4:	0123      	lsls	r3, r4, #4
    18f6:	4a05      	ldr	r2, [pc, #20]	; (190c <dropped_notify+0x40>)
    18f8:	58d3      	ldr	r3, [r2, r3]
    18fa:	691b      	ldr	r3, [r3, #16]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d0eb      	beq.n	18d8 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1900:	4629      	mov	r1, r5
    1902:	4798      	blx	r3
    1904:	e7e8      	b.n	18d8 <dropped_notify+0xc>
}
    1906:	bd38      	pop	{r3, r4, r5, pc}
    1908:	00009a5c 	.word	0x00009a5c
    190c:	00009a3c 	.word	0x00009a3c

00001910 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    1910:	4b03      	ldr	r3, [pc, #12]	; (1920 <z_log_dropped_pending+0x10>)
    1912:	6818      	ldr	r0, [r3, #0]
}
    1914:	2800      	cmp	r0, #0
    1916:	bfd4      	ite	le
    1918:	2000      	movle	r0, #0
    191a:	2001      	movgt	r0, #1
    191c:	4770      	bx	lr
    191e:	bf00      	nop
    1920:	20000848 	.word	0x20000848

00001924 <z_log_msg2_init>:
{
    1924:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1926:	4902      	ldr	r1, [pc, #8]	; (1930 <z_log_msg2_init+0xc>)
    1928:	4802      	ldr	r0, [pc, #8]	; (1934 <z_log_msg2_init+0x10>)
    192a:	f006 fadb 	bl	7ee4 <mpsc_pbuf_init>
}
    192e:	bd08      	pop	{r3, pc}
    1930:	00009b48 	.word	0x00009b48
    1934:	20000850 	.word	0x20000850

00001938 <log_core_init>:
{
    1938:	b508      	push	{r3, lr}
	panic_mode = false;
    193a:	2300      	movs	r3, #0
    193c:	4a05      	ldr	r2, [pc, #20]	; (1954 <log_core_init+0x1c>)
    193e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1940:	4a05      	ldr	r2, [pc, #20]	; (1958 <log_core_init+0x20>)
    1942:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    1944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1948:	4804      	ldr	r0, [pc, #16]	; (195c <log_core_init+0x24>)
    194a:	f7ff ff71 	bl	1830 <log_set_timestamp_func>
		z_log_msg2_init();
    194e:	f7ff ffe9 	bl	1924 <z_log_msg2_init>
}
    1952:	bd08      	pop	{r3, pc}
    1954:	200015da 	.word	0x200015da
    1958:	20000848 	.word	0x20000848
    195c:	000082c3 	.word	0x000082c3

00001960 <z_log_msg2_alloc>:
{
    1960:	b508      	push	{r3, lr}
    1962:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    1964:	2200      	movs	r2, #0
    1966:	2300      	movs	r3, #0
    1968:	4801      	ldr	r0, [pc, #4]	; (1970 <z_log_msg2_alloc+0x10>)
    196a:	f006 fae2 	bl	7f32 <mpsc_pbuf_alloc>
}
    196e:	bd08      	pop	{r3, pc}
    1970:	20000850 	.word	0x20000850

00001974 <z_log_msg2_claim>:
{
    1974:	b508      	push	{r3, lr}
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    1976:	4802      	ldr	r0, [pc, #8]	; (1980 <z_log_msg2_claim+0xc>)
    1978:	f006 fbd3 	bl	8122 <mpsc_pbuf_claim>
}
    197c:	bd08      	pop	{r3, pc}
    197e:	bf00      	nop
    1980:	20000850 	.word	0x20000850

00001984 <z_log_msg2_free>:
{
    1984:	b508      	push	{r3, lr}
    1986:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1988:	4801      	ldr	r0, [pc, #4]	; (1990 <z_log_msg2_free+0xc>)
    198a:	f006 fc3b 	bl	8204 <mpsc_pbuf_free>
}
    198e:	bd08      	pop	{r3, pc}
    1990:	20000850 	.word	0x20000850

00001994 <msg_process>:
{
    1994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1996:	4606      	mov	r6, r0
	if (!bypass) {
    1998:	b9e9      	cbnz	r1, 19d6 <msg_process+0x42>
		for (int i = 0; i < log_backend_count_get(); i++) {
    199a:	2400      	movs	r4, #0
    199c:	e000      	b.n	19a0 <msg_process+0xc>
    199e:	3401      	adds	r4, #1
    19a0:	4b0f      	ldr	r3, [pc, #60]	; (19e0 <msg_process+0x4c>)
    19a2:	4a10      	ldr	r2, [pc, #64]	; (19e4 <msg_process+0x50>)
    19a4:	1a9b      	subs	r3, r3, r2
    19a6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    19aa:	da14      	bge.n	19d6 <msg_process+0x42>
	return &__log_backends_start[idx];
    19ac:	4d0d      	ldr	r5, [pc, #52]	; (19e4 <msg_process+0x50>)
    19ae:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    19b2:	686b      	ldr	r3, [r5, #4]
    19b4:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    19b6:	2b00      	cmp	r3, #0
    19b8:	d0f1      	beq.n	199e <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
    19ba:	4631      	mov	r1, r6
    19bc:	4628      	mov	r0, r5
    19be:	f006 fc7e 	bl	82be <msg_filter_check>
			if (log_backend_is_active(backend) &&
    19c2:	2800      	cmp	r0, #0
    19c4:	d0eb      	beq.n	199e <msg_process+0xa>
	backend->api->process(backend, msg);
    19c6:	0127      	lsls	r7, r4, #4
    19c8:	4b06      	ldr	r3, [pc, #24]	; (19e4 <msg_process+0x50>)
    19ca:	59db      	ldr	r3, [r3, r7]
    19cc:	681b      	ldr	r3, [r3, #0]
    19ce:	4631      	mov	r1, r6
    19d0:	4628      	mov	r0, r5
    19d2:	4798      	blx	r3
}
    19d4:	e7e3      	b.n	199e <msg_process+0xa>
		z_log_msg2_free(msg.msg2);
    19d6:	4630      	mov	r0, r6
    19d8:	f7ff ffd4 	bl	1984 <z_log_msg2_free>
}
    19dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19de:	bf00      	nop
    19e0:	00009a5c 	.word	0x00009a5c
    19e4:	00009a3c 	.word	0x00009a3c

000019e8 <z_log_msg2_pending>:
{
    19e8:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
    19ea:	4802      	ldr	r0, [pc, #8]	; (19f4 <z_log_msg2_pending+0xc>)
    19ec:	f006 fc47 	bl	827e <mpsc_pbuf_is_pending>
}
    19f0:	bd08      	pop	{r3, pc}
    19f2:	bf00      	nop
    19f4:	20000850 	.word	0x20000850

000019f8 <z_impl_log_process>:
{
    19f8:	b510      	push	{r4, lr}
    19fa:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    19fc:	4b11      	ldr	r3, [pc, #68]	; (1a44 <z_impl_log_process+0x4c>)
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	b903      	cbnz	r3, 1a04 <z_impl_log_process+0xc>
    1a02:	b1d0      	cbz	r0, 1a3a <z_impl_log_process+0x42>
	msg = get_msg();
    1a04:	f006 fc75 	bl	82f2 <get_msg>
	if (msg.msg) {
    1a08:	4603      	mov	r3, r0
    1a0a:	b180      	cbz	r0, 1a2e <z_impl_log_process+0x36>
		if (!bypass) {
    1a0c:	b95c      	cbnz	r4, 1a26 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1a0e:	4a0e      	ldr	r2, [pc, #56]	; (1a48 <z_impl_log_process+0x50>)
    1a10:	f3bf 8f5b 	dmb	ish
    1a14:	e852 1f00 	ldrex	r1, [r2]
    1a18:	3901      	subs	r1, #1
    1a1a:	e842 1000 	strex	r0, r1, [r2]
    1a1e:	2800      	cmp	r0, #0
    1a20:	d1f8      	bne.n	1a14 <z_impl_log_process+0x1c>
    1a22:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    1a26:	4621      	mov	r1, r4
    1a28:	4618      	mov	r0, r3
    1a2a:	f7ff ffb3 	bl	1994 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    1a2e:	b914      	cbnz	r4, 1a36 <z_impl_log_process+0x3e>
    1a30:	f7ff ff6e 	bl	1910 <z_log_dropped_pending>
    1a34:	b910      	cbnz	r0, 1a3c <z_impl_log_process+0x44>
	return next_pending();
    1a36:	f006 fc60 	bl	82fa <next_pending>
}
    1a3a:	bd10      	pop	{r4, pc}
		dropped_notify();
    1a3c:	f7ff ff46 	bl	18cc <dropped_notify>
    1a40:	e7f9      	b.n	1a36 <z_impl_log_process+0x3e>
    1a42:	bf00      	nop
    1a44:	200015d9 	.word	0x200015d9
    1a48:	20000844 	.word	0x20000844

00001a4c <z_log_msg_post_finalize>:
{
    1a4c:	b510      	push	{r4, lr}
    1a4e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1a50:	4b1d      	ldr	r3, [pc, #116]	; (1ac8 <z_log_msg_post_finalize+0x7c>)
    1a52:	f3bf 8f5b 	dmb	ish
    1a56:	e853 2f00 	ldrex	r2, [r3]
    1a5a:	1c51      	adds	r1, r2, #1
    1a5c:	e843 1000 	strex	r0, r1, [r3]
    1a60:	2800      	cmp	r0, #0
    1a62:	d1f8      	bne.n	1a56 <z_log_msg_post_finalize+0xa>
    1a64:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1a68:	4b18      	ldr	r3, [pc, #96]	; (1acc <z_log_msg_post_finalize+0x80>)
    1a6a:	781b      	ldrb	r3, [r3, #0]
    1a6c:	b93b      	cbnz	r3, 1a7e <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
    1a6e:	4b18      	ldr	r3, [pc, #96]	; (1ad0 <z_log_msg_post_finalize+0x84>)
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	b103      	cbz	r3, 1a76 <z_log_msg_post_finalize+0x2a>
    1a74:	b19a      	cbz	r2, 1a9e <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1a76:	2a0a      	cmp	r2, #10
    1a78:	d01c      	beq.n	1ab4 <z_log_msg_post_finalize+0x68>
}
    1a7a:	b002      	add	sp, #8
    1a7c:	bd10      	pop	{r4, pc}
    1a7e:	f04f 0320 	mov.w	r3, #32
    1a82:	f3ef 8411 	mrs	r4, BASEPRI
    1a86:	f383 8812 	msr	BASEPRI_MAX, r3
    1a8a:	f3bf 8f6f 	isb	sy
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1a8e:	2000      	movs	r0, #0
    1a90:	f7ff ffb2 	bl	19f8 <z_impl_log_process>
	__asm__ volatile(
    1a94:	f384 8811 	msr	BASEPRI, r4
    1a98:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1a9c:	e7ed      	b.n	1a7a <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
    1a9e:	2200      	movs	r2, #0
    1aa0:	2300      	movs	r3, #0
    1aa2:	e9cd 2300 	strd	r2, r3, [sp]
    1aa6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1aaa:	2300      	movs	r3, #0
    1aac:	4809      	ldr	r0, [pc, #36]	; (1ad4 <z_log_msg_post_finalize+0x88>)
    1aae:	f005 fc65 	bl	737c <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    1ab2:	e7e2      	b.n	1a7a <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d0e0      	beq.n	1a7a <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
    1ab8:	4806      	ldr	r0, [pc, #24]	; (1ad4 <z_log_msg_post_finalize+0x88>)
    1aba:	f007 fe45 	bl	9748 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1abe:	4806      	ldr	r0, [pc, #24]	; (1ad8 <z_log_msg_post_finalize+0x8c>)
    1ac0:	f004 fe4c 	bl	675c <z_impl_k_sem_give>
}
    1ac4:	e7d9      	b.n	1a7a <z_log_msg_post_finalize+0x2e>
    1ac6:	bf00      	nop
    1ac8:	20000844 	.word	0x20000844
    1acc:	200015da 	.word	0x200015da
    1ad0:	2000088c 	.word	0x2000088c
    1ad4:	200005d0 	.word	0x200005d0
    1ad8:	200001bc 	.word	0x200001bc

00001adc <z_log_msg2_commit>:
{
    1adc:	b510      	push	{r4, lr}
    1ade:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1ae0:	4b05      	ldr	r3, [pc, #20]	; (1af8 <z_log_msg2_commit+0x1c>)
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	4798      	blx	r3
    1ae6:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1ae8:	4621      	mov	r1, r4
    1aea:	4804      	ldr	r0, [pc, #16]	; (1afc <z_log_msg2_commit+0x20>)
    1aec:	f006 fab8 	bl	8060 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    1af0:	f7ff ffac 	bl	1a4c <z_log_msg_post_finalize>
}
    1af4:	bd10      	pop	{r4, pc}
    1af6:	bf00      	nop
    1af8:	20000004 	.word	0x20000004
    1afc:	20000850 	.word	0x20000850

00001b00 <z_impl_log_panic>:
	if (panic_mode) {
    1b00:	4b12      	ldr	r3, [pc, #72]	; (1b4c <z_impl_log_panic+0x4c>)
    1b02:	781b      	ldrb	r3, [r3, #0]
    1b04:	b103      	cbz	r3, 1b08 <z_impl_log_panic+0x8>
    1b06:	4770      	bx	lr
{
    1b08:	b510      	push	{r4, lr}
	log_init();
    1b0a:	f7ff fe59 	bl	17c0 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1b0e:	2400      	movs	r4, #0
    1b10:	e000      	b.n	1b14 <z_impl_log_panic+0x14>
    1b12:	3401      	adds	r4, #1
    1b14:	4b0e      	ldr	r3, [pc, #56]	; (1b50 <z_impl_log_panic+0x50>)
    1b16:	4a0f      	ldr	r2, [pc, #60]	; (1b54 <z_impl_log_panic+0x54>)
    1b18:	1a9b      	subs	r3, r3, r2
    1b1a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1b1e:	da0c      	bge.n	1b3a <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    1b20:	480c      	ldr	r0, [pc, #48]	; (1b54 <z_impl_log_panic+0x54>)
    1b22:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1b26:	6843      	ldr	r3, [r0, #4]
    1b28:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	d0f1      	beq.n	1b12 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1b2e:	0123      	lsls	r3, r4, #4
    1b30:	4a08      	ldr	r2, [pc, #32]	; (1b54 <z_impl_log_panic+0x54>)
    1b32:	58d3      	ldr	r3, [r2, r3]
    1b34:	695b      	ldr	r3, [r3, #20]
    1b36:	4798      	blx	r3
}
    1b38:	e7eb      	b.n	1b12 <z_impl_log_panic+0x12>
    1b3a:	2000      	movs	r0, #0
    1b3c:	f7ff ff5c 	bl	19f8 <z_impl_log_process>
		while (log_process(false) == true) {
    1b40:	2800      	cmp	r0, #0
    1b42:	d1fa      	bne.n	1b3a <z_impl_log_panic+0x3a>
	panic_mode = true;
    1b44:	4b01      	ldr	r3, [pc, #4]	; (1b4c <z_impl_log_panic+0x4c>)
    1b46:	2201      	movs	r2, #1
    1b48:	701a      	strb	r2, [r3, #0]
}
    1b4a:	bd10      	pop	{r4, pc}
    1b4c:	200015da 	.word	0x200015da
    1b50:	00009a5c 	.word	0x00009a5c
    1b54:	00009a3c 	.word	0x00009a3c

00001b58 <log_process_thread_func>:
{
    1b58:	b508      	push	{r3, lr}
	log_init();
    1b5a:	f7ff fe31 	bl	17c0 <log_init>
	return z_impl_z_current_get();
    1b5e:	f005 fa23 	bl	6fa8 <z_impl_z_current_get>
	thread_set(k_current_get());
    1b62:	f7ff fddd 	bl	1720 <thread_set>
    1b66:	2000      	movs	r0, #0
    1b68:	f7ff ff46 	bl	19f8 <z_impl_log_process>
		if (log_process(false) == false) {
    1b6c:	2800      	cmp	r0, #0
    1b6e:	d1fa      	bne.n	1b66 <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
    1b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1b78:	4801      	ldr	r0, [pc, #4]	; (1b80 <log_process_thread_func+0x28>)
    1b7a:	f004 fe13 	bl	67a4 <z_impl_k_sem_take>
    1b7e:	e7f2      	b.n	1b66 <log_process_thread_func+0xe>
    1b80:	200001bc 	.word	0x200001bc

00001b84 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1b84:	4b05      	ldr	r3, [pc, #20]	; (1b9c <log_source_name_get+0x18>)
    1b86:	4a06      	ldr	r2, [pc, #24]	; (1ba0 <log_source_name_get+0x1c>)
    1b88:	1a9b      	subs	r3, r3, r2
    1b8a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1b8e:	d202      	bcs.n	1b96 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1b90:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1b94:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1b96:	2000      	movs	r0, #0
}
    1b98:	4770      	bx	lr
    1b9a:	bf00      	nop
    1b9c:	00009a3c 	.word	0x00009a3c
    1ba0:	000099f4 	.word	0x000099f4

00001ba4 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1ba4:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1ba6:	4b07      	ldr	r3, [pc, #28]	; (1bc4 <log_backend_enable+0x20>)
    1ba8:	1ac3      	subs	r3, r0, r3
    1baa:	111b      	asrs	r3, r3, #4
    1bac:	3301      	adds	r3, #1
	backend->cb->id = id;
    1bae:	6842      	ldr	r2, [r0, #4]
    1bb0:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1bb2:	6843      	ldr	r3, [r0, #4]
    1bb4:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1bb6:	6843      	ldr	r3, [r0, #4]
    1bb8:	2201      	movs	r2, #1
    1bba:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1bbc:	f7ff fe46 	bl	184c <z_log_notify_backend_enabled>
}
    1bc0:	bd08      	pop	{r3, pc}
    1bc2:	bf00      	nop
    1bc4:	00009a3c 	.word	0x00009a3c

00001bc8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1bc8:	b40e      	push	{r1, r2, r3}
    1bca:	b500      	push	{lr}
    1bcc:	b082      	sub	sp, #8
    1bce:	4601      	mov	r1, r0
    1bd0:	ab03      	add	r3, sp, #12
    1bd2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1bd6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1bd8:	4803      	ldr	r0, [pc, #12]	; (1be8 <print_formatted+0x20>)
    1bda:	f7ff faa5 	bl	1128 <cbvprintf>
	va_end(args);

	return length;
}
    1bde:	b002      	add	sp, #8
    1be0:	f85d eb04 	ldr.w	lr, [sp], #4
    1be4:	b003      	add	sp, #12
    1be6:	4770      	bx	lr
    1be8:	000083a1 	.word	0x000083a1

00001bec <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    1bec:	b530      	push	{r4, r5, lr}
    1bee:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    1bf0:	f011 0f44 	tst.w	r1, #68	; 0x44
    1bf4:	d005      	beq.n	1c02 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    1bf6:	4b1a      	ldr	r3, [pc, #104]	; (1c60 <timestamp_print+0x74>)
    1bf8:	681c      	ldr	r4, [r3, #0]
    1bfa:	b934      	cbnz	r4, 1c0a <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    1bfc:	2000      	movs	r0, #0
	}

	return length;
}
    1bfe:	b005      	add	sp, #20
    1c00:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1c02:	4918      	ldr	r1, [pc, #96]	; (1c64 <timestamp_print+0x78>)
    1c04:	f7ff ffe0 	bl	1bc8 <print_formatted>
    1c08:	e7f9      	b.n	1bfe <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1c0a:	4b17      	ldr	r3, [pc, #92]	; (1c68 <timestamp_print+0x7c>)
    1c0c:	6819      	ldr	r1, [r3, #0]
    1c0e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1c12:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    1c16:	4a15      	ldr	r2, [pc, #84]	; (1c6c <timestamp_print+0x80>)
    1c18:	fba2 320c 	umull	r3, r2, r2, ip
    1c1c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1c1e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    1c22:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    1c26:	4b12      	ldr	r3, [pc, #72]	; (1c70 <timestamp_print+0x84>)
    1c28:	fba3 530e 	umull	r5, r3, r3, lr
    1c2c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1c2e:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    1c32:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    1c36:	fb0c f101 	mul.w	r1, ip, r1
    1c3a:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1c3e:	fb05 1114 	mls	r1, r5, r4, r1
    1c42:	fb0c f101 	mul.w	r1, ip, r1
    1c46:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    1c4a:	9102      	str	r1, [sp, #8]
    1c4c:	9501      	str	r5, [sp, #4]
    1c4e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1c52:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    1c56:	9100      	str	r1, [sp, #0]
    1c58:	4906      	ldr	r1, [pc, #24]	; (1c74 <timestamp_print+0x88>)
    1c5a:	f7ff ffb5 	bl	1bc8 <print_formatted>
    1c5e:	e7ce      	b.n	1bfe <timestamp_print+0x12>
    1c60:	20000890 	.word	0x20000890
    1c64:	00009b5c 	.word	0x00009b5c
    1c68:	20000894 	.word	0x20000894
    1c6c:	91a2b3c5 	.word	0x91a2b3c5
    1c70:	88888889 	.word	0x88888889
    1c74:	00009b68 	.word	0x00009b68

00001c78 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1c78:	b161      	cbz	r1, 1c94 <color_print+0x1c>
{
    1c7a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1c7c:	b12a      	cbz	r2, 1c8a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1c7e:	4a06      	ldr	r2, [pc, #24]	; (1c98 <color_print+0x20>)
    1c80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1c84:	b912      	cbnz	r2, 1c8c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1c86:	4a05      	ldr	r2, [pc, #20]	; (1c9c <color_print+0x24>)
    1c88:	e000      	b.n	1c8c <color_print+0x14>
    1c8a:	4a04      	ldr	r2, [pc, #16]	; (1c9c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1c8c:	4904      	ldr	r1, [pc, #16]	; (1ca0 <color_print+0x28>)
    1c8e:	f7ff ff9b 	bl	1bc8 <print_formatted>
	}
}
    1c92:	bd08      	pop	{r3, pc}
    1c94:	4770      	bx	lr
    1c96:	bf00      	nop
    1c98:	00009be0 	.word	0x00009be0
    1c9c:	00009b84 	.word	0x00009b84
    1ca0:	00009b8c 	.word	0x00009b8c

00001ca4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1ca4:	f011 0f10 	tst.w	r1, #16
    1ca8:	d10b      	bne.n	1cc2 <newline_print+0x1e>
{
    1caa:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1cac:	f011 0f20 	tst.w	r1, #32
    1cb0:	d003      	beq.n	1cba <newline_print+0x16>
		print_formatted(ctx, "\n");
    1cb2:	4904      	ldr	r1, [pc, #16]	; (1cc4 <newline_print+0x20>)
    1cb4:	f7ff ff88 	bl	1bc8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1cb8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1cba:	4903      	ldr	r1, [pc, #12]	; (1cc8 <newline_print+0x24>)
    1cbc:	f7ff ff84 	bl	1bc8 <print_formatted>
    1cc0:	e7fa      	b.n	1cb8 <newline_print+0x14>
    1cc2:	4770      	bx	lr
    1cc4:	0000a188 	.word	0x0000a188
    1cc8:	0000a51c 	.word	0x0000a51c

00001ccc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cd0:	4605      	mov	r5, r0
    1cd2:	460f      	mov	r7, r1
    1cd4:	4616      	mov	r6, r2
    1cd6:	4698      	mov	r8, r3
	newline_print(output, flags);
    1cd8:	9906      	ldr	r1, [sp, #24]
    1cda:	f7ff ffe3 	bl	1ca4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1cde:	2400      	movs	r4, #0
    1ce0:	4544      	cmp	r4, r8
    1ce2:	da05      	bge.n	1cf0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    1ce4:	4923      	ldr	r1, [pc, #140]	; (1d74 <hexdump_line_print+0xa8>)
    1ce6:	4628      	mov	r0, r5
    1ce8:	f7ff ff6e 	bl	1bc8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1cec:	3401      	adds	r4, #1
    1cee:	e7f7      	b.n	1ce0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cf0:	2400      	movs	r4, #0
    1cf2:	e009      	b.n	1d08 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1cf4:	491f      	ldr	r1, [pc, #124]	; (1d74 <hexdump_line_print+0xa8>)
    1cf6:	4628      	mov	r0, r5
    1cf8:	f7ff ff66 	bl	1bc8 <print_formatted>
    1cfc:	e00b      	b.n	1d16 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1cfe:	491e      	ldr	r1, [pc, #120]	; (1d78 <hexdump_line_print+0xac>)
    1d00:	4628      	mov	r0, r5
    1d02:	f7ff ff61 	bl	1bc8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1d06:	3401      	adds	r4, #1
    1d08:	2c0f      	cmp	r4, #15
    1d0a:	dc0c      	bgt.n	1d26 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1d0c:	2c00      	cmp	r4, #0
    1d0e:	dd02      	ble.n	1d16 <hexdump_line_print+0x4a>
    1d10:	f014 0f07 	tst.w	r4, #7
    1d14:	d0ee      	beq.n	1cf4 <hexdump_line_print+0x28>
		if (i < length) {
    1d16:	42b4      	cmp	r4, r6
    1d18:	d2f1      	bcs.n	1cfe <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    1d1a:	5d3a      	ldrb	r2, [r7, r4]
    1d1c:	4917      	ldr	r1, [pc, #92]	; (1d7c <hexdump_line_print+0xb0>)
    1d1e:	4628      	mov	r0, r5
    1d20:	f7ff ff52 	bl	1bc8 <print_formatted>
    1d24:	e7ef      	b.n	1d06 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    1d26:	4916      	ldr	r1, [pc, #88]	; (1d80 <hexdump_line_print+0xb4>)
    1d28:	4628      	mov	r0, r5
    1d2a:	f7ff ff4d 	bl	1bc8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1d2e:	2400      	movs	r4, #0
    1d30:	e009      	b.n	1d46 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1d32:	4910      	ldr	r1, [pc, #64]	; (1d74 <hexdump_line_print+0xa8>)
    1d34:	4628      	mov	r0, r5
    1d36:	f7ff ff47 	bl	1bc8 <print_formatted>
    1d3a:	e00b      	b.n	1d54 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    1d3c:	4911      	ldr	r1, [pc, #68]	; (1d84 <hexdump_line_print+0xb8>)
    1d3e:	4628      	mov	r0, r5
    1d40:	f7ff ff42 	bl	1bc8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1d44:	3401      	adds	r4, #1
    1d46:	2c0f      	cmp	r4, #15
    1d48:	dc12      	bgt.n	1d70 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1d4a:	2c00      	cmp	r4, #0
    1d4c:	dd02      	ble.n	1d54 <hexdump_line_print+0x88>
    1d4e:	f014 0f07 	tst.w	r4, #7
    1d52:	d0ee      	beq.n	1d32 <hexdump_line_print+0x66>
		if (i < length) {
    1d54:	42b4      	cmp	r4, r6
    1d56:	d206      	bcs.n	1d66 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1d58:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1d5a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    1d5e:	2b5e      	cmp	r3, #94	; 0x5e
    1d60:	d9ec      	bls.n	1d3c <hexdump_line_print+0x70>
    1d62:	222e      	movs	r2, #46	; 0x2e
    1d64:	e7ea      	b.n	1d3c <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1d66:	4903      	ldr	r1, [pc, #12]	; (1d74 <hexdump_line_print+0xa8>)
    1d68:	4628      	mov	r0, r5
    1d6a:	f7ff ff2d 	bl	1bc8 <print_formatted>
    1d6e:	e7e9      	b.n	1d44 <hexdump_line_print+0x78>
		}
	}
}
    1d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d74:	00009bb4 	.word	0x00009bb4
    1d78:	00009b98 	.word	0x00009b98
    1d7c:	00009b90 	.word	0x00009b90
    1d80:	00009b9c 	.word	0x00009b9c
    1d84:	00009ba0 	.word	0x00009ba0

00001d88 <ids_print>:
{
    1d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d8c:	4680      	mov	r8, r0
    1d8e:	4616      	mov	r6, r2
    1d90:	461d      	mov	r5, r3
    1d92:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    1d96:	b959      	cbnz	r1, 1db0 <ids_print+0x28>
	int total = 0;
    1d98:	2400      	movs	r4, #0
	if (source_id >= 0) {
    1d9a:	2f00      	cmp	r7, #0
    1d9c:	db1c      	blt.n	1dd8 <ids_print+0x50>
		total += print_formatted(output,
    1d9e:	b186      	cbz	r6, 1dc2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1da0:	2301      	movs	r3, #1
    1da2:	9a07      	ldr	r2, [sp, #28]
    1da4:	4093      	lsls	r3, r2
				(func_on &&
    1da6:	f013 0f10 	tst.w	r3, #16
    1daa:	d118      	bne.n	1dde <ids_print+0x56>
		total += print_formatted(output,
    1dac:	4e0d      	ldr	r6, [pc, #52]	; (1de4 <ids_print+0x5c>)
    1dae:	e009      	b.n	1dc4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1db0:	4b0d      	ldr	r3, [pc, #52]	; (1de8 <ids_print+0x60>)
    1db2:	9a07      	ldr	r2, [sp, #28]
    1db4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1db8:	490c      	ldr	r1, [pc, #48]	; (1dec <ids_print+0x64>)
    1dba:	f7ff ff05 	bl	1bc8 <print_formatted>
    1dbe:	4604      	mov	r4, r0
    1dc0:	e7eb      	b.n	1d9a <ids_print+0x12>
		total += print_formatted(output,
    1dc2:	4e08      	ldr	r6, [pc, #32]	; (1de4 <ids_print+0x5c>)
    1dc4:	4639      	mov	r1, r7
    1dc6:	4628      	mov	r0, r5
    1dc8:	f7ff fedc 	bl	1b84 <log_source_name_get>
    1dcc:	4602      	mov	r2, r0
    1dce:	4631      	mov	r1, r6
    1dd0:	4640      	mov	r0, r8
    1dd2:	f7ff fef9 	bl	1bc8 <print_formatted>
    1dd6:	4404      	add	r4, r0
}
    1dd8:	4620      	mov	r0, r4
    1dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    1dde:	4e04      	ldr	r6, [pc, #16]	; (1df0 <ids_print+0x68>)
    1de0:	e7f0      	b.n	1dc4 <ids_print+0x3c>
    1de2:	bf00      	nop
    1de4:	00009ba4 	.word	0x00009ba4
    1de8:	00009c1c 	.word	0x00009c1c
    1dec:	00009bb0 	.word	0x00009bb0
    1df0:	00009bac 	.word	0x00009bac

00001df4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1df8:	b085      	sub	sp, #20
    1dfa:	4605      	mov	r5, r0
    1dfc:	460c      	mov	r4, r1
    1dfe:	4616      	mov	r6, r2
    1e00:	9303      	str	r3, [sp, #12]
    1e02:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1e06:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1e0a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1e0e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    1e12:	f006 fa76 	bl	8302 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1e16:	b1e8      	cbz	r0, 1e54 <prefix_print+0x60>
    1e18:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    1e1a:	4913      	ldr	r1, [pc, #76]	; (1e68 <prefix_print+0x74>)
    1e1c:	4628      	mov	r0, r5
    1e1e:	f7ff fed3 	bl	1bc8 <print_formatted>
    1e22:	4607      	mov	r7, r0
	}

	if (stamp) {
    1e24:	f1bb 0f00 	cmp.w	fp, #0
    1e28:	d116      	bne.n	1e58 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    1e2a:	4642      	mov	r2, r8
    1e2c:	4651      	mov	r1, sl
    1e2e:	4628      	mov	r0, r5
    1e30:	f006 fa76 	bl	8320 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    1e34:	f8cd 8004 	str.w	r8, [sp, #4]
    1e38:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    1e3c:	9300      	str	r3, [sp, #0]
    1e3e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    1e42:	4632      	mov	r2, r6
    1e44:	4649      	mov	r1, r9
    1e46:	4628      	mov	r0, r5
    1e48:	f7ff ff9e 	bl	1d88 <ids_print>
			domain_id, source_id, level);


	return length;
}
    1e4c:	4438      	add	r0, r7
    1e4e:	b005      	add	sp, #20
    1e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1e54:	2700      	movs	r7, #0
    1e56:	e7e5      	b.n	1e24 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    1e58:	9a03      	ldr	r2, [sp, #12]
    1e5a:	4621      	mov	r1, r4
    1e5c:	4628      	mov	r0, r5
    1e5e:	f7ff fec5 	bl	1bec <timestamp_print>
    1e62:	4407      	add	r7, r0
    1e64:	e7e1      	b.n	1e2a <prefix_print+0x36>
    1e66:	bf00      	nop
    1e68:	00009bb8 	.word	0x00009bb8

00001e6c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e70:	b085      	sub	sp, #20
    1e72:	4606      	mov	r6, r0
    1e74:	460c      	mov	r4, r1
    1e76:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    1e78:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    1e7a:	880a      	ldrh	r2, [r1, #0]
    1e7c:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1e80:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    1e84:	d035      	beq.n	1ef2 <log_output_msg2_process+0x86>
	return msg->hdr.source;
    1e86:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    1e88:	7809      	ldrb	r1, [r1, #0]
    1e8a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1e8e:	b36a      	cbz	r2, 1eec <log_output_msg2_process+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1e90:	4820      	ldr	r0, [pc, #128]	; (1f14 <log_output_msg2_process+0xa8>)
    1e92:	1a12      	subs	r2, r2, r0
    1e94:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1e98:	9202      	str	r2, [sp, #8]
    1e9a:	9101      	str	r1, [sp, #4]
    1e9c:	f8cd 8000 	str.w	r8, [sp]
    1ea0:	2200      	movs	r2, #0
    1ea2:	4639      	mov	r1, r7
    1ea4:	4630      	mov	r0, r6
    1ea6:	f7ff ffa5 	bl	1df4 <prefix_print>
    1eaa:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    1eac:	4625      	mov	r5, r4
    1eae:	f855 3b10 	ldr.w	r3, [r5], #16
    1eb2:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1eb6:	b143      	cbz	r3, 1eca <log_output_msg2_process+0x5e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    1eb8:	f1b8 0f00 	cmp.w	r8, #0
    1ebc:	d11c      	bne.n	1ef8 <log_output_msg2_process+0x8c>
    1ebe:	4816      	ldr	r0, [pc, #88]	; (1f18 <log_output_msg2_process+0xac>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1ec0:	462b      	mov	r3, r5
    1ec2:	4632      	mov	r2, r6
    1ec4:	4915      	ldr	r1, [pc, #84]	; (1f1c <log_output_msg2_process+0xb0>)
    1ec6:	f005 fcda 	bl	787e <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1eca:	8862      	ldrh	r2, [r4, #2]
    1ecc:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    1ed0:	6821      	ldr	r1, [r4, #0]
    1ed2:	f3c1 2149 	ubfx	r1, r1, #9, #10
    1ed6:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1ed8:	b982      	cbnz	r2, 1efc <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1eda:	f1b8 0f00 	cmp.w	r8, #0
    1ede:	d113      	bne.n	1f08 <log_output_msg2_process+0x9c>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    1ee0:	4630      	mov	r0, r6
    1ee2:	f006 fa50 	bl	8386 <log_output_flush>
}
    1ee6:	b005      	add	sp, #20
    1ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
    1eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1ef0:	e7d2      	b.n	1e98 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    1ef2:	f04f 0900 	mov.w	r9, #0
    1ef6:	e7d9      	b.n	1eac <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    1ef8:	4809      	ldr	r0, [pc, #36]	; (1f20 <log_output_msg2_process+0xb4>)
    1efa:	e7e1      	b.n	1ec0 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    1efc:	9700      	str	r7, [sp, #0]
    1efe:	464b      	mov	r3, r9
    1f00:	4630      	mov	r0, r6
    1f02:	f006 fa25 	bl	8350 <log_msg2_hexdump>
    1f06:	e7e8      	b.n	1eda <log_output_msg2_process+0x6e>
		postfix_print(output, flags, level);
    1f08:	4642      	mov	r2, r8
    1f0a:	4639      	mov	r1, r7
    1f0c:	4630      	mov	r0, r6
    1f0e:	f006 fa13 	bl	8338 <postfix_print>
    1f12:	e7e5      	b.n	1ee0 <log_output_msg2_process+0x74>
    1f14:	000099f4 	.word	0x000099f4
    1f18:	000083d9 	.word	0x000083d9
    1f1c:	00001129 	.word	0x00001129
    1f20:	000083a1 	.word	0x000083a1

00001f24 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1f24:	b570      	push	{r4, r5, r6, lr}
    1f26:	b082      	sub	sp, #8
    1f28:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    1f2a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f2c:	f242 730f 	movw	r3, #9999	; 0x270f
    1f30:	428b      	cmp	r3, r1
    1f32:	bf28      	it	cs
    1f34:	460b      	movcs	r3, r1
    1f36:	4a0e      	ldr	r2, [pc, #56]	; (1f70 <log_output_dropped_process+0x4c>)
    1f38:	2105      	movs	r1, #5
    1f3a:	4668      	mov	r0, sp
    1f3c:	f005 fd1e 	bl	797c <snprintk>
    1f40:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    1f42:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1f44:	685b      	ldr	r3, [r3, #4]
    1f46:	220b      	movs	r2, #11
    1f48:	490a      	ldr	r1, [pc, #40]	; (1f74 <log_output_dropped_process+0x50>)
    1f4a:	4628      	mov	r0, r5
    1f4c:	f006 f9db 	bl	8306 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    1f50:	6863      	ldr	r3, [r4, #4]
    1f52:	685b      	ldr	r3, [r3, #4]
    1f54:	4632      	mov	r2, r6
    1f56:	4669      	mov	r1, sp
    1f58:	4628      	mov	r0, r5
    1f5a:	f006 f9d4 	bl	8306 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    1f5e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1f60:	685b      	ldr	r3, [r3, #4]
    1f62:	221b      	movs	r2, #27
    1f64:	4904      	ldr	r1, [pc, #16]	; (1f78 <log_output_dropped_process+0x54>)
    1f66:	4628      	mov	r0, r5
    1f68:	f006 f9cd 	bl	8306 <buffer_write>
}
    1f6c:	b002      	add	sp, #8
    1f6e:	bd70      	pop	{r4, r5, r6, pc}
    1f70:	00009bbc 	.word	0x00009bbc
    1f74:	00009c10 	.word	0x00009c10
    1f78:	00009bf4 	.word	0x00009bf4

00001f7c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1f7c:	4b07      	ldr	r3, [pc, #28]	; (1f9c <log_output_timestamp_freq_set+0x20>)
    1f7e:	2201      	movs	r2, #1
    1f80:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1f82:	e004      	b.n	1f8e <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    1f84:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1f86:	4a05      	ldr	r2, [pc, #20]	; (1f9c <log_output_timestamp_freq_set+0x20>)
    1f88:	6813      	ldr	r3, [r2, #0]
    1f8a:	005b      	lsls	r3, r3, #1
    1f8c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1f8e:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <log_output_timestamp_freq_set+0x24>)
    1f90:	4298      	cmp	r0, r3
    1f92:	d8f7      	bhi.n	1f84 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    1f94:	4b03      	ldr	r3, [pc, #12]	; (1fa4 <log_output_timestamp_freq_set+0x28>)
    1f96:	6018      	str	r0, [r3, #0]
}
    1f98:	4770      	bx	lr
    1f9a:	bf00      	nop
    1f9c:	20000894 	.word	0x20000894
    1fa0:	000f4240 	.word	0x000f4240
    1fa4:	20000890 	.word	0x20000890

00001fa8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1fa8:	b570      	push	{r4, r5, r6, lr}
    1faa:	4606      	mov	r6, r0
    1fac:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    1fae:	2400      	movs	r4, #0
    1fb0:	e006      	b.n	1fc0 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    1fb2:	4b05      	ldr	r3, [pc, #20]	; (1fc8 <char_out+0x20>)
    1fb4:	6818      	ldr	r0, [r3, #0]
    1fb6:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    1fb8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1fba:	685b      	ldr	r3, [r3, #4]
    1fbc:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    1fbe:	3401      	adds	r4, #1
    1fc0:	42ac      	cmp	r4, r5
    1fc2:	d3f6      	bcc.n	1fb2 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    1fc4:	4628      	mov	r0, r5
    1fc6:	bd70      	pop	{r4, r5, r6, pc}
    1fc8:	200008b0 	.word	0x200008b0

00001fcc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1fcc:	4b01      	ldr	r3, [pc, #4]	; (1fd4 <format_set+0x8>)
    1fce:	6019      	str	r1, [r3, #0]
	return 0;
}
    1fd0:	2000      	movs	r0, #0
    1fd2:	4770      	bx	lr
    1fd4:	200008a0 	.word	0x200008a0

00001fd8 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1fd8:	4b01      	ldr	r3, [pc, #4]	; (1fe0 <log_backend_uart_init+0x8>)
    1fda:	4a02      	ldr	r2, [pc, #8]	; (1fe4 <log_backend_uart_init+0xc>)
    1fdc:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    1fde:	4770      	bx	lr
    1fe0:	200008b0 	.word	0x200008b0
    1fe4:	00009854 	.word	0x00009854

00001fe8 <panic>:

static void panic(struct log_backend const *const backend)
{
    1fe8:	b508      	push	{r3, lr}
	in_panic = true;
    1fea:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <panic+0x10>)
    1fec:	2201      	movs	r2, #1
    1fee:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1ff0:	4802      	ldr	r0, [pc, #8]	; (1ffc <panic+0x14>)
    1ff2:	f006 f9c8 	bl	8386 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    1ff6:	bd08      	pop	{r3, pc}
    1ff8:	200015db 	.word	0x200015db
    1ffc:	00009c70 	.word	0x00009c70

00002000 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2000:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2002:	4802      	ldr	r0, [pc, #8]	; (200c <dropped+0xc>)
    2004:	f7ff ff8e 	bl	1f24 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    2008:	bd08      	pop	{r3, pc}
    200a:	bf00      	nop
    200c:	00009c70 	.word	0x00009c70

00002010 <process>:
{
    2010:	b510      	push	{r4, lr}
    2012:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2014:	4b04      	ldr	r3, [pc, #16]	; (2028 <process+0x18>)
    2016:	6818      	ldr	r0, [r3, #0]
    2018:	f7ff fbcc 	bl	17b4 <log_format_func_t_get>
    201c:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    201e:	220f      	movs	r2, #15
    2020:	4621      	mov	r1, r4
    2022:	4802      	ldr	r0, [pc, #8]	; (202c <process+0x1c>)
    2024:	4798      	blx	r3
}
    2026:	bd10      	pop	{r4, pc}
    2028:	200008a0 	.word	0x200008a0
    202c:	00009c70 	.word	0x00009c70

00002030 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2030:	4b03      	ldr	r3, [pc, #12]	; (2040 <log_backend_rtt_init+0x10>)
    2032:	2201      	movs	r2, #1
    2034:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    2036:	4b03      	ldr	r3, [pc, #12]	; (2044 <log_backend_rtt_init+0x14>)
    2038:	4a03      	ldr	r2, [pc, #12]	; (2048 <log_backend_rtt_init+0x18>)
    203a:	601a      	str	r2, [r3, #0]
}
    203c:	4770      	bx	lr
    203e:	bf00      	nop
    2040:	200015dc 	.word	0x200015dc
    2044:	200008e8 	.word	0x200008e8
    2048:	200008d0 	.word	0x200008d0

0000204c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    204c:	4b01      	ldr	r3, [pc, #4]	; (2054 <format_set+0x8>)
    204e:	6019      	str	r1, [r3, #0]
	return 0;
}
    2050:	2000      	movs	r0, #0
    2052:	4770      	bx	lr
    2054:	200008ec 	.word	0x200008ec

00002058 <on_failed_write>:
{
    2058:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    205a:	b918      	cbnz	r0, 2064 <on_failed_write+0xc>
		host_present = false;
    205c:	4b08      	ldr	r3, [pc, #32]	; (2080 <on_failed_write+0x28>)
    205e:	2200      	movs	r2, #0
    2060:	701a      	strb	r2, [r3, #0]
}
    2062:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2064:	4b07      	ldr	r3, [pc, #28]	; (2084 <on_failed_write+0x2c>)
    2066:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    2068:	b123      	cbz	r3, 2074 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    206a:	f241 3088 	movw	r0, #5000	; 0x1388
    206e:	f007 fb59 	bl	9724 <z_impl_k_busy_wait>
}
    2072:	e7f6      	b.n	2062 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    2074:	20a4      	movs	r0, #164	; 0xa4
    2076:	2100      	movs	r1, #0
    2078:	f004 ff6a 	bl	6f50 <z_impl_k_sleep>
}
    207c:	e7f1      	b.n	2062 <on_failed_write+0xa>
    207e:	bf00      	nop
    2080:	200015dc 	.word	0x200015dc
    2084:	200015dd 	.word	0x200015dd

00002088 <on_write>:
{
    2088:	b538      	push	{r3, r4, r5, lr}
    208a:	4604      	mov	r4, r0
	host_present = true;
    208c:	4b0a      	ldr	r3, [pc, #40]	; (20b8 <on_write+0x30>)
    208e:	2201      	movs	r2, #1
    2090:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    2092:	4b0a      	ldr	r3, [pc, #40]	; (20bc <on_write+0x34>)
    2094:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    2096:	b92b      	cbnz	r3, 20a4 <on_write+0x1c>
}
    2098:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    209a:	1e65      	subs	r5, r4, #1
    209c:	4620      	mov	r0, r4
    209e:	f7ff ffdb 	bl	2058 <on_failed_write>
    20a2:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    20a4:	2000      	movs	r0, #0
    20a6:	f003 feab 	bl	5e00 <SEGGER_RTT_HasDataUp>
    20aa:	2800      	cmp	r0, #0
    20ac:	d0f4      	beq.n	2098 <on_write+0x10>
    20ae:	4b02      	ldr	r3, [pc, #8]	; (20b8 <on_write+0x30>)
    20b0:	781b      	ldrb	r3, [r3, #0]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d1f1      	bne.n	209a <on_write+0x12>
    20b6:	e7ef      	b.n	2098 <on_write+0x10>
    20b8:	200015dc 	.word	0x200015dc
    20bc:	200015dd 	.word	0x200015dd

000020c0 <data_out_block_mode>:
{
    20c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20c4:	4606      	mov	r6, r0
    20c6:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    20c8:	2704      	movs	r7, #4
    20ca:	e00d      	b.n	20e8 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    20cc:	462a      	mov	r2, r5
    20ce:	4631      	mov	r1, r6
    20d0:	2000      	movs	r0, #0
    20d2:	f003 fe31 	bl	5d38 <SEGGER_RTT_WriteSkipNoLock>
    20d6:	4604      	mov	r4, r0
    20d8:	e01c      	b.n	2114 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    20da:	4638      	mov	r0, r7
    20dc:	f7ff ffd4 	bl	2088 <on_write>
	} while ((ret == 0) && host_present);
    20e0:	bb1c      	cbnz	r4, 212a <data_out_block_mode+0x6a>
    20e2:	4b16      	ldr	r3, [pc, #88]	; (213c <data_out_block_mode+0x7c>)
    20e4:	781b      	ldrb	r3, [r3, #0]
    20e6:	b303      	cbz	r3, 212a <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    20e8:	4b15      	ldr	r3, [pc, #84]	; (2140 <data_out_block_mode+0x80>)
    20ea:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    20ec:	2b00      	cmp	r3, #0
    20ee:	d1ed      	bne.n	20cc <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    20f0:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2144 <data_out_block_mode+0x84>
    20f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    20f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    20fc:	4640      	mov	r0, r8
    20fe:	f004 fa5f 	bl	65c0 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2102:	462a      	mov	r2, r5
    2104:	4631      	mov	r1, r6
    2106:	2000      	movs	r0, #0
    2108:	f003 fe16 	bl	5d38 <SEGGER_RTT_WriteSkipNoLock>
    210c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    210e:	4640      	mov	r0, r8
    2110:	f004 fae0 	bl	66d4 <z_impl_k_mutex_unlock>
		if (ret) {
    2114:	2c00      	cmp	r4, #0
    2116:	d1e0      	bne.n	20da <data_out_block_mode+0x1a>
		} else if (host_present) {
    2118:	4b08      	ldr	r3, [pc, #32]	; (213c <data_out_block_mode+0x7c>)
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	2b00      	cmp	r3, #0
    211e:	d0df      	beq.n	20e0 <data_out_block_mode+0x20>
			retry_cnt--;
    2120:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    2122:	4638      	mov	r0, r7
    2124:	f7ff ff98 	bl	2058 <on_failed_write>
    2128:	e7da      	b.n	20e0 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    212a:	b914      	cbnz	r4, 2132 <data_out_block_mode+0x72>
    212c:	4b03      	ldr	r3, [pc, #12]	; (213c <data_out_block_mode+0x7c>)
    212e:	781b      	ldrb	r3, [r3, #0]
    2130:	b903      	cbnz	r3, 2134 <data_out_block_mode+0x74>
    2132:	462c      	mov	r4, r5
}
    2134:	4620      	mov	r0, r4
    2136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    213a:	bf00      	nop
    213c:	200015dc 	.word	0x200015dc
    2140:	200015dd 	.word	0x200015dd
    2144:	20000194 	.word	0x20000194

00002148 <panic>:
{
    2148:	b508      	push	{r3, lr}
	panic_mode = true;
    214a:	4b03      	ldr	r3, [pc, #12]	; (2158 <panic+0x10>)
    214c:	2201      	movs	r2, #1
    214e:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    2150:	4802      	ldr	r0, [pc, #8]	; (215c <panic+0x14>)
    2152:	f006 f918 	bl	8386 <log_output_flush>
}
    2156:	bd08      	pop	{r3, pc}
    2158:	200015dd 	.word	0x200015dd
    215c:	00009cb0 	.word	0x00009cb0

00002160 <dropped>:
{
    2160:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    2162:	4802      	ldr	r0, [pc, #8]	; (216c <dropped+0xc>)
    2164:	f7ff fede 	bl	1f24 <log_output_dropped_process>
}
    2168:	bd08      	pop	{r3, pc}
    216a:	bf00      	nop
    216c:	00009cb0 	.word	0x00009cb0

00002170 <process>:
{
    2170:	b510      	push	{r4, lr}
    2172:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2174:	4b04      	ldr	r3, [pc, #16]	; (2188 <process+0x18>)
    2176:	6818      	ldr	r0, [r3, #0]
    2178:	f7ff fb1c 	bl	17b4 <log_format_func_t_get>
    217c:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    217e:	220f      	movs	r2, #15
    2180:	4621      	mov	r1, r4
    2182:	4802      	ldr	r0, [pc, #8]	; (218c <process+0x1c>)
    2184:	4798      	blx	r3
}
    2186:	bd10      	pop	{r4, pc}
    2188:	200008ec 	.word	0x200008ec
    218c:	00009cb0 	.word	0x00009cb0

00002190 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    2190:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    2192:	4c04      	ldr	r4, [pc, #16]	; (21a4 <__do_init_array_aux+0x14>)
    2194:	e002      	b.n	219c <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
    2196:	f854 3b04 	ldr.w	r3, [r4], #4
    219a:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
    219c:	4b02      	ldr	r3, [pc, #8]	; (21a8 <__do_init_array_aux+0x18>)
    219e:	429c      	cmp	r4, r3
    21a0:	d3f9      	bcc.n	2196 <__do_init_array_aux+0x6>
	}
}
    21a2:	bd10      	pop	{r4, pc}
    21a4:	000099f4 	.word	0x000099f4
    21a8:	000099f4 	.word	0x000099f4

000021ac <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    21ac:	4b06      	ldr	r3, [pc, #24]	; (21c8 <__do_global_ctors_aux+0x1c>)
    21ae:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    21b0:	b14b      	cbz	r3, 21c6 <__do_global_ctors_aux+0x1a>
{
    21b2:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    21b4:	1e5c      	subs	r4, r3, #1
    21b6:	4a04      	ldr	r2, [pc, #16]	; (21c8 <__do_global_ctors_aux+0x1c>)
    21b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21bc:	4798      	blx	r3
    21be:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    21c0:	2c00      	cmp	r4, #0
    21c2:	d1f7      	bne.n	21b4 <__do_global_ctors_aux+0x8>
	}
}
    21c4:	bd10      	pop	{r4, pc}
    21c6:	4770      	bx	lr
    21c8:	000099ec 	.word	0x000099ec

000021cc <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    21cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    21ce:	4b2a      	ldr	r3, [pc, #168]	; (2278 <pm_system_resume+0xac>)
    21d0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    21d2:	f005 031f 	and.w	r3, r5, #31
    21d6:	2201      	movs	r2, #1
    21d8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    21da:	0969      	lsrs	r1, r5, #5
    21dc:	4b27      	ldr	r3, [pc, #156]	; (227c <pm_system_resume+0xb0>)
    21de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    21e2:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    21e4:	f3bf 8f5b 	dmb	ish
    21e8:	e853 1f00 	ldrex	r1, [r3]
    21ec:	ea01 0400 	and.w	r4, r1, r0
    21f0:	e843 4600 	strex	r6, r4, [r3]
    21f4:	2e00      	cmp	r6, #0
    21f6:	d1f7      	bne.n	21e8 <pm_system_resume+0x1c>
    21f8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    21fc:	420a      	tst	r2, r1
    21fe:	d100      	bne.n	2202 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    2200:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    2202:	481f      	ldr	r0, [pc, #124]	; (2280 <pm_system_resume+0xb4>)
    2204:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    2208:	0093      	lsls	r3, r2, #2
    220a:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
    220c:	4a1d      	ldr	r2, [pc, #116]	; (2284 <pm_system_resume+0xb8>)
    220e:	b172      	cbz	r2, 222e <pm_system_resume+0x62>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2210:	7849      	ldrb	r1, [r1, #1]
    2212:	5cc0      	ldrb	r0, [r0, r3]
    2214:	f006 fabc 	bl	8790 <pm_state_exit_post_ops>
	__asm__ volatile(
    2218:	f04f 0320 	mov.w	r3, #32
    221c:	f3ef 8611 	mrs	r6, BASEPRI
    2220:	f383 8812 	msr	BASEPRI_MAX, r3
    2224:	f3bf 8f6f 	isb	sy
    2228:	4b17      	ldr	r3, [pc, #92]	; (2288 <pm_system_resume+0xbc>)
    222a:	681c      	ldr	r4, [r3, #0]
    222c:	e010      	b.n	2250 <pm_system_resume+0x84>
	__asm__ volatile(
    222e:	2300      	movs	r3, #0
    2230:	f383 8811 	msr	BASEPRI, r3
    2234:	f3bf 8f6f 	isb	sy
}
    2238:	e7ee      	b.n	2218 <pm_system_resume+0x4c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    223a:	4b0f      	ldr	r3, [pc, #60]	; (2278 <pm_system_resume+0xac>)
    223c:	7d1b      	ldrb	r3, [r3, #20]
    223e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2242:	0099      	lsls	r1, r3, #2
    2244:	4b0e      	ldr	r3, [pc, #56]	; (2280 <pm_system_resume+0xb4>)
    2246:	5c58      	ldrb	r0, [r3, r1]
    2248:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    224a:	b10c      	cbz	r4, 2250 <pm_system_resume+0x84>
	return node->next;
    224c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    224e:	b124      	cbz	r4, 225a <pm_system_resume+0x8e>
    2250:	b11c      	cbz	r4, 225a <pm_system_resume+0x8e>
			callback = notifier->state_exit;
    2252:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    2254:	2a00      	cmp	r2, #0
    2256:	d1f0      	bne.n	223a <pm_system_resume+0x6e>
    2258:	e7f7      	b.n	224a <pm_system_resume+0x7e>
	__asm__ volatile(
    225a:	f386 8811 	msr	BASEPRI, r6
    225e:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2262:	4807      	ldr	r0, [pc, #28]	; (2280 <pm_system_resume+0xb4>)
    2264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2268:	00aa      	lsls	r2, r5, #2
    226a:	1881      	adds	r1, r0, r2
    226c:	2300      	movs	r3, #0
    226e:	5083      	str	r3, [r0, r2]
    2270:	604b      	str	r3, [r1, #4]
    2272:	608b      	str	r3, [r1, #8]
}
    2274:	e7c4      	b.n	2200 <pm_system_resume+0x34>
    2276:	bf00      	nop
    2278:	200013b8 	.word	0x200013b8
    227c:	20000914 	.word	0x20000914
    2280:	20000904 	.word	0x20000904
    2284:	00008791 	.word	0x00008791
    2288:	200008fc 	.word	0x200008fc

0000228c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2290:	4b57      	ldr	r3, [pc, #348]	; (23f0 <pm_system_suspend+0x164>)
    2292:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2294:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2296:	f3bf 8f5b 	dmb	ish
    229a:	4b56      	ldr	r3, [pc, #344]	; (23f4 <pm_system_suspend+0x168>)
    229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    22a0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    22a4:	f005 021f 	and.w	r2, r5, #31
    22a8:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    22aa:	f013 0f01 	tst.w	r3, #1
    22ae:	d015      	beq.n	22dc <pm_system_suspend+0x50>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    22b0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    22b4:	4a50      	ldr	r2, [pc, #320]	; (23f8 <pm_system_suspend+0x16c>)
    22b6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    22ba:	b1f3      	cbz	r3, 22fa <pm_system_suspend+0x6e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    22bc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    22c0:	d131      	bne.n	2326 <pm_system_suspend+0x9a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    22c2:	f004 fb11 	bl	68e8 <k_sched_lock>
	__asm__ volatile(
    22c6:	f04f 0320 	mov.w	r3, #32
    22ca:	f3ef 8611 	mrs	r6, BASEPRI
    22ce:	f383 8812 	msr	BASEPRI_MAX, r3
    22d2:	f3bf 8f6f 	isb	sy
	return list->head;
    22d6:	4b49      	ldr	r3, [pc, #292]	; (23fc <pm_system_suspend+0x170>)
    22d8:	681c      	ldr	r4, [r3, #0]
    22da:	e045      	b.n	2368 <pm_system_suspend+0xdc>
		info = pm_policy_next_state(id, ticks);
    22dc:	4601      	mov	r1, r0
    22de:	4628      	mov	r0, r5
    22e0:	f000 f8a4 	bl	242c <pm_policy_next_state>
		if (info != NULL) {
    22e4:	2800      	cmp	r0, #0
    22e6:	d0e3      	beq.n	22b0 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    22e8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    22ec:	4a42      	ldr	r2, [pc, #264]	; (23f8 <pm_system_suspend+0x16c>)
    22ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    22f2:	c807      	ldmia	r0, {r0, r1, r2}
    22f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    22f8:	e7da      	b.n	22b0 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    22fa:	f005 021f 	and.w	r2, r5, #31
    22fe:	2301      	movs	r3, #1
    2300:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2302:	096d      	lsrs	r5, r5, #5
    2304:	4a3b      	ldr	r2, [pc, #236]	; (23f4 <pm_system_suspend+0x168>)
    2306:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    230a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    230c:	f3bf 8f5b 	dmb	ish
    2310:	e855 2f00 	ldrex	r2, [r5]
    2314:	401a      	ands	r2, r3
    2316:	e845 2100 	strex	r1, r2, [r5]
    231a:	2900      	cmp	r1, #0
    231c:	d1f8      	bne.n	2310 <pm_system_suspend+0x84>
    231e:	f3bf 8f5b 	dmb	ish
		ret = false;
    2322:	2000      	movs	r0, #0
		goto end;
    2324:	e062      	b.n	23ec <pm_system_suspend+0x160>
		     k_us_to_ticks_ceil32(
    2326:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    232a:	4a33      	ldr	r2, [pc, #204]	; (23f8 <pm_system_suspend+0x16c>)
    232c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2330:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2332:	0c41      	lsrs	r1, r0, #17
    2334:	03c0      	lsls	r0, r0, #15
    2336:	4b32      	ldr	r3, [pc, #200]	; (2400 <pm_system_suspend+0x174>)
    2338:	18c0      	adds	r0, r0, r3
    233a:	4a32      	ldr	r2, [pc, #200]	; (2404 <pm_system_suspend+0x178>)
    233c:	f04f 0300 	mov.w	r3, #0
    2340:	f141 0100 	adc.w	r1, r1, #0
    2344:	f7fd fedc 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2348:	2101      	movs	r1, #1
    234a:	1a20      	subs	r0, r4, r0
    234c:	f007 f9bb 	bl	96c6 <z_set_timeout_expiry>
    2350:	e7b7      	b.n	22c2 <pm_system_suspend+0x36>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2352:	4b27      	ldr	r3, [pc, #156]	; (23f0 <pm_system_suspend+0x164>)
    2354:	7d1b      	ldrb	r3, [r3, #20]
    2356:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    235a:	4927      	ldr	r1, [pc, #156]	; (23f8 <pm_system_suspend+0x16c>)
    235c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2360:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    2362:	b10c      	cbz	r4, 2368 <pm_system_suspend+0xdc>
	return node->next;
    2364:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2366:	b124      	cbz	r4, 2372 <pm_system_suspend+0xe6>
    2368:	b11c      	cbz	r4, 2372 <pm_system_suspend+0xe6>
			callback = notifier->state_entry;
    236a:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    236c:	2a00      	cmp	r2, #0
    236e:	d1f0      	bne.n	2352 <pm_system_suspend+0xc6>
    2370:	e7f7      	b.n	2362 <pm_system_suspend+0xd6>
	__asm__ volatile(
    2372:	f386 8811 	msr	BASEPRI, r6
    2376:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    237a:	f005 031f 	and.w	r3, r5, #31
    237e:	2101      	movs	r1, #1
    2380:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2382:	096b      	lsrs	r3, r5, #5
    2384:	4a20      	ldr	r2, [pc, #128]	; (2408 <pm_system_suspend+0x17c>)
    2386:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    238a:	f3bf 8f5b 	dmb	ish
    238e:	e853 2f00 	ldrex	r2, [r3]
    2392:	430a      	orrs	r2, r1
    2394:	e843 2000 	strex	r0, r2, [r3]
    2398:	2800      	cmp	r0, #0
    239a:	d1f8      	bne.n	238e <pm_system_suspend+0x102>
    239c:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    23a0:	4b1a      	ldr	r3, [pc, #104]	; (240c <pm_system_suspend+0x180>)
    23a2:	b14b      	cbz	r3, 23b8 <pm_system_suspend+0x12c>
		pm_state_set(info->state, info->substate_id);
    23a4:	4b14      	ldr	r3, [pc, #80]	; (23f8 <pm_system_suspend+0x16c>)
    23a6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    23aa:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    23ae:	7849      	ldrb	r1, [r1, #1]
    23b0:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    23b4:	f006 f9e0 	bl	8778 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    23b8:	f7ff ff08 	bl	21cc <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    23bc:	f005 031f 	and.w	r3, r5, #31
    23c0:	2401      	movs	r4, #1
    23c2:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    23c6:	096d      	lsrs	r5, r5, #5
    23c8:	4a0a      	ldr	r2, [pc, #40]	; (23f4 <pm_system_suspend+0x168>)
    23ca:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    23ce:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23d0:	f3bf 8f5b 	dmb	ish
    23d4:	e855 2f00 	ldrex	r2, [r5]
    23d8:	401a      	ands	r2, r3
    23da:	e845 2100 	strex	r1, r2, [r5]
    23de:	2900      	cmp	r1, #0
    23e0:	d1f8      	bne.n	23d4 <pm_system_suspend+0x148>
    23e2:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    23e6:	f004 fca1 	bl	6d2c <k_sched_unlock>
	bool ret = true;
    23ea:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    23ec:	bd70      	pop	{r4, r5, r6, pc}
    23ee:	bf00      	nop
    23f0:	200013b8 	.word	0x200013b8
    23f4:	20000910 	.word	0x20000910
    23f8:	20000904 	.word	0x20000904
    23fc:	200008fc 	.word	0x200008fc
    2400:	000f423f 	.word	0x000f423f
    2404:	000f4240 	.word	0x000f4240
    2408:	20000914 	.word	0x20000914
    240c:	00008779 	.word	0x00008779

00002410 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2410:	f3bf 8f5b 	dmb	ish
    2414:	4b04      	ldr	r3, [pc, #16]	; (2428 <pm_policy_state_lock_is_active+0x18>)
    2416:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    241a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    241e:	3800      	subs	r0, #0
    2420:	bf18      	it	ne
    2422:	2001      	movne	r0, #1
    2424:	4770      	bx	lr
    2426:	bf00      	nop
    2428:	20000918 	.word	0x20000918

0000242c <pm_policy_next_state>:
{
    242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2430:	b082      	sub	sp, #8
    2432:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2434:	a901      	add	r1, sp, #4
    2436:	f000 f843 	bl	24c0 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    243a:	1e44      	subs	r4, r0, #1
    243c:	b224      	sxth	r4, r4
    243e:	e007      	b.n	2450 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    2440:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2444:	d032      	beq.n	24ac <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    2446:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    2448:	42b0      	cmp	r0, r6
    244a:	d92f      	bls.n	24ac <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    244c:	3c01      	subs	r4, #1
    244e:	b224      	sxth	r4, r4
    2450:	2c00      	cmp	r4, #0
    2452:	db2a      	blt.n	24aa <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    2454:	9b01      	ldr	r3, [sp, #4]
    2456:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    245a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    245e:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    2462:	f7ff ffd5 	bl	2410 <pm_policy_state_lock_is_active>
    2466:	2800      	cmp	r0, #0
    2468:	d1f0      	bne.n	244c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    246a:	6868      	ldr	r0, [r5, #4]
    246c:	0c41      	lsrs	r1, r0, #17
    246e:	03c0      	lsls	r0, r0, #15
    2470:	4f10      	ldr	r7, [pc, #64]	; (24b4 <pm_policy_next_state+0x88>)
    2472:	19c0      	adds	r0, r0, r7
    2474:	4a10      	ldr	r2, [pc, #64]	; (24b8 <pm_policy_next_state+0x8c>)
    2476:	f04f 0300 	mov.w	r3, #0
    247a:	f141 0100 	adc.w	r1, r1, #0
    247e:	f7fd fe3f 	bl	100 <__aeabi_uldivmod>
    2482:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    2484:	68ab      	ldr	r3, [r5, #8]
    2486:	0c59      	lsrs	r1, r3, #17
    2488:	03db      	lsls	r3, r3, #15
    248a:	19d8      	adds	r0, r3, r7
    248c:	4a0a      	ldr	r2, [pc, #40]	; (24b8 <pm_policy_next_state+0x8c>)
    248e:	f04f 0300 	mov.w	r3, #0
    2492:	f141 0100 	adc.w	r1, r1, #0
    2496:	f7fd fe33 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    249a:	4b08      	ldr	r3, [pc, #32]	; (24bc <pm_policy_next_state+0x90>)
    249c:	681b      	ldr	r3, [r3, #0]
    249e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    24a2:	d0cd      	beq.n	2440 <pm_policy_next_state+0x14>
    24a4:	4283      	cmp	r3, r0
    24a6:	d8cb      	bhi.n	2440 <pm_policy_next_state+0x14>
    24a8:	e7d0      	b.n	244c <pm_policy_next_state+0x20>
	return NULL;
    24aa:	2500      	movs	r5, #0
}
    24ac:	4628      	mov	r0, r5
    24ae:	b002      	add	sp, #8
    24b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24b4:	000f423f 	.word	0x000f423f
    24b8:	000f4240 	.word	0x000f4240
    24bc:	20000008 	.word	0x20000008

000024c0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    24c0:	b908      	cbnz	r0, 24c6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    24c2:	4b02      	ldr	r3, [pc, #8]	; (24cc <pm_state_cpu_get_all+0xc>)
    24c4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    24c6:	2000      	movs	r0, #0
    24c8:	4770      	bx	lr
    24ca:	bf00      	nop
    24cc:	00009cc4 	.word	0x00009cc4

000024d0 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    24d0:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    24d2:	4802      	ldr	r0, [pc, #8]	; (24dc <nrf_cc3xx_platform_abort_init+0xc>)
    24d4:	f004 fffe 	bl	74d4 <nrf_cc3xx_platform_set_abort>
}
    24d8:	bd08      	pop	{r3, pc}
    24da:	bf00      	nop
    24dc:	00009cc4 	.word	0x00009cc4

000024e0 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    24e0:	b1d0      	cbz	r0, 2518 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    24e2:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    24e4:	6842      	ldr	r2, [r0, #4]
    24e6:	2a04      	cmp	r2, #4
    24e8:	d005      	beq.n	24f6 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    24ea:	b1d2      	cbz	r2, 2522 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    24ec:	6800      	ldr	r0, [r0, #0]
    24ee:	f004 f8f1 	bl	66d4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    24f2:	2000      	movs	r0, #0
    }
}
    24f4:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    24f6:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    24f8:	2200      	movs	r2, #0
    24fa:	f3bf 8f5b 	dmb	ish
    24fe:	e853 1f00 	ldrex	r1, [r3]
    2502:	2901      	cmp	r1, #1
    2504:	d103      	bne.n	250e <mutex_unlock_platform+0x2e>
    2506:	e843 2000 	strex	r0, r2, [r3]
    250a:	2800      	cmp	r0, #0
    250c:	d1f7      	bne.n	24fe <mutex_unlock_platform+0x1e>
    250e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2512:	d104      	bne.n	251e <mutex_unlock_platform+0x3e>
    2514:	4610      	mov	r0, r2
    2516:	e7ed      	b.n	24f4 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2518:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    251c:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    251e:	4802      	ldr	r0, [pc, #8]	; (2528 <mutex_unlock_platform+0x48>)
    2520:	e7e8      	b.n	24f4 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2522:	4802      	ldr	r0, [pc, #8]	; (252c <mutex_unlock_platform+0x4c>)
    2524:	e7e6      	b.n	24f4 <mutex_unlock_platform+0x14>
    2526:	bf00      	nop
    2528:	ffff8fe9 	.word	0xffff8fe9
    252c:	ffff8fea 	.word	0xffff8fea

00002530 <mutex_lock_platform>:
    if(mutex == NULL) {
    2530:	b320      	cbz	r0, 257c <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2532:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2534:	6842      	ldr	r2, [r0, #4]
    2536:	2a04      	cmp	r2, #4
    2538:	d002      	beq.n	2540 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    253a:	b992      	cbnz	r2, 2562 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    253c:	4811      	ldr	r0, [pc, #68]	; (2584 <mutex_lock_platform+0x54>)
    253e:	e00f      	b.n	2560 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2540:	6803      	ldr	r3, [r0, #0]
    2542:	2201      	movs	r2, #1
    2544:	f3bf 8f5b 	dmb	ish
    2548:	e853 1f00 	ldrex	r1, [r3]
    254c:	2900      	cmp	r1, #0
    254e:	d103      	bne.n	2558 <mutex_lock_platform+0x28>
    2550:	e843 2000 	strex	r0, r2, [r3]
    2554:	2800      	cmp	r0, #0
    2556:	d1f7      	bne.n	2548 <mutex_lock_platform+0x18>
    2558:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    255c:	d10c      	bne.n	2578 <mutex_lock_platform+0x48>
    255e:	2000      	movs	r0, #0
}
    2560:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    2562:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    256c:	f004 f828 	bl	65c0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2570:	2800      	cmp	r0, #0
    2572:	d0f5      	beq.n	2560 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2574:	4804      	ldr	r0, [pc, #16]	; (2588 <mutex_lock_platform+0x58>)
    2576:	e7f3      	b.n	2560 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2578:	4803      	ldr	r0, [pc, #12]	; (2588 <mutex_lock_platform+0x58>)
    257a:	e7f1      	b.n	2560 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    257c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2580:	4770      	bx	lr
    2582:	bf00      	nop
    2584:	ffff8fea 	.word	0xffff8fea
    2588:	ffff8fe9 	.word	0xffff8fe9

0000258c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    258c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    258e:	4604      	mov	r4, r0
    2590:	b188      	cbz	r0, 25b6 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2592:	6863      	ldr	r3, [r4, #4]
    2594:	2b04      	cmp	r3, #4
    2596:	d00d      	beq.n	25b4 <mutex_free_platform+0x28>
    2598:	2b08      	cmp	r3, #8
    259a:	d00b      	beq.n	25b4 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    259c:	b153      	cbz	r3, 25b4 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    259e:	f013 0f02 	tst.w	r3, #2
    25a2:	d00d      	beq.n	25c0 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    25a4:	4621      	mov	r1, r4
    25a6:	4809      	ldr	r0, [pc, #36]	; (25cc <mutex_free_platform+0x40>)
    25a8:	f006 fe50 	bl	924c <k_mem_slab_free>
        mutex->mutex = NULL;
    25ac:	2300      	movs	r3, #0
    25ae:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    25b0:	2300      	movs	r3, #0
    25b2:	6063      	str	r3, [r4, #4]
}
    25b4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    25b6:	4b06      	ldr	r3, [pc, #24]	; (25d0 <mutex_free_platform+0x44>)
    25b8:	685b      	ldr	r3, [r3, #4]
    25ba:	4806      	ldr	r0, [pc, #24]	; (25d4 <mutex_free_platform+0x48>)
    25bc:	4798      	blx	r3
    25be:	e7e8      	b.n	2592 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    25c0:	2214      	movs	r2, #20
    25c2:	2100      	movs	r1, #0
    25c4:	6820      	ldr	r0, [r4, #0]
    25c6:	f006 f8a6 	bl	8716 <memset>
    25ca:	e7f1      	b.n	25b0 <mutex_free_platform+0x24>
    25cc:	20000934 	.word	0x20000934
    25d0:	200000e4 	.word	0x200000e4
    25d4:	00009ccc 	.word	0x00009ccc

000025d8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    25d8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    25da:	4604      	mov	r4, r0
    25dc:	b178      	cbz	r0, 25fe <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    25de:	6863      	ldr	r3, [r4, #4]
    25e0:	2b04      	cmp	r3, #4
    25e2:	d00b      	beq.n	25fc <mutex_init_platform+0x24>
    25e4:	2b08      	cmp	r3, #8
    25e6:	d009      	beq.n	25fc <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    25e8:	b90b      	cbnz	r3, 25ee <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    25ea:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    25ec:	b163      	cbz	r3, 2608 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    25ee:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    25f0:	f006 febf 	bl	9372 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    25f4:	6863      	ldr	r3, [r4, #4]
    25f6:	f043 0301 	orr.w	r3, r3, #1
    25fa:	6063      	str	r3, [r4, #4]
}
    25fc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    25fe:	4b0f      	ldr	r3, [pc, #60]	; (263c <mutex_init_platform+0x64>)
    2600:	685b      	ldr	r3, [r3, #4]
    2602:	480f      	ldr	r0, [pc, #60]	; (2640 <mutex_init_platform+0x68>)
    2604:	4798      	blx	r3
    2606:	e7ea      	b.n	25de <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    260c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2610:	4621      	mov	r1, r4
    2612:	480c      	ldr	r0, [pc, #48]	; (2644 <mutex_init_platform+0x6c>)
    2614:	f003 fe94 	bl	6340 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2618:	b908      	cbnz	r0, 261e <mutex_init_platform+0x46>
    261a:	6823      	ldr	r3, [r4, #0]
    261c:	b91b      	cbnz	r3, 2626 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    261e:	4b07      	ldr	r3, [pc, #28]	; (263c <mutex_init_platform+0x64>)
    2620:	685b      	ldr	r3, [r3, #4]
    2622:	4809      	ldr	r0, [pc, #36]	; (2648 <mutex_init_platform+0x70>)
    2624:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2626:	2214      	movs	r2, #20
    2628:	2100      	movs	r1, #0
    262a:	6820      	ldr	r0, [r4, #0]
    262c:	f006 f873 	bl	8716 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2630:	6863      	ldr	r3, [r4, #4]
    2632:	f043 0302 	orr.w	r3, r3, #2
    2636:	6063      	str	r3, [r4, #4]
    2638:	e7d9      	b.n	25ee <mutex_init_platform+0x16>
    263a:	bf00      	nop
    263c:	200000e4 	.word	0x200000e4
    2640:	00009ccc 	.word	0x00009ccc
    2644:	20000934 	.word	0x20000934
    2648:	00009cf4 	.word	0x00009cf4

0000264c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    264c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    264e:	2340      	movs	r3, #64	; 0x40
    2650:	2214      	movs	r2, #20
    2652:	4904      	ldr	r1, [pc, #16]	; (2664 <nrf_cc3xx_platform_mutex_init+0x18>)
    2654:	4804      	ldr	r0, [pc, #16]	; (2668 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2656:	f006 fdea 	bl	922e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    265a:	4904      	ldr	r1, [pc, #16]	; (266c <nrf_cc3xx_platform_mutex_init+0x20>)
    265c:	4804      	ldr	r0, [pc, #16]	; (2670 <nrf_cc3xx_platform_mutex_init+0x24>)
    265e:	f004 ff99 	bl	7594 <nrf_cc3xx_platform_set_mutexes>
}
    2662:	bd08      	pop	{r3, pc}
    2664:	20000954 	.word	0x20000954
    2668:	20000934 	.word	0x20000934
    266c:	00009d34 	.word	0x00009d34
    2670:	00009d24 	.word	0x00009d24

00002674 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2674:	4901      	ldr	r1, [pc, #4]	; (267c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2676:	2210      	movs	r2, #16
	str	r2, [r1]
    2678:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    267a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    267c:	e000ed10 	.word	0xe000ed10

00002680 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2680:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2682:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2684:	f380 8811 	msr	BASEPRI, r0
	isb
    2688:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    268c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2690:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2692:	b662      	cpsie	i
	isb
    2694:	f3bf 8f6f 	isb	sy

	bx	lr
    2698:	4770      	bx	lr
    269a:	bf00      	nop

0000269c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    269c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    269e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    26a0:	f381 8811 	msr	BASEPRI, r1

	wfe
    26a4:	bf20      	wfe

	msr	BASEPRI, r0
    26a6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    26aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    26ac:	4770      	bx	lr
    26ae:	bf00      	nop

000026b0 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    26b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26b2:	af00      	add	r7, sp, #0
    26b4:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    26b6:	f8d0 c000 	ldr.w	ip, [r0]
    26ba:	6846      	ldr	r6, [r0, #4]
    26bc:	6880      	ldr	r0, [r0, #8]
    26be:	466d      	mov	r5, sp
    26c0:	b08a      	sub	sp, #40	; 0x28
    26c2:	466b      	mov	r3, sp
    26c4:	f113 0210 	adds.w	r2, r3, #16
    26c8:	f000 80fc 	beq.w	28c4 <esf_dump+0x214>
    26cc:	2114      	movs	r1, #20
    26ce:	b12a      	cbz	r2, 26dc <esf_dump+0x2c>
    26d0:	2904      	cmp	r1, #4
    26d2:	dd03      	ble.n	26dc <esf_dump+0x2c>
    26d4:	f8df e21c 	ldr.w	lr, [pc, #540]	; 28f4 <esf_dump+0x244>
    26d8:	f8c3 e014 	str.w	lr, [r3, #20]
    26dc:	b11a      	cbz	r2, 26e6 <esf_dump+0x36>
    26de:	2908      	cmp	r1, #8
    26e0:	dd01      	ble.n	26e6 <esf_dump+0x36>
    26e2:	f8c3 c018 	str.w	ip, [r3, #24]
    26e6:	b112      	cbz	r2, 26ee <esf_dump+0x3e>
    26e8:	290c      	cmp	r1, #12
    26ea:	dd00      	ble.n	26ee <esf_dump+0x3e>
    26ec:	61de      	str	r6, [r3, #28]
    26ee:	b112      	cbz	r2, 26f6 <esf_dump+0x46>
    26f0:	2910      	cmp	r1, #16
    26f2:	dd00      	ble.n	26f6 <esf_dump+0x46>
    26f4:	6218      	str	r0, [r3, #32]
    26f6:	2913      	cmp	r1, #19
    26f8:	f340 80e7 	ble.w	28ca <esf_dump+0x21a>
    26fc:	2014      	movs	r0, #20
    26fe:	b15a      	cbz	r2, 2718 <esf_dump+0x68>
    2700:	2100      	movs	r1, #0
    2702:	f04f 0c05 	mov.w	ip, #5
    2706:	f36c 0107 	bfi	r1, ip, #0, #8
    270a:	f36f 210f 	bfc	r1, #8, #8
    270e:	f36f 4117 	bfc	r1, #16, #8
    2712:	f36f 611f 	bfc	r1, #24, #8
    2716:	6119      	str	r1, [r3, #16]
    2718:	2100      	movs	r1, #0
    271a:	f36f 0100 	bfc	r1, #0, #1
    271e:	f36f 0141 	bfc	r1, #1, #1
    2722:	f36f 0182 	bfc	r1, #2, #1
    2726:	f36f 01c5 	bfc	r1, #3, #3
    272a:	2301      	movs	r3, #1
    272c:	f363 1188 	bfi	r1, r3, #6, #3
    2730:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
    2734:	f363 2152 	bfi	r1, r3, #9, #10
    2738:	f36f 41de 	bfc	r1, #19, #12
    273c:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    2740:	2300      	movs	r3, #0
    2742:	486d      	ldr	r0, [pc, #436]	; (28f8 <esf_dump+0x248>)
    2744:	f005 fe6f 	bl	8426 <z_impl_z_log_msg2_static_create>
    2748:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    274a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    274e:	6926      	ldr	r6, [r4, #16]
    2750:	6960      	ldr	r0, [r4, #20]
    2752:	466d      	mov	r5, sp
    2754:	b08a      	sub	sp, #40	; 0x28
    2756:	466b      	mov	r3, sp
    2758:	f113 0210 	adds.w	r2, r3, #16
    275c:	f000 80b8 	beq.w	28d0 <esf_dump+0x220>
    2760:	2114      	movs	r1, #20
    2762:	b12a      	cbz	r2, 2770 <esf_dump+0xc0>
    2764:	2904      	cmp	r1, #4
    2766:	dd03      	ble.n	2770 <esf_dump+0xc0>
    2768:	f8df e190 	ldr.w	lr, [pc, #400]	; 28fc <esf_dump+0x24c>
    276c:	f8c3 e014 	str.w	lr, [r3, #20]
    2770:	b11a      	cbz	r2, 277a <esf_dump+0xca>
    2772:	2908      	cmp	r1, #8
    2774:	dd01      	ble.n	277a <esf_dump+0xca>
    2776:	f8c3 c018 	str.w	ip, [r3, #24]
    277a:	b112      	cbz	r2, 2782 <esf_dump+0xd2>
    277c:	290c      	cmp	r1, #12
    277e:	dd00      	ble.n	2782 <esf_dump+0xd2>
    2780:	61de      	str	r6, [r3, #28]
    2782:	b112      	cbz	r2, 278a <esf_dump+0xda>
    2784:	2910      	cmp	r1, #16
    2786:	dd00      	ble.n	278a <esf_dump+0xda>
    2788:	6218      	str	r0, [r3, #32]
    278a:	2913      	cmp	r1, #19
    278c:	f340 80a3 	ble.w	28d6 <esf_dump+0x226>
    2790:	2014      	movs	r0, #20
    2792:	b15a      	cbz	r2, 27ac <esf_dump+0xfc>
    2794:	2100      	movs	r1, #0
    2796:	f04f 0c05 	mov.w	ip, #5
    279a:	f36c 0107 	bfi	r1, ip, #0, #8
    279e:	f36f 210f 	bfc	r1, #8, #8
    27a2:	f36f 4117 	bfc	r1, #16, #8
    27a6:	f36f 611f 	bfc	r1, #24, #8
    27aa:	6119      	str	r1, [r3, #16]
    27ac:	2100      	movs	r1, #0
    27ae:	f36f 0100 	bfc	r1, #0, #1
    27b2:	f36f 0141 	bfc	r1, #1, #1
    27b6:	f36f 0182 	bfc	r1, #2, #1
    27ba:	f36f 01c5 	bfc	r1, #3, #3
    27be:	2301      	movs	r3, #1
    27c0:	f363 1188 	bfi	r1, r3, #6, #3
    27c4:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
    27c8:	f363 2152 	bfi	r1, r3, #9, #10
    27cc:	f36f 41de 	bfc	r1, #19, #12
    27d0:	f36f 71df 	bfc	r1, #31, #1
    27d4:	2300      	movs	r3, #0
    27d6:	4848      	ldr	r0, [pc, #288]	; (28f8 <esf_dump+0x248>)
    27d8:	f005 fe25 	bl	8426 <z_impl_z_log_msg2_static_create>
    27dc:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    27de:	69e0      	ldr	r0, [r4, #28]
    27e0:	466d      	mov	r5, sp
    27e2:	b088      	sub	sp, #32
    27e4:	466b      	mov	r3, sp
    27e6:	f113 0210 	adds.w	r2, r3, #16
    27ea:	d077      	beq.n	28dc <esf_dump+0x22c>
    27ec:	210c      	movs	r1, #12
    27ee:	b11a      	cbz	r2, 27f8 <esf_dump+0x148>
    27f0:	2904      	cmp	r1, #4
    27f2:	dd01      	ble.n	27f8 <esf_dump+0x148>
    27f4:	4e42      	ldr	r6, [pc, #264]	; (2900 <esf_dump+0x250>)
    27f6:	615e      	str	r6, [r3, #20]
    27f8:	b112      	cbz	r2, 2800 <esf_dump+0x150>
    27fa:	2908      	cmp	r1, #8
    27fc:	dd00      	ble.n	2800 <esf_dump+0x150>
    27fe:	6198      	str	r0, [r3, #24]
    2800:	290b      	cmp	r1, #11
    2802:	dd6e      	ble.n	28e2 <esf_dump+0x232>
    2804:	200c      	movs	r0, #12
    2806:	b15a      	cbz	r2, 2820 <esf_dump+0x170>
    2808:	2100      	movs	r1, #0
    280a:	f04f 0c03 	mov.w	ip, #3
    280e:	f36c 0107 	bfi	r1, ip, #0, #8
    2812:	f36f 210f 	bfc	r1, #8, #8
    2816:	f36f 4117 	bfc	r1, #16, #8
    281a:	f36f 611f 	bfc	r1, #24, #8
    281e:	6119      	str	r1, [r3, #16]
    2820:	2100      	movs	r1, #0
    2822:	f36f 0100 	bfc	r1, #0, #1
    2826:	f36f 0141 	bfc	r1, #1, #1
    282a:	f36f 0182 	bfc	r1, #2, #1
    282e:	f36f 01c5 	bfc	r1, #3, #3
    2832:	2301      	movs	r3, #1
    2834:	f363 1188 	bfi	r1, r3, #6, #3
    2838:	f400 737b 	and.w	r3, r0, #1004	; 0x3ec
    283c:	f363 2152 	bfi	r1, r3, #9, #10
    2840:	f36f 41de 	bfc	r1, #19, #12
    2844:	f36f 71df 	bfc	r1, #31, #1
    2848:	2300      	movs	r3, #0
    284a:	482b      	ldr	r0, [pc, #172]	; (28f8 <esf_dump+0x248>)
    284c:	f005 fdeb 	bl	8426 <z_impl_z_log_msg2_static_create>
    2850:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2852:	69a0      	ldr	r0, [r4, #24]
    2854:	b088      	sub	sp, #32
    2856:	466b      	mov	r3, sp
    2858:	f113 0210 	adds.w	r2, r3, #16
    285c:	d044      	beq.n	28e8 <esf_dump+0x238>
    285e:	210c      	movs	r1, #12
    2860:	b11a      	cbz	r2, 286a <esf_dump+0x1ba>
    2862:	2904      	cmp	r1, #4
    2864:	dd01      	ble.n	286a <esf_dump+0x1ba>
    2866:	4c27      	ldr	r4, [pc, #156]	; (2904 <esf_dump+0x254>)
    2868:	615c      	str	r4, [r3, #20]
    286a:	b112      	cbz	r2, 2872 <esf_dump+0x1c2>
    286c:	2908      	cmp	r1, #8
    286e:	dd00      	ble.n	2872 <esf_dump+0x1c2>
    2870:	6198      	str	r0, [r3, #24]
    2872:	290b      	cmp	r1, #11
    2874:	dd3b      	ble.n	28ee <esf_dump+0x23e>
    2876:	200c      	movs	r0, #12
    2878:	b152      	cbz	r2, 2890 <esf_dump+0x1e0>
    287a:	2100      	movs	r1, #0
    287c:	2403      	movs	r4, #3
    287e:	f364 0107 	bfi	r1, r4, #0, #8
    2882:	f36f 210f 	bfc	r1, #8, #8
    2886:	f36f 4117 	bfc	r1, #16, #8
    288a:	f36f 611f 	bfc	r1, #24, #8
    288e:	6119      	str	r1, [r3, #16]
    2890:	2100      	movs	r1, #0
    2892:	f36f 0100 	bfc	r1, #0, #1
    2896:	f36f 0141 	bfc	r1, #1, #1
    289a:	f36f 0182 	bfc	r1, #2, #1
    289e:	f36f 01c5 	bfc	r1, #3, #3
    28a2:	2301      	movs	r3, #1
    28a4:	f363 1188 	bfi	r1, r3, #6, #3
    28a8:	f400 737b 	and.w	r3, r0, #1004	; 0x3ec
    28ac:	f363 2152 	bfi	r1, r3, #9, #10
    28b0:	f36f 41de 	bfc	r1, #19, #12
    28b4:	f36f 71df 	bfc	r1, #31, #1
    28b8:	2300      	movs	r3, #0
    28ba:	480f      	ldr	r0, [pc, #60]	; (28f8 <esf_dump+0x248>)
    28bc:	f005 fdb3 	bl	8426 <z_impl_z_log_msg2_static_create>
		esf->basic.pc);
}
    28c0:	46bd      	mov	sp, r7
    28c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    28c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    28c8:	e701      	b.n	26ce <esf_dump+0x1e>
    28ca:	f06f 001b 	mvn.w	r0, #27
    28ce:	e716      	b.n	26fe <esf_dump+0x4e>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    28d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    28d4:	e745      	b.n	2762 <esf_dump+0xb2>
    28d6:	f06f 001b 	mvn.w	r0, #27
    28da:	e75a      	b.n	2792 <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    28dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    28e0:	e785      	b.n	27ee <esf_dump+0x13e>
    28e2:	f06f 001b 	mvn.w	r0, #27
    28e6:	e78e      	b.n	2806 <esf_dump+0x156>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    28e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    28ec:	e7b8      	b.n	2860 <esf_dump+0x1b0>
    28ee:	f06f 001b 	mvn.w	r0, #27
    28f2:	e7c1      	b.n	2878 <esf_dump+0x1c8>
    28f4:	00009d48 	.word	0x00009d48
    28f8:	00009a1c 	.word	0x00009a1c
    28fc:	00009d78 	.word	0x00009d78
    2900:	00009da8 	.word	0x00009da8
    2904:	00009db8 	.word	0x00009db8

00002908 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2908:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    290a:	2800      	cmp	r0, #0
    290c:	db07      	blt.n	291e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    290e:	f000 021f 	and.w	r2, r0, #31
    2912:	0940      	lsrs	r0, r0, #5
    2914:	2301      	movs	r3, #1
    2916:	4093      	lsls	r3, r2
    2918:	4a01      	ldr	r2, [pc, #4]	; (2920 <arch_irq_enable+0x18>)
    291a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    291e:	4770      	bx	lr
    2920:	e000e100 	.word	0xe000e100

00002924 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2924:	0942      	lsrs	r2, r0, #5
    2926:	4b05      	ldr	r3, [pc, #20]	; (293c <arch_irq_is_enabled+0x18>)
    2928:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    292c:	f000 001f 	and.w	r0, r0, #31
    2930:	2301      	movs	r3, #1
    2932:	fa03 f000 	lsl.w	r0, r3, r0
}
    2936:	4010      	ands	r0, r2
    2938:	4770      	bx	lr
    293a:	bf00      	nop
    293c:	e000e100 	.word	0xe000e100

00002940 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2940:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2942:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2944:	2800      	cmp	r0, #0
    2946:	db08      	blt.n	295a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2948:	0149      	lsls	r1, r1, #5
    294a:	b2c9      	uxtb	r1, r1
    294c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2950:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2954:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    2958:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    295a:	f000 000f 	and.w	r0, r0, #15
    295e:	0149      	lsls	r1, r1, #5
    2960:	b2c9      	uxtb	r1, r1
    2962:	4b01      	ldr	r3, [pc, #4]	; (2968 <z_arm_irq_priority_set+0x28>)
    2964:	5419      	strb	r1, [r3, r0]
}
    2966:	4770      	bx	lr
    2968:	e000ed14 	.word	0xe000ed14

0000296c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    296c:	bf30      	wfi
    b z_SysNmiOnReset
    296e:	f7ff bffd 	b.w	296c <z_SysNmiOnReset>
    2972:	bf00      	nop

00002974 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2974:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2976:	4b0b      	ldr	r3, [pc, #44]	; (29a4 <z_arm_prep_c+0x30>)
    2978:	4a0b      	ldr	r2, [pc, #44]	; (29a8 <z_arm_prep_c+0x34>)
    297a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    297e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2984:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2988:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    298c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2994:	f003 fc1e 	bl	61d4 <z_bss_zero>
	z_data_copy();
    2998:	f004 fb34 	bl	7004 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    299c:	f000 ffe2 	bl	3964 <z_arm_interrupt_init>
	z_cstart();
    29a0:	f003 fc76 	bl	6290 <z_cstart>
    29a4:	e000ed00 	.word	0xe000ed00
    29a8:	00000000 	.word	0x00000000

000029ac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    29ac:	4a0a      	ldr	r2, [pc, #40]	; (29d8 <arch_swap+0x2c>)
    29ae:	6893      	ldr	r3, [r2, #8]
    29b0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    29b4:	4909      	ldr	r1, [pc, #36]	; (29dc <arch_swap+0x30>)
    29b6:	6809      	ldr	r1, [r1, #0]
    29b8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    29bc:	4908      	ldr	r1, [pc, #32]	; (29e0 <arch_swap+0x34>)
    29be:	684b      	ldr	r3, [r1, #4]
    29c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    29c4:	604b      	str	r3, [r1, #4]
    29c6:	2300      	movs	r3, #0
    29c8:	f383 8811 	msr	BASEPRI, r3
    29cc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    29d0:	6893      	ldr	r3, [r2, #8]
}
    29d2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    29d6:	4770      	bx	lr
    29d8:	200013b8 	.word	0x200013b8
    29dc:	0000a39c 	.word	0x0000a39c
    29e0:	e000ed00 	.word	0xe000ed00

000029e4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    29e4:	4913      	ldr	r1, [pc, #76]	; (2a34 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    29e6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    29e8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    29ec:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    29ee:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    29f2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    29f6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    29f8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    29fc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2a00:	4f0d      	ldr	r7, [pc, #52]	; (2a38 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2a02:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2a06:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2a08:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2a0a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2a0c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2a10:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2a12:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2a16:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2a1a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2a1c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2a1e:	f001 f84b 	bl	3ab8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2a22:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2a26:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2a2a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2a2e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2a32:	4770      	bx	lr
    ldr r1, =_kernel
    2a34:	200013b8 	.word	0x200013b8
    ldr v4, =_SCS_ICSR
    2a38:	e000ed04 	.word	0xe000ed04

00002a3c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2a3c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2a40:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2a42:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2a46:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2a4a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2a4c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2a50:	2902      	cmp	r1, #2
    beq _oops
    2a52:	d0ff      	beq.n	2a54 <_oops>

00002a54 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2a54:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2a56:	f005 fd87 	bl	8568 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2a5a:	bd01      	pop	{r0, pc}

00002a5c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2a5c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2a5e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2a62:	490e      	ldr	r1, [pc, #56]	; (2a9c <arch_new_thread+0x40>)
    2a64:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2a68:	f021 0101 	bic.w	r1, r1, #1
    2a6c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2a70:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2a74:	9b01      	ldr	r3, [sp, #4]
    2a76:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2a7a:	9b02      	ldr	r3, [sp, #8]
    2a7c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2a80:	9b03      	ldr	r3, [sp, #12]
    2a82:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2a8a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    2a8e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2a90:	2300      	movs	r3, #0
    2a92:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2a96:	bc10      	pop	{r4}
    2a98:	4770      	bx	lr
    2a9a:	bf00      	nop
    2a9c:	00007c41 	.word	0x00007c41

00002aa0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2aa0:	4b12      	ldr	r3, [pc, #72]	; (2aec <z_check_thread_stack_fail+0x4c>)
    2aa2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    2aa4:	b302      	cbz	r2, 2ae8 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2aa6:	f110 0f16 	cmn.w	r0, #22
    2aaa:	d011      	beq.n	2ad0 <z_check_thread_stack_fail+0x30>
    2aac:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2ab0:	f1a3 0c20 	sub.w	ip, r3, #32
    2ab4:	4584      	cmp	ip, r0
    2ab6:	d805      	bhi.n	2ac4 <z_check_thread_stack_fail+0x24>
    2ab8:	4283      	cmp	r3, r0
    2aba:	d905      	bls.n	2ac8 <z_check_thread_stack_fail+0x28>
    2abc:	428b      	cmp	r3, r1
    2abe:	d805      	bhi.n	2acc <z_check_thread_stack_fail+0x2c>
    2ac0:	2100      	movs	r1, #0
    2ac2:	e00b      	b.n	2adc <z_check_thread_stack_fail+0x3c>
    2ac4:	2100      	movs	r1, #0
    2ac6:	e009      	b.n	2adc <z_check_thread_stack_fail+0x3c>
    2ac8:	2100      	movs	r1, #0
    2aca:	e007      	b.n	2adc <z_check_thread_stack_fail+0x3c>
    2acc:	2101      	movs	r1, #1
    2ace:	e005      	b.n	2adc <z_check_thread_stack_fail+0x3c>
    2ad0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2ad4:	428b      	cmp	r3, r1
    2ad6:	bf94      	ite	ls
    2ad8:	2100      	movls	r1, #0
    2ada:	2101      	movhi	r1, #1
    2adc:	b909      	cbnz	r1, 2ae2 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2ade:	2000      	movs	r0, #0
}
    2ae0:	4770      	bx	lr
		return thread->stack_info.start;
    2ae2:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    2ae6:	4770      	bx	lr
		return 0;
    2ae8:	2000      	movs	r0, #0
    2aea:	4770      	bx	lr
    2aec:	200013b8 	.word	0x200013b8

00002af0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2af0:	b508      	push	{r3, lr}
    2af2:	460d      	mov	r5, r1
    2af4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2af6:	4b08      	ldr	r3, [pc, #32]	; (2b18 <arch_switch_to_main_thread+0x28>)
    2af8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2afa:	f000 ffdd 	bl	3ab8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2afe:	4620      	mov	r0, r4
    2b00:	f385 8809 	msr	PSP, r5
    2b04:	2100      	movs	r1, #0
    2b06:	b663      	cpsie	if
    2b08:	f381 8811 	msr	BASEPRI, r1
    2b0c:	f3bf 8f6f 	isb	sy
    2b10:	2200      	movs	r2, #0
    2b12:	2300      	movs	r3, #0
    2b14:	f005 f894 	bl	7c40 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2b18:	200013b8 	.word	0x200013b8

00002b1c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2b1c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2b1e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2b20:	4a0b      	ldr	r2, [pc, #44]	; (2b50 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2b22:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2b24:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2b26:	bf1e      	ittt	ne
	movne	r1, #0
    2b28:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2b2a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2b2c:	f006 fc05 	blne	933a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2b30:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2b32:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2b36:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2b3a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2b3e:	4905      	ldr	r1, [pc, #20]	; (2b54 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2b40:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2b42:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2b44:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2b46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2b4a:	4903      	ldr	r1, [pc, #12]	; (2b58 <_isr_wrapper+0x3c>)
	bx r1
    2b4c:	4708      	bx	r1
    2b4e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2b50:	200013b8 	.word	0x200013b8
	ldr r1, =_sw_isr_table
    2b54:	0000986c 	.word	0x0000986c
	ldr r1, =z_arm_int_exit
    2b58:	00002b5d 	.word	0x00002b5d

00002b5c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2b5c:	4b04      	ldr	r3, [pc, #16]	; (2b70 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2b5e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2b60:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2b62:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2b64:	d003      	beq.n	2b6e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2b66:	4903      	ldr	r1, [pc, #12]	; (2b74 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2b6c:	600a      	str	r2, [r1, #0]

00002b6e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2b6e:	4770      	bx	lr
	ldr r3, =_kernel
    2b70:	200013b8 	.word	0x200013b8
	ldr r1, =_SCS_ICSR
    2b74:	e000ed04 	.word	0xe000ed04

00002b78 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b7c:	b0aa      	sub	sp, #168	; 0xa8
    2b7e:	af00      	add	r7, sp, #0
    2b80:	4605      	mov	r5, r0
    2b82:	460e      	mov	r6, r1
    2b84:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2b86:	4bca      	ldr	r3, [pc, #808]	; (2eb0 <bus_fault+0x338>)
    2b88:	617b      	str	r3, [r7, #20]
    2b8a:	2300      	movs	r3, #0
    2b8c:	2202      	movs	r2, #2
    2b8e:	f362 0307 	bfi	r3, r2, #0, #8
    2b92:	f36f 230f 	bfc	r3, #8, #8
    2b96:	f36f 4317 	bfc	r3, #16, #8
    2b9a:	f36f 631f 	bfc	r3, #24, #8
    2b9e:	613b      	str	r3, [r7, #16]
    2ba0:	2100      	movs	r1, #0
    2ba2:	f36f 0100 	bfc	r1, #0, #1
    2ba6:	f36f 0141 	bfc	r1, #1, #1
    2baa:	f36f 0182 	bfc	r1, #2, #1
    2bae:	f36f 01c5 	bfc	r1, #3, #3
    2bb2:	2301      	movs	r3, #1
    2bb4:	f363 1188 	bfi	r1, r3, #6, #3
    2bb8:	2308      	movs	r3, #8
    2bba:	f363 2152 	bfi	r1, r3, #9, #10
    2bbe:	f36f 41de 	bfc	r1, #19, #12
    2bc2:	f36f 71df 	bfc	r1, #31, #1
    2bc6:	2300      	movs	r3, #0
    2bc8:	f107 0210 	add.w	r2, r7, #16
    2bcc:	48b9      	ldr	r0, [pc, #740]	; (2eb4 <bus_fault+0x33c>)
    2bce:	f005 fc2a 	bl	8426 <z_impl_z_log_msg2_static_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2bd2:	4bb9      	ldr	r3, [pc, #740]	; (2eb8 <bus_fault+0x340>)
    2bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bd6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    2bda:	d12a      	bne.n	2c32 <bus_fault+0xba>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2bdc:	4bb6      	ldr	r3, [pc, #728]	; (2eb8 <bus_fault+0x340>)
    2bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2be0:	f413 6f00 	tst.w	r3, #2048	; 0x800
    2be4:	d14c      	bne.n	2c80 <bus_fault+0x108>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2be6:	4bb4      	ldr	r3, [pc, #720]	; (2eb8 <bus_fault+0x340>)
    2be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bea:	f413 7f00 	tst.w	r3, #512	; 0x200
    2bee:	d16e      	bne.n	2cce <bus_fault+0x156>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2bf0:	4bb1      	ldr	r3, [pc, #708]	; (2eb8 <bus_fault+0x340>)
    2bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bf4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2bf8:	f040 80e0 	bne.w	2dbc <bus_fault+0x244>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2bfc:	4bae      	ldr	r3, [pc, #696]	; (2eb8 <bus_fault+0x340>)
    2bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c00:	f413 7f80 	tst.w	r3, #256	; 0x100
    2c04:	f040 8101 	bne.w	2e0a <bus_fault+0x292>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2c08:	4bab      	ldr	r3, [pc, #684]	; (2eb8 <bus_fault+0x340>)
    2c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c0c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2c10:	f040 8124 	bne.w	2e5c <bus_fault+0x2e4>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2c14:	4aa8      	ldr	r2, [pc, #672]	; (2eb8 <bus_fault+0x340>)
    2c16:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2c18:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2c1c:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2c1e:	2101      	movs	r1, #1
    2c20:	4628      	mov	r0, r5
    2c22:	f005 fcb3 	bl	858c <memory_fault_recoverable>
    2c26:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2c28:	2000      	movs	r0, #0
    2c2a:	37a8      	adds	r7, #168	; 0xa8
    2c2c:	46bd      	mov	sp, r7
    2c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    2c32:	4ba2      	ldr	r3, [pc, #648]	; (2ebc <bus_fault+0x344>)
    2c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c36:	2300      	movs	r3, #0
    2c38:	2202      	movs	r2, #2
    2c3a:	f362 0307 	bfi	r3, r2, #0, #8
    2c3e:	f36f 230f 	bfc	r3, #8, #8
    2c42:	f36f 4317 	bfc	r3, #16, #8
    2c46:	f36f 631f 	bfc	r3, #24, #8
    2c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    2c4c:	2100      	movs	r1, #0
    2c4e:	f36f 0100 	bfc	r1, #0, #1
    2c52:	f36f 0141 	bfc	r1, #1, #1
    2c56:	f36f 0182 	bfc	r1, #2, #1
    2c5a:	f36f 01c5 	bfc	r1, #3, #3
    2c5e:	2301      	movs	r3, #1
    2c60:	f363 1188 	bfi	r1, r3, #6, #3
    2c64:	2308      	movs	r3, #8
    2c66:	f363 2152 	bfi	r1, r3, #9, #10
    2c6a:	f36f 41de 	bfc	r1, #19, #12
    2c6e:	f36f 71df 	bfc	r1, #31, #1
    2c72:	2300      	movs	r3, #0
    2c74:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2c78:	488e      	ldr	r0, [pc, #568]	; (2eb4 <bus_fault+0x33c>)
    2c7a:	f005 fbd4 	bl	8426 <z_impl_z_log_msg2_static_create>
    2c7e:	e7ad      	b.n	2bdc <bus_fault+0x64>
		PR_FAULT_INFO("  Unstacking error");
    2c80:	4b8f      	ldr	r3, [pc, #572]	; (2ec0 <bus_fault+0x348>)
    2c82:	647b      	str	r3, [r7, #68]	; 0x44
    2c84:	2300      	movs	r3, #0
    2c86:	2202      	movs	r2, #2
    2c88:	f362 0307 	bfi	r3, r2, #0, #8
    2c8c:	f36f 230f 	bfc	r3, #8, #8
    2c90:	f36f 4317 	bfc	r3, #16, #8
    2c94:	f36f 631f 	bfc	r3, #24, #8
    2c98:	643b      	str	r3, [r7, #64]	; 0x40
    2c9a:	2100      	movs	r1, #0
    2c9c:	f36f 0100 	bfc	r1, #0, #1
    2ca0:	f36f 0141 	bfc	r1, #1, #1
    2ca4:	f36f 0182 	bfc	r1, #2, #1
    2ca8:	f36f 01c5 	bfc	r1, #3, #3
    2cac:	2301      	movs	r3, #1
    2cae:	f363 1188 	bfi	r1, r3, #6, #3
    2cb2:	2308      	movs	r3, #8
    2cb4:	f363 2152 	bfi	r1, r3, #9, #10
    2cb8:	f36f 41de 	bfc	r1, #19, #12
    2cbc:	f36f 71df 	bfc	r1, #31, #1
    2cc0:	2300      	movs	r3, #0
    2cc2:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2cc6:	487b      	ldr	r0, [pc, #492]	; (2eb4 <bus_fault+0x33c>)
    2cc8:	f005 fbad 	bl	8426 <z_impl_z_log_msg2_static_create>
    2ccc:	e78b      	b.n	2be6 <bus_fault+0x6e>
		PR_FAULT_INFO("  Precise data bus error");
    2cce:	4b7d      	ldr	r3, [pc, #500]	; (2ec4 <bus_fault+0x34c>)
    2cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    2cd2:	2300      	movs	r3, #0
    2cd4:	2202      	movs	r2, #2
    2cd6:	f362 0307 	bfi	r3, r2, #0, #8
    2cda:	f36f 230f 	bfc	r3, #8, #8
    2cde:	f36f 4317 	bfc	r3, #16, #8
    2ce2:	f36f 631f 	bfc	r3, #24, #8
    2ce6:	65bb      	str	r3, [r7, #88]	; 0x58
    2ce8:	2100      	movs	r1, #0
    2cea:	f36f 0100 	bfc	r1, #0, #1
    2cee:	f36f 0141 	bfc	r1, #1, #1
    2cf2:	f36f 0182 	bfc	r1, #2, #1
    2cf6:	f36f 01c5 	bfc	r1, #3, #3
    2cfa:	2301      	movs	r3, #1
    2cfc:	f363 1188 	bfi	r1, r3, #6, #3
    2d00:	2308      	movs	r3, #8
    2d02:	f363 2152 	bfi	r1, r3, #9, #10
    2d06:	f36f 41de 	bfc	r1, #19, #12
    2d0a:	f36f 71df 	bfc	r1, #31, #1
    2d0e:	2300      	movs	r3, #0
    2d10:	f107 0258 	add.w	r2, r7, #88	; 0x58
    2d14:	4867      	ldr	r0, [pc, #412]	; (2eb4 <bus_fault+0x33c>)
    2d16:	f005 fb86 	bl	8426 <z_impl_z_log_msg2_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    2d1a:	4b67      	ldr	r3, [pc, #412]	; (2eb8 <bus_fault+0x340>)
    2d1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d20:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2d24:	f43f af64 	beq.w	2bf0 <bus_fault+0x78>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2d28:	46e8      	mov	r8, sp
    2d2a:	b088      	sub	sp, #32
    2d2c:	466b      	mov	r3, sp
    2d2e:	f113 0210 	adds.w	r2, r3, #16
    2d32:	d03d      	beq.n	2db0 <bus_fault+0x238>
    2d34:	210c      	movs	r1, #12
    2d36:	b12a      	cbz	r2, 2d44 <bus_fault+0x1cc>
    2d38:	2904      	cmp	r1, #4
    2d3a:	dd03      	ble.n	2d44 <bus_fault+0x1cc>
    2d3c:	f8df c188 	ldr.w	ip, [pc, #392]	; 2ec8 <bus_fault+0x350>
    2d40:	f8c3 c014 	str.w	ip, [r3, #20]
    2d44:	b112      	cbz	r2, 2d4c <bus_fault+0x1d4>
    2d46:	2908      	cmp	r1, #8
    2d48:	dd00      	ble.n	2d4c <bus_fault+0x1d4>
    2d4a:	6198      	str	r0, [r3, #24]
    2d4c:	290b      	cmp	r1, #11
    2d4e:	dd32      	ble.n	2db6 <bus_fault+0x23e>
    2d50:	200c      	movs	r0, #12
    2d52:	b15a      	cbz	r2, 2d6c <bus_fault+0x1f4>
    2d54:	2100      	movs	r1, #0
    2d56:	f04f 0c03 	mov.w	ip, #3
    2d5a:	f36c 0107 	bfi	r1, ip, #0, #8
    2d5e:	f36f 210f 	bfc	r1, #8, #8
    2d62:	f36f 4117 	bfc	r1, #16, #8
    2d66:	f36f 611f 	bfc	r1, #24, #8
    2d6a:	6119      	str	r1, [r3, #16]
    2d6c:	2100      	movs	r1, #0
    2d6e:	f36f 0100 	bfc	r1, #0, #1
    2d72:	f36f 0141 	bfc	r1, #1, #1
    2d76:	f36f 0182 	bfc	r1, #2, #1
    2d7a:	f36f 01c5 	bfc	r1, #3, #3
    2d7e:	2301      	movs	r3, #1
    2d80:	f363 1188 	bfi	r1, r3, #6, #3
    2d84:	f400 737b 	and.w	r3, r0, #1004	; 0x3ec
    2d88:	f363 2152 	bfi	r1, r3, #9, #10
    2d8c:	f36f 41de 	bfc	r1, #19, #12
    2d90:	f36f 71df 	bfc	r1, #31, #1
    2d94:	2300      	movs	r3, #0
    2d96:	4847      	ldr	r0, [pc, #284]	; (2eb4 <bus_fault+0x33c>)
    2d98:	f005 fb45 	bl	8426 <z_impl_z_log_msg2_static_create>
    2d9c:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2d9e:	2e00      	cmp	r6, #0
    2da0:	f43f af26 	beq.w	2bf0 <bus_fault+0x78>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2da4:	4a44      	ldr	r2, [pc, #272]	; (2eb8 <bus_fault+0x340>)
    2da6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2dac:	6293      	str	r3, [r2, #40]	; 0x28
    2dae:	e71f      	b.n	2bf0 <bus_fault+0x78>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2db4:	e7bf      	b.n	2d36 <bus_fault+0x1be>
    2db6:	f06f 001b 	mvn.w	r0, #27
    2dba:	e7ca      	b.n	2d52 <bus_fault+0x1da>
		PR_FAULT_INFO("  Imprecise data bus error");
    2dbc:	4b43      	ldr	r3, [pc, #268]	; (2ecc <bus_fault+0x354>)
    2dbe:	677b      	str	r3, [r7, #116]	; 0x74
    2dc0:	2300      	movs	r3, #0
    2dc2:	2202      	movs	r2, #2
    2dc4:	f362 0307 	bfi	r3, r2, #0, #8
    2dc8:	f36f 230f 	bfc	r3, #8, #8
    2dcc:	f36f 4317 	bfc	r3, #16, #8
    2dd0:	f36f 631f 	bfc	r3, #24, #8
    2dd4:	673b      	str	r3, [r7, #112]	; 0x70
    2dd6:	2100      	movs	r1, #0
    2dd8:	f36f 0100 	bfc	r1, #0, #1
    2ddc:	f36f 0141 	bfc	r1, #1, #1
    2de0:	f36f 0182 	bfc	r1, #2, #1
    2de4:	f36f 01c5 	bfc	r1, #3, #3
    2de8:	2301      	movs	r3, #1
    2dea:	f363 1188 	bfi	r1, r3, #6, #3
    2dee:	2308      	movs	r3, #8
    2df0:	f363 2152 	bfi	r1, r3, #9, #10
    2df4:	f36f 41de 	bfc	r1, #19, #12
    2df8:	f36f 71df 	bfc	r1, #31, #1
    2dfc:	2300      	movs	r3, #0
    2dfe:	f107 0270 	add.w	r2, r7, #112	; 0x70
    2e02:	482c      	ldr	r0, [pc, #176]	; (2eb4 <bus_fault+0x33c>)
    2e04:	f005 fb0f 	bl	8426 <z_impl_z_log_msg2_static_create>
    2e08:	e6f8      	b.n	2bfc <bus_fault+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2e0a:	4b31      	ldr	r3, [pc, #196]	; (2ed0 <bus_fault+0x358>)
    2e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    2e10:	2300      	movs	r3, #0
    2e12:	2202      	movs	r2, #2
    2e14:	f362 0307 	bfi	r3, r2, #0, #8
    2e18:	f36f 230f 	bfc	r3, #8, #8
    2e1c:	f36f 4317 	bfc	r3, #16, #8
    2e20:	f36f 631f 	bfc	r3, #24, #8
    2e24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    2e28:	2100      	movs	r1, #0
    2e2a:	f36f 0100 	bfc	r1, #0, #1
    2e2e:	f36f 0141 	bfc	r1, #1, #1
    2e32:	f36f 0182 	bfc	r1, #2, #1
    2e36:	f36f 01c5 	bfc	r1, #3, #3
    2e3a:	2301      	movs	r3, #1
    2e3c:	f363 1188 	bfi	r1, r3, #6, #3
    2e40:	2308      	movs	r3, #8
    2e42:	f363 2152 	bfi	r1, r3, #9, #10
    2e46:	f36f 41de 	bfc	r1, #19, #12
    2e4a:	f36f 71df 	bfc	r1, #31, #1
    2e4e:	2300      	movs	r3, #0
    2e50:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
    2e54:	4817      	ldr	r0, [pc, #92]	; (2eb4 <bus_fault+0x33c>)
    2e56:	f005 fae6 	bl	8426 <z_impl_z_log_msg2_static_create>
    2e5a:	e6db      	b.n	2c14 <bus_fault+0x9c>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2e5c:	4b1d      	ldr	r3, [pc, #116]	; (2ed4 <bus_fault+0x35c>)
    2e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    2e62:	2300      	movs	r3, #0
    2e64:	2202      	movs	r2, #2
    2e66:	f362 0307 	bfi	r3, r2, #0, #8
    2e6a:	f36f 230f 	bfc	r3, #8, #8
    2e6e:	f36f 4317 	bfc	r3, #16, #8
    2e72:	f36f 631f 	bfc	r3, #24, #8
    2e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    2e7a:	2100      	movs	r1, #0
    2e7c:	f36f 0100 	bfc	r1, #0, #1
    2e80:	f36f 0141 	bfc	r1, #1, #1
    2e84:	f36f 0182 	bfc	r1, #2, #1
    2e88:	f36f 01c5 	bfc	r1, #3, #3
    2e8c:	2301      	movs	r3, #1
    2e8e:	f363 1188 	bfi	r1, r3, #6, #3
    2e92:	2308      	movs	r3, #8
    2e94:	f363 2152 	bfi	r1, r3, #9, #10
    2e98:	f36f 41de 	bfc	r1, #19, #12
    2e9c:	f36f 71df 	bfc	r1, #31, #1
    2ea0:	2300      	movs	r3, #0
    2ea2:	f107 0288 	add.w	r2, r7, #136	; 0x88
    2ea6:	4803      	ldr	r0, [pc, #12]	; (2eb4 <bus_fault+0x33c>)
    2ea8:	f005 fabd 	bl	8426 <z_impl_z_log_msg2_static_create>
    2eac:	e6b2      	b.n	2c14 <bus_fault+0x9c>
    2eae:	bf00      	nop
    2eb0:	00009de8 	.word	0x00009de8
    2eb4:	00009a1c 	.word	0x00009a1c
    2eb8:	e000ed00 	.word	0xe000ed00
    2ebc:	00009e00 	.word	0x00009e00
    2ec0:	00009e14 	.word	0x00009e14
    2ec4:	00009e28 	.word	0x00009e28
    2ec8:	00009e44 	.word	0x00009e44
    2ecc:	00009e5c 	.word	0x00009e5c
    2ed0:	00009e78 	.word	0x00009e78
    2ed4:	00009e90 	.word	0x00009e90

00002ed8 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    2ed8:	b500      	push	{lr}
    2eda:	b0ab      	sub	sp, #172	; 0xac
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2edc:	4b9a      	ldr	r3, [pc, #616]	; (3148 <usage_fault+0x270>)
    2ede:	9305      	str	r3, [sp, #20]
    2ee0:	2300      	movs	r3, #0
    2ee2:	2202      	movs	r2, #2
    2ee4:	f362 0307 	bfi	r3, r2, #0, #8
    2ee8:	f36f 230f 	bfc	r3, #8, #8
    2eec:	f36f 4317 	bfc	r3, #16, #8
    2ef0:	f36f 631f 	bfc	r3, #24, #8
    2ef4:	9304      	str	r3, [sp, #16]
    2ef6:	2100      	movs	r1, #0
    2ef8:	f36f 0100 	bfc	r1, #0, #1
    2efc:	f36f 0141 	bfc	r1, #1, #1
    2f00:	f36f 0182 	bfc	r1, #2, #1
    2f04:	f36f 01c5 	bfc	r1, #3, #3
    2f08:	2301      	movs	r3, #1
    2f0a:	f363 1188 	bfi	r1, r3, #6, #3
    2f0e:	2308      	movs	r3, #8
    2f10:	f363 2152 	bfi	r1, r3, #9, #10
    2f14:	f36f 41de 	bfc	r1, #19, #12
    2f18:	f36f 71df 	bfc	r1, #31, #1
    2f1c:	2300      	movs	r3, #0
    2f1e:	aa04      	add	r2, sp, #16
    2f20:	488a      	ldr	r0, [pc, #552]	; (314c <usage_fault+0x274>)
    2f22:	f005 fa80 	bl	8426 <z_impl_z_log_msg2_static_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2f26:	4b8a      	ldr	r3, [pc, #552]	; (3150 <usage_fault+0x278>)
    2f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    2f2e:	d126      	bne.n	2f7e <usage_fault+0xa6>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2f30:	4b87      	ldr	r3, [pc, #540]	; (3150 <usage_fault+0x278>)
    2f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    2f38:	d147      	bne.n	2fca <usage_fault+0xf2>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2f3a:	4b85      	ldr	r3, [pc, #532]	; (3150 <usage_fault+0x278>)
    2f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f3e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    2f42:	d168      	bne.n	3016 <usage_fault+0x13e>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2f44:	4b82      	ldr	r3, [pc, #520]	; (3150 <usage_fault+0x278>)
    2f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    2f4c:	f040 8089 	bne.w	3062 <usage_fault+0x18a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2f50:	4b7f      	ldr	r3, [pc, #508]	; (3150 <usage_fault+0x278>)
    2f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f54:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    2f58:	f040 80a9 	bne.w	30ae <usage_fault+0x1d6>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2f5c:	4b7c      	ldr	r3, [pc, #496]	; (3150 <usage_fault+0x278>)
    2f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2f64:	f040 80c9 	bne.w	30fa <usage_fault+0x222>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2f68:	4a79      	ldr	r2, [pc, #484]	; (3150 <usage_fault+0x278>)
    2f6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f6c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2f70:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2f74:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2f76:	2000      	movs	r0, #0
    2f78:	b02b      	add	sp, #172	; 0xac
    2f7a:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    2f7e:	4b75      	ldr	r3, [pc, #468]	; (3154 <usage_fault+0x27c>)
    2f80:	930b      	str	r3, [sp, #44]	; 0x2c
    2f82:	2300      	movs	r3, #0
    2f84:	2202      	movs	r2, #2
    2f86:	f362 0307 	bfi	r3, r2, #0, #8
    2f8a:	f36f 230f 	bfc	r3, #8, #8
    2f8e:	f36f 4317 	bfc	r3, #16, #8
    2f92:	f36f 631f 	bfc	r3, #24, #8
    2f96:	930a      	str	r3, [sp, #40]	; 0x28
    2f98:	2100      	movs	r1, #0
    2f9a:	f36f 0100 	bfc	r1, #0, #1
    2f9e:	f36f 0141 	bfc	r1, #1, #1
    2fa2:	f36f 0182 	bfc	r1, #2, #1
    2fa6:	f36f 01c5 	bfc	r1, #3, #3
    2faa:	2301      	movs	r3, #1
    2fac:	f363 1188 	bfi	r1, r3, #6, #3
    2fb0:	2308      	movs	r3, #8
    2fb2:	f363 2152 	bfi	r1, r3, #9, #10
    2fb6:	f36f 41de 	bfc	r1, #19, #12
    2fba:	f36f 71df 	bfc	r1, #31, #1
    2fbe:	2300      	movs	r3, #0
    2fc0:	aa0a      	add	r2, sp, #40	; 0x28
    2fc2:	4862      	ldr	r0, [pc, #392]	; (314c <usage_fault+0x274>)
    2fc4:	f005 fa2f 	bl	8426 <z_impl_z_log_msg2_static_create>
    2fc8:	e7b2      	b.n	2f30 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    2fca:	4b63      	ldr	r3, [pc, #396]	; (3158 <usage_fault+0x280>)
    2fcc:	9311      	str	r3, [sp, #68]	; 0x44
    2fce:	2300      	movs	r3, #0
    2fd0:	2202      	movs	r2, #2
    2fd2:	f362 0307 	bfi	r3, r2, #0, #8
    2fd6:	f36f 230f 	bfc	r3, #8, #8
    2fda:	f36f 4317 	bfc	r3, #16, #8
    2fde:	f36f 631f 	bfc	r3, #24, #8
    2fe2:	9310      	str	r3, [sp, #64]	; 0x40
    2fe4:	2100      	movs	r1, #0
    2fe6:	f36f 0100 	bfc	r1, #0, #1
    2fea:	f36f 0141 	bfc	r1, #1, #1
    2fee:	f36f 0182 	bfc	r1, #2, #1
    2ff2:	f36f 01c5 	bfc	r1, #3, #3
    2ff6:	2301      	movs	r3, #1
    2ff8:	f363 1188 	bfi	r1, r3, #6, #3
    2ffc:	2308      	movs	r3, #8
    2ffe:	f363 2152 	bfi	r1, r3, #9, #10
    3002:	f36f 41de 	bfc	r1, #19, #12
    3006:	f36f 71df 	bfc	r1, #31, #1
    300a:	2300      	movs	r3, #0
    300c:	aa10      	add	r2, sp, #64	; 0x40
    300e:	484f      	ldr	r0, [pc, #316]	; (314c <usage_fault+0x274>)
    3010:	f005 fa09 	bl	8426 <z_impl_z_log_msg2_static_create>
    3014:	e791      	b.n	2f3a <usage_fault+0x62>
		PR_FAULT_INFO("  No coprocessor instructions");
    3016:	4b51      	ldr	r3, [pc, #324]	; (315c <usage_fault+0x284>)
    3018:	9317      	str	r3, [sp, #92]	; 0x5c
    301a:	2300      	movs	r3, #0
    301c:	2202      	movs	r2, #2
    301e:	f362 0307 	bfi	r3, r2, #0, #8
    3022:	f36f 230f 	bfc	r3, #8, #8
    3026:	f36f 4317 	bfc	r3, #16, #8
    302a:	f36f 631f 	bfc	r3, #24, #8
    302e:	9316      	str	r3, [sp, #88]	; 0x58
    3030:	2100      	movs	r1, #0
    3032:	f36f 0100 	bfc	r1, #0, #1
    3036:	f36f 0141 	bfc	r1, #1, #1
    303a:	f36f 0182 	bfc	r1, #2, #1
    303e:	f36f 01c5 	bfc	r1, #3, #3
    3042:	2301      	movs	r3, #1
    3044:	f363 1188 	bfi	r1, r3, #6, #3
    3048:	2308      	movs	r3, #8
    304a:	f363 2152 	bfi	r1, r3, #9, #10
    304e:	f36f 41de 	bfc	r1, #19, #12
    3052:	f36f 71df 	bfc	r1, #31, #1
    3056:	2300      	movs	r3, #0
    3058:	aa16      	add	r2, sp, #88	; 0x58
    305a:	483c      	ldr	r0, [pc, #240]	; (314c <usage_fault+0x274>)
    305c:	f005 f9e3 	bl	8426 <z_impl_z_log_msg2_static_create>
    3060:	e770      	b.n	2f44 <usage_fault+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3062:	4b3f      	ldr	r3, [pc, #252]	; (3160 <usage_fault+0x288>)
    3064:	931d      	str	r3, [sp, #116]	; 0x74
    3066:	2300      	movs	r3, #0
    3068:	2202      	movs	r2, #2
    306a:	f362 0307 	bfi	r3, r2, #0, #8
    306e:	f36f 230f 	bfc	r3, #8, #8
    3072:	f36f 4317 	bfc	r3, #16, #8
    3076:	f36f 631f 	bfc	r3, #24, #8
    307a:	931c      	str	r3, [sp, #112]	; 0x70
    307c:	2100      	movs	r1, #0
    307e:	f36f 0100 	bfc	r1, #0, #1
    3082:	f36f 0141 	bfc	r1, #1, #1
    3086:	f36f 0182 	bfc	r1, #2, #1
    308a:	f36f 01c5 	bfc	r1, #3, #3
    308e:	2301      	movs	r3, #1
    3090:	f363 1188 	bfi	r1, r3, #6, #3
    3094:	2308      	movs	r3, #8
    3096:	f363 2152 	bfi	r1, r3, #9, #10
    309a:	f36f 41de 	bfc	r1, #19, #12
    309e:	f36f 71df 	bfc	r1, #31, #1
    30a2:	2300      	movs	r3, #0
    30a4:	aa1c      	add	r2, sp, #112	; 0x70
    30a6:	4829      	ldr	r0, [pc, #164]	; (314c <usage_fault+0x274>)
    30a8:	f005 f9bd 	bl	8426 <z_impl_z_log_msg2_static_create>
    30ac:	e750      	b.n	2f50 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    30ae:	4b2d      	ldr	r3, [pc, #180]	; (3164 <usage_fault+0x28c>)
    30b0:	9323      	str	r3, [sp, #140]	; 0x8c
    30b2:	2300      	movs	r3, #0
    30b4:	2202      	movs	r2, #2
    30b6:	f362 0307 	bfi	r3, r2, #0, #8
    30ba:	f36f 230f 	bfc	r3, #8, #8
    30be:	f36f 4317 	bfc	r3, #16, #8
    30c2:	f36f 631f 	bfc	r3, #24, #8
    30c6:	9322      	str	r3, [sp, #136]	; 0x88
    30c8:	2100      	movs	r1, #0
    30ca:	f36f 0100 	bfc	r1, #0, #1
    30ce:	f36f 0141 	bfc	r1, #1, #1
    30d2:	f36f 0182 	bfc	r1, #2, #1
    30d6:	f36f 01c5 	bfc	r1, #3, #3
    30da:	2301      	movs	r3, #1
    30dc:	f363 1188 	bfi	r1, r3, #6, #3
    30e0:	2308      	movs	r3, #8
    30e2:	f363 2152 	bfi	r1, r3, #9, #10
    30e6:	f36f 41de 	bfc	r1, #19, #12
    30ea:	f36f 71df 	bfc	r1, #31, #1
    30ee:	2300      	movs	r3, #0
    30f0:	aa22      	add	r2, sp, #136	; 0x88
    30f2:	4816      	ldr	r0, [pc, #88]	; (314c <usage_fault+0x274>)
    30f4:	f005 f997 	bl	8426 <z_impl_z_log_msg2_static_create>
    30f8:	e730      	b.n	2f5c <usage_fault+0x84>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    30fa:	4b1b      	ldr	r3, [pc, #108]	; (3168 <usage_fault+0x290>)
    30fc:	9329      	str	r3, [sp, #164]	; 0xa4
    30fe:	2300      	movs	r3, #0
    3100:	2202      	movs	r2, #2
    3102:	f362 0307 	bfi	r3, r2, #0, #8
    3106:	f36f 230f 	bfc	r3, #8, #8
    310a:	f36f 4317 	bfc	r3, #16, #8
    310e:	f36f 631f 	bfc	r3, #24, #8
    3112:	9328      	str	r3, [sp, #160]	; 0xa0
    3114:	2100      	movs	r1, #0
    3116:	f36f 0100 	bfc	r1, #0, #1
    311a:	f36f 0141 	bfc	r1, #1, #1
    311e:	f36f 0182 	bfc	r1, #2, #1
    3122:	f36f 01c5 	bfc	r1, #3, #3
    3126:	2301      	movs	r3, #1
    3128:	f363 1188 	bfi	r1, r3, #6, #3
    312c:	2308      	movs	r3, #8
    312e:	f363 2152 	bfi	r1, r3, #9, #10
    3132:	f36f 41de 	bfc	r1, #19, #12
    3136:	f36f 71df 	bfc	r1, #31, #1
    313a:	2300      	movs	r3, #0
    313c:	aa28      	add	r2, sp, #160	; 0xa0
    313e:	4803      	ldr	r0, [pc, #12]	; (314c <usage_fault+0x274>)
    3140:	f005 f971 	bl	8426 <z_impl_z_log_msg2_static_create>
    3144:	e710      	b.n	2f68 <usage_fault+0x90>
    3146:	bf00      	nop
    3148:	00009ec0 	.word	0x00009ec0
    314c:	00009a1c 	.word	0x00009a1c
    3150:	e000ed00 	.word	0xe000ed00
    3154:	00009ed8 	.word	0x00009ed8
    3158:	00009eec 	.word	0x00009eec
    315c:	00009f08 	.word	0x00009f08
    3160:	00009f28 	.word	0x00009f28
    3164:	00009f50 	.word	0x00009f50
    3168:	00009f6c 	.word	0x00009f6c

0000316c <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    316c:	b500      	push	{lr}
    316e:	b087      	sub	sp, #28
	*recoverable = false;
    3170:	2300      	movs	r3, #0
    3172:	700b      	strb	r3, [r1, #0]

	PR_FAULT_INFO(
    3174:	4a13      	ldr	r2, [pc, #76]	; (31c4 <debug_monitor+0x58>)
    3176:	9205      	str	r2, [sp, #20]
    3178:	461a      	mov	r2, r3
    317a:	2102      	movs	r1, #2
    317c:	f361 0207 	bfi	r2, r1, #0, #8
    3180:	f363 220f 	bfi	r2, r3, #8, #8
    3184:	f363 4217 	bfi	r2, r3, #16, #8
    3188:	f363 621f 	bfi	r2, r3, #24, #8
    318c:	9204      	str	r2, [sp, #16]
    318e:	4619      	mov	r1, r3
    3190:	f363 0100 	bfi	r1, r3, #0, #1
    3194:	f363 0141 	bfi	r1, r3, #1, #1
    3198:	f363 0182 	bfi	r1, r3, #2, #1
    319c:	f363 01c5 	bfi	r1, r3, #3, #3
    31a0:	2201      	movs	r2, #1
    31a2:	f362 1188 	bfi	r1, r2, #6, #3
    31a6:	2208      	movs	r2, #8
    31a8:	f362 2152 	bfi	r1, r2, #9, #10
    31ac:	f363 41de 	bfi	r1, r3, #19, #12
    31b0:	f363 71df 	bfi	r1, r3, #31, #1
    31b4:	aa04      	add	r2, sp, #16
    31b6:	4804      	ldr	r0, [pc, #16]	; (31c8 <debug_monitor+0x5c>)
    31b8:	f005 f935 	bl	8426 <z_impl_z_log_msg2_static_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    31bc:	b007      	add	sp, #28
    31be:	f85d fb04 	ldr.w	pc, [sp], #4
    31c2:	bf00      	nop
    31c4:	00009f98 	.word	0x00009f98
    31c8:	00009a1c 	.word	0x00009a1c

000031cc <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    31cc:	b590      	push	{r4, r7, lr}
    31ce:	b083      	sub	sp, #12
    31d0:	af00      	add	r7, sp, #0
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    31d2:	290f      	cmp	r1, #15
    31d4:	dc4f      	bgt.n	3276 <reserved_exception+0xaa>
    31d6:	4c31      	ldr	r4, [pc, #196]	; (329c <reserved_exception+0xd0>)
    31d8:	3910      	subs	r1, #16
    31da:	2302      	movs	r3, #2
    31dc:	713b      	strb	r3, [r7, #4]
    31de:	b08a      	sub	sp, #40	; 0x28
    31e0:	466b      	mov	r3, sp
    31e2:	f113 0210 	adds.w	r2, r3, #16
    31e6:	d048      	beq.n	327a <reserved_exception+0xae>
    31e8:	f04f 0c11 	mov.w	ip, #17
    31ec:	b122      	cbz	r2, 31f8 <reserved_exception+0x2c>
    31ee:	f1bc 0f04 	cmp.w	ip, #4
    31f2:	dd01      	ble.n	31f8 <reserved_exception+0x2c>
    31f4:	482a      	ldr	r0, [pc, #168]	; (32a0 <reserved_exception+0xd4>)
    31f6:	6158      	str	r0, [r3, #20]
    31f8:	2002      	movs	r0, #2
    31fa:	7138      	strb	r0, [r7, #4]
    31fc:	b11a      	cbz	r2, 3206 <reserved_exception+0x3a>
    31fe:	f1bc 0f08 	cmp.w	ip, #8
    3202:	dd00      	ble.n	3206 <reserved_exception+0x3a>
    3204:	619c      	str	r4, [r3, #24]
    3206:	b11a      	cbz	r2, 3210 <reserved_exception+0x44>
    3208:	f1bc 0f0c 	cmp.w	ip, #12
    320c:	dd00      	ble.n	3210 <reserved_exception+0x44>
    320e:	61d9      	str	r1, [r3, #28]
    3210:	b11a      	cbz	r2, 321a <reserved_exception+0x4e>
    3212:	f103 0120 	add.w	r1, r3, #32
    3216:	2000      	movs	r0, #0
    3218:	b390      	cbz	r0, 3280 <reserved_exception+0xb4>
    321a:	f1bc 0f10 	cmp.w	ip, #16
    321e:	dd39      	ble.n	3294 <reserved_exception+0xc8>
    3220:	2011      	movs	r0, #17
    3222:	b16a      	cbz	r2, 3240 <reserved_exception+0x74>
    3224:	2100      	movs	r1, #0
    3226:	f04f 0c04 	mov.w	ip, #4
    322a:	f36c 0107 	bfi	r1, ip, #0, #8
    322e:	f36f 210f 	bfc	r1, #8, #8
    3232:	f36f 4117 	bfc	r1, #16, #8
    3236:	f04f 0c01 	mov.w	ip, #1
    323a:	f36c 611f 	bfi	r1, ip, #24, #8
    323e:	6119      	str	r1, [r3, #16]
    3240:	2100      	movs	r1, #0
    3242:	f36f 0100 	bfc	r1, #0, #1
    3246:	f36f 0141 	bfc	r1, #1, #1
    324a:	f36f 0182 	bfc	r1, #2, #1
    324e:	f36f 01c5 	bfc	r1, #3, #3
    3252:	2301      	movs	r3, #1
    3254:	f363 1188 	bfi	r1, r3, #6, #3
    3258:	f3c0 0309 	ubfx	r3, r0, #0, #10
    325c:	f363 2152 	bfi	r1, r3, #9, #10
    3260:	f36f 41de 	bfc	r1, #19, #12
    3264:	f36f 71df 	bfc	r1, #31, #1
    3268:	2300      	movs	r3, #0
    326a:	480e      	ldr	r0, [pc, #56]	; (32a4 <reserved_exception+0xd8>)
    326c:	f005 f8db 	bl	8426 <z_impl_z_log_msg2_static_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    3270:	370c      	adds	r7, #12
    3272:	46bd      	mov	sp, r7
    3274:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    3276:	4c0c      	ldr	r4, [pc, #48]	; (32a8 <reserved_exception+0xdc>)
    3278:	e7ae      	b.n	31d8 <reserved_exception+0xc>
    327a:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    327e:	e7b5      	b.n	31ec <reserved_exception+0x20>
    3280:	f107 0408 	add.w	r4, r7, #8
    3284:	eb04 0e00 	add.w	lr, r4, r0
    3288:	f81e ec04 	ldrb.w	lr, [lr, #-4]
    328c:	f801 eb01 	strb.w	lr, [r1], #1
    3290:	3001      	adds	r0, #1
    3292:	e7c1      	b.n	3218 <reserved_exception+0x4c>
    3294:	f06f 001b 	mvn.w	r0, #27
    3298:	e7c3      	b.n	3222 <reserved_exception+0x56>
    329a:	bf00      	nop
    329c:	00009fd8 	.word	0x00009fd8
    32a0:	00009ff0 	.word	0x00009ff0
    32a4:	00009a1c 	.word	0x00009a1c
    32a8:	00009fbc 	.word	0x00009fbc

000032ac <mem_manage_fault>:
{
    32ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    32b0:	b0a5      	sub	sp, #148	; 0x94
    32b2:	af00      	add	r7, sp, #0
    32b4:	4605      	mov	r5, r0
    32b6:	460c      	mov	r4, r1
    32b8:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    32ba:	4bc8      	ldr	r3, [pc, #800]	; (35dc <mem_manage_fault+0x330>)
    32bc:	617b      	str	r3, [r7, #20]
    32be:	2300      	movs	r3, #0
    32c0:	2202      	movs	r2, #2
    32c2:	f362 0307 	bfi	r3, r2, #0, #8
    32c6:	f36f 230f 	bfc	r3, #8, #8
    32ca:	f36f 4317 	bfc	r3, #16, #8
    32ce:	f36f 631f 	bfc	r3, #24, #8
    32d2:	613b      	str	r3, [r7, #16]
    32d4:	2100      	movs	r1, #0
    32d6:	f36f 0100 	bfc	r1, #0, #1
    32da:	f36f 0141 	bfc	r1, #1, #1
    32de:	f36f 0182 	bfc	r1, #2, #1
    32e2:	f36f 01c5 	bfc	r1, #3, #3
    32e6:	2301      	movs	r3, #1
    32e8:	f363 1188 	bfi	r1, r3, #6, #3
    32ec:	2308      	movs	r3, #8
    32ee:	f363 2152 	bfi	r1, r3, #9, #10
    32f2:	f36f 41de 	bfc	r1, #19, #12
    32f6:	f36f 71df 	bfc	r1, #31, #1
    32fa:	2300      	movs	r3, #0
    32fc:	f107 0210 	add.w	r2, r7, #16
    3300:	48b7      	ldr	r0, [pc, #732]	; (35e0 <mem_manage_fault+0x334>)
    3302:	f005 f890 	bl	8426 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3306:	4bb7      	ldr	r3, [pc, #732]	; (35e4 <mem_manage_fault+0x338>)
    3308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    330a:	f013 0f10 	tst.w	r3, #16
    330e:	d141      	bne.n	3394 <mem_manage_fault+0xe8>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3310:	4bb4      	ldr	r3, [pc, #720]	; (35e4 <mem_manage_fault+0x338>)
    3312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3314:	f013 0f08 	tst.w	r3, #8
    3318:	d163      	bne.n	33e2 <mem_manage_fault+0x136>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    331a:	4bb2      	ldr	r3, [pc, #712]	; (35e4 <mem_manage_fault+0x338>)
    331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    331e:	f013 0f02 	tst.w	r3, #2
    3322:	f040 8085 	bne.w	3430 <mem_manage_fault+0x184>
	uint32_t mmfar = -EINVAL;
    3326:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    332a:	4bae      	ldr	r3, [pc, #696]	; (35e4 <mem_manage_fault+0x338>)
    332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    332e:	f013 0f01 	tst.w	r3, #1
    3332:	f040 80f6 	bne.w	3522 <mem_manage_fault+0x276>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3336:	4bab      	ldr	r3, [pc, #684]	; (35e4 <mem_manage_fault+0x338>)
    3338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    333a:	f013 0f20 	tst.w	r3, #32
    333e:	f040 8117 	bne.w	3570 <mem_manage_fault+0x2c4>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3342:	4ba8      	ldr	r3, [pc, #672]	; (35e4 <mem_manage_fault+0x338>)
    3344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3346:	f013 0f10 	tst.w	r3, #16
    334a:	d104      	bne.n	3356 <mem_manage_fault+0xaa>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    334c:	4ba5      	ldr	r3, [pc, #660]	; (35e4 <mem_manage_fault+0x338>)
    334e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3350:	f014 0402 	ands.w	r4, r4, #2
    3354:	d005      	beq.n	3362 <mem_manage_fault+0xb6>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3356:	4ba3      	ldr	r3, [pc, #652]	; (35e4 <mem_manage_fault+0x338>)
    3358:	685c      	ldr	r4, [r3, #4]
    335a:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    335e:	f040 8130 	bne.w	35c2 <mem_manage_fault+0x316>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3362:	4ba0      	ldr	r3, [pc, #640]	; (35e4 <mem_manage_fault+0x338>)
    3364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3366:	f013 0f20 	tst.w	r3, #32
    336a:	d004      	beq.n	3376 <mem_manage_fault+0xca>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    336c:	4a9d      	ldr	r2, [pc, #628]	; (35e4 <mem_manage_fault+0x338>)
    336e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3374:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3376:	4a9b      	ldr	r2, [pc, #620]	; (35e4 <mem_manage_fault+0x338>)
    3378:	6a93      	ldr	r3, [r2, #40]	; 0x28
    337a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    337e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3380:	2101      	movs	r1, #1
    3382:	4628      	mov	r0, r5
    3384:	f005 f902 	bl	858c <memory_fault_recoverable>
    3388:	7030      	strb	r0, [r6, #0]
}
    338a:	4620      	mov	r0, r4
    338c:	3794      	adds	r7, #148	; 0x94
    338e:	46bd      	mov	sp, r7
    3390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    3394:	4b94      	ldr	r3, [pc, #592]	; (35e8 <mem_manage_fault+0x33c>)
    3396:	62fb      	str	r3, [r7, #44]	; 0x2c
    3398:	2300      	movs	r3, #0
    339a:	2202      	movs	r2, #2
    339c:	f362 0307 	bfi	r3, r2, #0, #8
    33a0:	f36f 230f 	bfc	r3, #8, #8
    33a4:	f36f 4317 	bfc	r3, #16, #8
    33a8:	f36f 631f 	bfc	r3, #24, #8
    33ac:	62bb      	str	r3, [r7, #40]	; 0x28
    33ae:	2100      	movs	r1, #0
    33b0:	f36f 0100 	bfc	r1, #0, #1
    33b4:	f36f 0141 	bfc	r1, #1, #1
    33b8:	f36f 0182 	bfc	r1, #2, #1
    33bc:	f36f 01c5 	bfc	r1, #3, #3
    33c0:	2301      	movs	r3, #1
    33c2:	f363 1188 	bfi	r1, r3, #6, #3
    33c6:	2308      	movs	r3, #8
    33c8:	f363 2152 	bfi	r1, r3, #9, #10
    33cc:	f36f 41de 	bfc	r1, #19, #12
    33d0:	f36f 71df 	bfc	r1, #31, #1
    33d4:	2300      	movs	r3, #0
    33d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    33da:	4881      	ldr	r0, [pc, #516]	; (35e0 <mem_manage_fault+0x334>)
    33dc:	f005 f823 	bl	8426 <z_impl_z_log_msg2_static_create>
    33e0:	e796      	b.n	3310 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Unstacking error");
    33e2:	4b82      	ldr	r3, [pc, #520]	; (35ec <mem_manage_fault+0x340>)
    33e4:	647b      	str	r3, [r7, #68]	; 0x44
    33e6:	2300      	movs	r3, #0
    33e8:	2202      	movs	r2, #2
    33ea:	f362 0307 	bfi	r3, r2, #0, #8
    33ee:	f36f 230f 	bfc	r3, #8, #8
    33f2:	f36f 4317 	bfc	r3, #16, #8
    33f6:	f36f 631f 	bfc	r3, #24, #8
    33fa:	643b      	str	r3, [r7, #64]	; 0x40
    33fc:	2100      	movs	r1, #0
    33fe:	f36f 0100 	bfc	r1, #0, #1
    3402:	f36f 0141 	bfc	r1, #1, #1
    3406:	f36f 0182 	bfc	r1, #2, #1
    340a:	f36f 01c5 	bfc	r1, #3, #3
    340e:	2301      	movs	r3, #1
    3410:	f363 1188 	bfi	r1, r3, #6, #3
    3414:	2308      	movs	r3, #8
    3416:	f363 2152 	bfi	r1, r3, #9, #10
    341a:	f36f 41de 	bfc	r1, #19, #12
    341e:	f36f 71df 	bfc	r1, #31, #1
    3422:	2300      	movs	r3, #0
    3424:	f107 0240 	add.w	r2, r7, #64	; 0x40
    3428:	486d      	ldr	r0, [pc, #436]	; (35e0 <mem_manage_fault+0x334>)
    342a:	f004 fffc 	bl	8426 <z_impl_z_log_msg2_static_create>
    342e:	e774      	b.n	331a <mem_manage_fault+0x6e>
		PR_FAULT_INFO("  Data Access Violation");
    3430:	4b6f      	ldr	r3, [pc, #444]	; (35f0 <mem_manage_fault+0x344>)
    3432:	65fb      	str	r3, [r7, #92]	; 0x5c
    3434:	2300      	movs	r3, #0
    3436:	2202      	movs	r2, #2
    3438:	f362 0307 	bfi	r3, r2, #0, #8
    343c:	f36f 230f 	bfc	r3, #8, #8
    3440:	f36f 4317 	bfc	r3, #16, #8
    3444:	f36f 631f 	bfc	r3, #24, #8
    3448:	65bb      	str	r3, [r7, #88]	; 0x58
    344a:	2100      	movs	r1, #0
    344c:	f36f 0100 	bfc	r1, #0, #1
    3450:	f36f 0141 	bfc	r1, #1, #1
    3454:	f36f 0182 	bfc	r1, #2, #1
    3458:	f36f 01c5 	bfc	r1, #3, #3
    345c:	2301      	movs	r3, #1
    345e:	f363 1188 	bfi	r1, r3, #6, #3
    3462:	2308      	movs	r3, #8
    3464:	f363 2152 	bfi	r1, r3, #9, #10
    3468:	f36f 41de 	bfc	r1, #19, #12
    346c:	f36f 71df 	bfc	r1, #31, #1
    3470:	2300      	movs	r3, #0
    3472:	f107 0258 	add.w	r2, r7, #88	; 0x58
    3476:	485a      	ldr	r0, [pc, #360]	; (35e0 <mem_manage_fault+0x334>)
    3478:	f004 ffd5 	bl	8426 <z_impl_z_log_msg2_static_create>
		uint32_t temp = SCB->MMFAR;
    347c:	4b59      	ldr	r3, [pc, #356]	; (35e4 <mem_manage_fault+0x338>)
    347e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3484:	f013 0f80 	tst.w	r3, #128	; 0x80
    3488:	d048      	beq.n	351c <mem_manage_fault+0x270>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    348a:	46e9      	mov	r9, sp
    348c:	b088      	sub	sp, #32
    348e:	466b      	mov	r3, sp
    3490:	f113 0210 	adds.w	r2, r3, #16
    3494:	d03c      	beq.n	3510 <mem_manage_fault+0x264>
    3496:	210c      	movs	r1, #12
    3498:	b11a      	cbz	r2, 34a2 <mem_manage_fault+0x1f6>
    349a:	2904      	cmp	r1, #4
    349c:	dd01      	ble.n	34a2 <mem_manage_fault+0x1f6>
    349e:	4855      	ldr	r0, [pc, #340]	; (35f4 <mem_manage_fault+0x348>)
    34a0:	6158      	str	r0, [r3, #20]
    34a2:	b11a      	cbz	r2, 34ac <mem_manage_fault+0x200>
    34a4:	2908      	cmp	r1, #8
    34a6:	dd01      	ble.n	34ac <mem_manage_fault+0x200>
    34a8:	f8c3 8018 	str.w	r8, [r3, #24]
    34ac:	290b      	cmp	r1, #11
    34ae:	dd32      	ble.n	3516 <mem_manage_fault+0x26a>
    34b0:	200c      	movs	r0, #12
    34b2:	b15a      	cbz	r2, 34cc <mem_manage_fault+0x220>
    34b4:	2100      	movs	r1, #0
    34b6:	f04f 0c03 	mov.w	ip, #3
    34ba:	f36c 0107 	bfi	r1, ip, #0, #8
    34be:	f36f 210f 	bfc	r1, #8, #8
    34c2:	f36f 4117 	bfc	r1, #16, #8
    34c6:	f36f 611f 	bfc	r1, #24, #8
    34ca:	6119      	str	r1, [r3, #16]
    34cc:	2100      	movs	r1, #0
    34ce:	f36f 0100 	bfc	r1, #0, #1
    34d2:	f36f 0141 	bfc	r1, #1, #1
    34d6:	f36f 0182 	bfc	r1, #2, #1
    34da:	f36f 01c5 	bfc	r1, #3, #3
    34de:	2301      	movs	r3, #1
    34e0:	f363 1188 	bfi	r1, r3, #6, #3
    34e4:	f400 737b 	and.w	r3, r0, #1004	; 0x3ec
    34e8:	f363 2152 	bfi	r1, r3, #9, #10
    34ec:	f36f 41de 	bfc	r1, #19, #12
    34f0:	f36f 71df 	bfc	r1, #31, #1
    34f4:	2300      	movs	r3, #0
    34f6:	483a      	ldr	r0, [pc, #232]	; (35e0 <mem_manage_fault+0x334>)
    34f8:	f004 ff95 	bl	8426 <z_impl_z_log_msg2_static_create>
    34fc:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    34fe:	2c00      	cmp	r4, #0
    3500:	f43f af13 	beq.w	332a <mem_manage_fault+0x7e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3504:	4a37      	ldr	r2, [pc, #220]	; (35e4 <mem_manage_fault+0x338>)
    3506:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    350c:	6293      	str	r3, [r2, #40]	; 0x28
    350e:	e70c      	b.n	332a <mem_manage_fault+0x7e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3510:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3514:	e7c0      	b.n	3498 <mem_manage_fault+0x1ec>
    3516:	f06f 001b 	mvn.w	r0, #27
    351a:	e7ca      	b.n	34b2 <mem_manage_fault+0x206>
	uint32_t mmfar = -EINVAL;
    351c:	f06f 0815 	mvn.w	r8, #21
    3520:	e703      	b.n	332a <mem_manage_fault+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    3522:	4b35      	ldr	r3, [pc, #212]	; (35f8 <mem_manage_fault+0x34c>)
    3524:	677b      	str	r3, [r7, #116]	; 0x74
    3526:	2300      	movs	r3, #0
    3528:	2202      	movs	r2, #2
    352a:	f362 0307 	bfi	r3, r2, #0, #8
    352e:	f36f 230f 	bfc	r3, #8, #8
    3532:	f36f 4317 	bfc	r3, #16, #8
    3536:	f36f 631f 	bfc	r3, #24, #8
    353a:	673b      	str	r3, [r7, #112]	; 0x70
    353c:	2100      	movs	r1, #0
    353e:	f36f 0100 	bfc	r1, #0, #1
    3542:	f36f 0141 	bfc	r1, #1, #1
    3546:	f36f 0182 	bfc	r1, #2, #1
    354a:	f36f 01c5 	bfc	r1, #3, #3
    354e:	2301      	movs	r3, #1
    3550:	f363 1188 	bfi	r1, r3, #6, #3
    3554:	2308      	movs	r3, #8
    3556:	f363 2152 	bfi	r1, r3, #9, #10
    355a:	f36f 41de 	bfc	r1, #19, #12
    355e:	f36f 71df 	bfc	r1, #31, #1
    3562:	2300      	movs	r3, #0
    3564:	f107 0270 	add.w	r2, r7, #112	; 0x70
    3568:	481d      	ldr	r0, [pc, #116]	; (35e0 <mem_manage_fault+0x334>)
    356a:	f004 ff5c 	bl	8426 <z_impl_z_log_msg2_static_create>
    356e:	e6e2      	b.n	3336 <mem_manage_fault+0x8a>
		PR_FAULT_INFO(
    3570:	4b22      	ldr	r3, [pc, #136]	; (35fc <mem_manage_fault+0x350>)
    3572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    3576:	2300      	movs	r3, #0
    3578:	2202      	movs	r2, #2
    357a:	f362 0307 	bfi	r3, r2, #0, #8
    357e:	f36f 230f 	bfc	r3, #8, #8
    3582:	f36f 4317 	bfc	r3, #16, #8
    3586:	f36f 631f 	bfc	r3, #24, #8
    358a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    358e:	2100      	movs	r1, #0
    3590:	f36f 0100 	bfc	r1, #0, #1
    3594:	f36f 0141 	bfc	r1, #1, #1
    3598:	f36f 0182 	bfc	r1, #2, #1
    359c:	f36f 01c5 	bfc	r1, #3, #3
    35a0:	2301      	movs	r3, #1
    35a2:	f363 1188 	bfi	r1, r3, #6, #3
    35a6:	2308      	movs	r3, #8
    35a8:	f363 2152 	bfi	r1, r3, #9, #10
    35ac:	f36f 41de 	bfc	r1, #19, #12
    35b0:	f36f 71df 	bfc	r1, #31, #1
    35b4:	2300      	movs	r3, #0
    35b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
    35ba:	4809      	ldr	r0, [pc, #36]	; (35e0 <mem_manage_fault+0x334>)
    35bc:	f004 ff33 	bl	8426 <z_impl_z_log_msg2_static_create>
    35c0:	e6bf      	b.n	3342 <mem_manage_fault+0x96>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    35c2:	4629      	mov	r1, r5
    35c4:	4640      	mov	r0, r8
    35c6:	f7ff fa6b 	bl	2aa0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    35ca:	4604      	mov	r4, r0
    35cc:	2800      	cmp	r0, #0
    35ce:	f43f aec8 	beq.w	3362 <mem_manage_fault+0xb6>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    35d2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    35d6:	2402      	movs	r4, #2
    35d8:	e6c3      	b.n	3362 <mem_manage_fault+0xb6>
    35da:	bf00      	nop
    35dc:	0000a004 	.word	0x0000a004
    35e0:	00009a1c 	.word	0x00009a1c
    35e4:	e000ed00 	.word	0xe000ed00
    35e8:	0000a01c 	.word	0x0000a01c
    35ec:	00009e14 	.word	0x00009e14
    35f0:	0000a050 	.word	0x0000a050
    35f4:	0000a068 	.word	0x0000a068
    35f8:	0000a080 	.word	0x0000a080
    35fc:	00009e90 	.word	0x00009e90

00003600 <hard_fault>:
{
    3600:	b5f0      	push	{r4, r5, r6, r7, lr}
    3602:	b099      	sub	sp, #100	; 0x64
    3604:	af00      	add	r7, sp, #0
    3606:	4605      	mov	r5, r0
    3608:	460c      	mov	r4, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    360a:	4b8c      	ldr	r3, [pc, #560]	; (383c <hard_fault+0x23c>)
    360c:	617b      	str	r3, [r7, #20]
    360e:	2300      	movs	r3, #0
    3610:	2202      	movs	r2, #2
    3612:	f362 0307 	bfi	r3, r2, #0, #8
    3616:	f36f 230f 	bfc	r3, #8, #8
    361a:	f36f 4317 	bfc	r3, #16, #8
    361e:	f36f 631f 	bfc	r3, #24, #8
    3622:	613b      	str	r3, [r7, #16]
    3624:	2100      	movs	r1, #0
    3626:	f36f 0100 	bfc	r1, #0, #1
    362a:	f36f 0141 	bfc	r1, #1, #1
    362e:	f36f 0182 	bfc	r1, #2, #1
    3632:	f36f 01c5 	bfc	r1, #3, #3
    3636:	2301      	movs	r3, #1
    3638:	f363 1188 	bfi	r1, r3, #6, #3
    363c:	2308      	movs	r3, #8
    363e:	f363 2152 	bfi	r1, r3, #9, #10
    3642:	f36f 41de 	bfc	r1, #19, #12
    3646:	f36f 71df 	bfc	r1, #31, #1
    364a:	2300      	movs	r3, #0
    364c:	f107 0210 	add.w	r2, r7, #16
    3650:	487b      	ldr	r0, [pc, #492]	; (3840 <hard_fault+0x240>)
    3652:	f004 fee8 	bl	8426 <z_impl_z_log_msg2_static_create>
	*recoverable = false;
    3656:	2300      	movs	r3, #0
    3658:	7023      	strb	r3, [r4, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    365a:	4b7a      	ldr	r3, [pc, #488]	; (3844 <hard_fault+0x244>)
    365c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    365e:	f016 0602 	ands.w	r6, r6, #2
    3662:	d10b      	bne.n	367c <hard_fault+0x7c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3664:	4b77      	ldr	r3, [pc, #476]	; (3844 <hard_fault+0x244>)
    3666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3668:	2b00      	cmp	r3, #0
    366a:	db2f      	blt.n	36cc <hard_fault+0xcc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    366c:	4b75      	ldr	r3, [pc, #468]	; (3844 <hard_fault+0x244>)
    366e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3670:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    3674:	d152      	bne.n	371c <hard_fault+0x11c>
}
    3676:	3764      	adds	r7, #100	; 0x64
    3678:	46bd      	mov	sp, r7
    367a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
    367c:	4b72      	ldr	r3, [pc, #456]	; (3848 <hard_fault+0x248>)
    367e:	65fb      	str	r3, [r7, #92]	; 0x5c
    3680:	2300      	movs	r3, #0
    3682:	2202      	movs	r2, #2
    3684:	f362 0307 	bfi	r3, r2, #0, #8
    3688:	f36f 230f 	bfc	r3, #8, #8
    368c:	f36f 4317 	bfc	r3, #16, #8
    3690:	f36f 631f 	bfc	r3, #24, #8
    3694:	65bb      	str	r3, [r7, #88]	; 0x58
    3696:	2100      	movs	r1, #0
    3698:	f36f 0100 	bfc	r1, #0, #1
    369c:	f36f 0141 	bfc	r1, #1, #1
    36a0:	f36f 0182 	bfc	r1, #2, #1
    36a4:	f36f 01c5 	bfc	r1, #3, #3
    36a8:	2301      	movs	r3, #1
    36aa:	f363 1188 	bfi	r1, r3, #6, #3
    36ae:	2308      	movs	r3, #8
    36b0:	f363 2152 	bfi	r1, r3, #9, #10
    36b4:	f36f 41de 	bfc	r1, #19, #12
    36b8:	f36f 71df 	bfc	r1, #31, #1
    36bc:	2300      	movs	r3, #0
    36be:	f107 0258 	add.w	r2, r7, #88	; 0x58
    36c2:	485f      	ldr	r0, [pc, #380]	; (3840 <hard_fault+0x240>)
    36c4:	f004 feaf 	bl	8426 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    36c8:	2000      	movs	r0, #0
    36ca:	e7d4      	b.n	3676 <hard_fault+0x76>
		PR_EXC("  Debug event");
    36cc:	4b5f      	ldr	r3, [pc, #380]	; (384c <hard_fault+0x24c>)
    36ce:	647b      	str	r3, [r7, #68]	; 0x44
    36d0:	2300      	movs	r3, #0
    36d2:	2202      	movs	r2, #2
    36d4:	f362 0307 	bfi	r3, r2, #0, #8
    36d8:	f36f 230f 	bfc	r3, #8, #8
    36dc:	f36f 4317 	bfc	r3, #16, #8
    36e0:	f36f 631f 	bfc	r3, #24, #8
    36e4:	643b      	str	r3, [r7, #64]	; 0x40
    36e6:	2100      	movs	r1, #0
    36e8:	f36f 0100 	bfc	r1, #0, #1
    36ec:	f36f 0141 	bfc	r1, #1, #1
    36f0:	f36f 0182 	bfc	r1, #2, #1
    36f4:	f36f 01c5 	bfc	r1, #3, #3
    36f8:	2301      	movs	r3, #1
    36fa:	f363 1188 	bfi	r1, r3, #6, #3
    36fe:	2308      	movs	r3, #8
    3700:	f363 2152 	bfi	r1, r3, #9, #10
    3704:	f36f 41de 	bfc	r1, #19, #12
    3708:	f36f 71df 	bfc	r1, #31, #1
    370c:	2300      	movs	r3, #0
    370e:	f107 0240 	add.w	r2, r7, #64	; 0x40
    3712:	484b      	ldr	r0, [pc, #300]	; (3840 <hard_fault+0x240>)
    3714:	f004 fe87 	bl	8426 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3718:	4630      	mov	r0, r6
    371a:	e7ac      	b.n	3676 <hard_fault+0x76>
		PR_EXC("  Fault escalation (see below)");
    371c:	4b4c      	ldr	r3, [pc, #304]	; (3850 <hard_fault+0x250>)
    371e:	62fb      	str	r3, [r7, #44]	; 0x2c
    3720:	2300      	movs	r3, #0
    3722:	2202      	movs	r2, #2
    3724:	f362 0307 	bfi	r3, r2, #0, #8
    3728:	f36f 230f 	bfc	r3, #8, #8
    372c:	f36f 4317 	bfc	r3, #16, #8
    3730:	f36f 631f 	bfc	r3, #24, #8
    3734:	62bb      	str	r3, [r7, #40]	; 0x28
    3736:	2100      	movs	r1, #0
    3738:	f36f 0100 	bfc	r1, #0, #1
    373c:	f36f 0141 	bfc	r1, #1, #1
    3740:	f36f 0182 	bfc	r1, #2, #1
    3744:	f36f 01c5 	bfc	r1, #3, #3
    3748:	2301      	movs	r3, #1
    374a:	f363 1188 	bfi	r1, r3, #6, #3
    374e:	2308      	movs	r3, #8
    3750:	f363 2152 	bfi	r1, r3, #9, #10
    3754:	f36f 41de 	bfc	r1, #19, #12
    3758:	f36f 71df 	bfc	r1, #31, #1
    375c:	2300      	movs	r3, #0
    375e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    3762:	4837      	ldr	r0, [pc, #220]	; (3840 <hard_fault+0x240>)
    3764:	f004 fe5f 	bl	8426 <z_impl_z_log_msg2_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3768:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    376a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    376e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3772:	429a      	cmp	r2, r3
    3774:	d010      	beq.n	3798 <hard_fault+0x198>
		} else if (SCB_MMFSR != 0) {
    3776:	4b33      	ldr	r3, [pc, #204]	; (3844 <hard_fault+0x244>)
    3778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    377c:	2b00      	cmp	r3, #0
    377e:	d14c      	bne.n	381a <hard_fault+0x21a>
		} else if (SCB_BFSR != 0) {
    3780:	4b30      	ldr	r3, [pc, #192]	; (3844 <hard_fault+0x244>)
    3782:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    3786:	2b00      	cmp	r3, #0
    3788:	d14d      	bne.n	3826 <hard_fault+0x226>
		} else if (SCB_UFSR != 0) {
    378a:	4b2e      	ldr	r3, [pc, #184]	; (3844 <hard_fault+0x244>)
    378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    378e:	b29b      	uxth	r3, r3
    3790:	2b00      	cmp	r3, #0
    3792:	d14e      	bne.n	3832 <hard_fault+0x232>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3794:	4630      	mov	r0, r6
	return reason;
    3796:	e76e      	b.n	3676 <hard_fault+0x76>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3798:	6828      	ldr	r0, [r5, #0]
    379a:	466c      	mov	r4, sp
    379c:	b088      	sub	sp, #32
    379e:	466b      	mov	r3, sp
    37a0:	f113 0210 	adds.w	r2, r3, #16
    37a4:	d033      	beq.n	380e <hard_fault+0x20e>
    37a6:	210c      	movs	r1, #12
    37a8:	b11a      	cbz	r2, 37b2 <hard_fault+0x1b2>
    37aa:	2904      	cmp	r1, #4
    37ac:	dd01      	ble.n	37b2 <hard_fault+0x1b2>
    37ae:	4e29      	ldr	r6, [pc, #164]	; (3854 <hard_fault+0x254>)
    37b0:	615e      	str	r6, [r3, #20]
    37b2:	b112      	cbz	r2, 37ba <hard_fault+0x1ba>
    37b4:	2908      	cmp	r1, #8
    37b6:	dd00      	ble.n	37ba <hard_fault+0x1ba>
    37b8:	6198      	str	r0, [r3, #24]
    37ba:	290b      	cmp	r1, #11
    37bc:	dd2a      	ble.n	3814 <hard_fault+0x214>
    37be:	200c      	movs	r0, #12
    37c0:	b152      	cbz	r2, 37d8 <hard_fault+0x1d8>
    37c2:	2100      	movs	r1, #0
    37c4:	2603      	movs	r6, #3
    37c6:	f366 0107 	bfi	r1, r6, #0, #8
    37ca:	f36f 210f 	bfc	r1, #8, #8
    37ce:	f36f 4117 	bfc	r1, #16, #8
    37d2:	f36f 611f 	bfc	r1, #24, #8
    37d6:	6119      	str	r1, [r3, #16]
    37d8:	2100      	movs	r1, #0
    37da:	f36f 0100 	bfc	r1, #0, #1
    37de:	f36f 0141 	bfc	r1, #1, #1
    37e2:	f36f 0182 	bfc	r1, #2, #1
    37e6:	f36f 01c5 	bfc	r1, #3, #3
    37ea:	2301      	movs	r3, #1
    37ec:	f363 1188 	bfi	r1, r3, #6, #3
    37f0:	f400 737b 	and.w	r3, r0, #1004	; 0x3ec
    37f4:	f363 2152 	bfi	r1, r3, #9, #10
    37f8:	f36f 41de 	bfc	r1, #19, #12
    37fc:	f36f 71df 	bfc	r1, #31, #1
    3800:	2300      	movs	r3, #0
    3802:	480f      	ldr	r0, [pc, #60]	; (3840 <hard_fault+0x240>)
    3804:	f004 fe0f 	bl	8426 <z_impl_z_log_msg2_static_create>
    3808:	46a5      	mov	sp, r4
			reason = esf->basic.r0;
    380a:	6828      	ldr	r0, [r5, #0]
    380c:	e733      	b.n	3676 <hard_fault+0x76>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    380e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3812:	e7c9      	b.n	37a8 <hard_fault+0x1a8>
    3814:	f06f 001b 	mvn.w	r0, #27
    3818:	e7d2      	b.n	37c0 <hard_fault+0x1c0>
			reason = mem_manage_fault(esf, 1, recoverable);
    381a:	4622      	mov	r2, r4
    381c:	2101      	movs	r1, #1
    381e:	4628      	mov	r0, r5
    3820:	f7ff fd44 	bl	32ac <mem_manage_fault>
    3824:	e727      	b.n	3676 <hard_fault+0x76>
			reason = bus_fault(esf, 1, recoverable);
    3826:	4622      	mov	r2, r4
    3828:	2101      	movs	r1, #1
    382a:	4628      	mov	r0, r5
    382c:	f7ff f9a4 	bl	2b78 <bus_fault>
    3830:	e721      	b.n	3676 <hard_fault+0x76>
			reason = usage_fault(esf);
    3832:	4628      	mov	r0, r5
    3834:	f7ff fb50 	bl	2ed8 <usage_fault>
    3838:	e71d      	b.n	3676 <hard_fault+0x76>
    383a:	bf00      	nop
    383c:	0000a0a0 	.word	0x0000a0a0
    3840:	00009a1c 	.word	0x00009a1c
    3844:	e000ed00 	.word	0xe000ed00
    3848:	0000a0b8 	.word	0x0000a0b8
    384c:	0000a0dc 	.word	0x0000a0dc
    3850:	0000a0ec 	.word	0x0000a0ec
    3854:	0000a10c 	.word	0x0000a10c

00003858 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3858:	b570      	push	{r4, r5, r6, lr}
    385a:	b090      	sub	sp, #64	; 0x40
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    385c:	4b35      	ldr	r3, [pc, #212]	; (3934 <z_arm_fault+0xdc>)
    385e:	685d      	ldr	r5, [r3, #4]
    3860:	f3c5 0508 	ubfx	r5, r5, #0, #9
    3864:	2300      	movs	r3, #0
    3866:	f383 8811 	msr	BASEPRI, r3
    386a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    386e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3872:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3876:	d13f      	bne.n	38f8 <z_arm_fault+0xa0>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3878:	f002 030c 	and.w	r3, r2, #12
    387c:	2b08      	cmp	r3, #8
    387e:	d010      	beq.n	38a2 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3880:	f012 0f08 	tst.w	r2, #8
    3884:	d035      	beq.n	38f2 <z_arm_fault+0x9a>
			ptr_esf =  (z_arch_esf_t *)psp;
    3886:	460c      	mov	r4, r1
	*nested_exc = false;
    3888:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    388a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    388e:	4629      	mov	r1, r5
    3890:	4620      	mov	r0, r4
    3892:	f004 fe7d 	bl	8590 <fault_handle>
    3896:	4605      	mov	r5, r0
	if (recoverable) {
    3898:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    389c:	b37b      	cbz	r3, 38fe <z_arm_fault+0xa6>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    389e:	b010      	add	sp, #64	; 0x40
    38a0:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    38a2:	4b25      	ldr	r3, [pc, #148]	; (3938 <z_arm_fault+0xe0>)
    38a4:	930f      	str	r3, [sp, #60]	; 0x3c
    38a6:	2300      	movs	r3, #0
    38a8:	2202      	movs	r2, #2
    38aa:	f362 0307 	bfi	r3, r2, #0, #8
    38ae:	f36f 230f 	bfc	r3, #8, #8
    38b2:	f36f 4317 	bfc	r3, #16, #8
    38b6:	f36f 631f 	bfc	r3, #24, #8
    38ba:	930e      	str	r3, [sp, #56]	; 0x38
    38bc:	2100      	movs	r1, #0
    38be:	f36f 0100 	bfc	r1, #0, #1
    38c2:	f36f 0141 	bfc	r1, #1, #1
    38c6:	f36f 0182 	bfc	r1, #2, #1
    38ca:	f36f 01c5 	bfc	r1, #3, #3
    38ce:	2301      	movs	r3, #1
    38d0:	f363 1188 	bfi	r1, r3, #6, #3
    38d4:	2308      	movs	r3, #8
    38d6:	f363 2152 	bfi	r1, r3, #9, #10
    38da:	f36f 41de 	bfc	r1, #19, #12
    38de:	f36f 71df 	bfc	r1, #31, #1
    38e2:	2300      	movs	r3, #0
    38e4:	aa0e      	add	r2, sp, #56	; 0x38
    38e6:	4815      	ldr	r0, [pc, #84]	; (393c <z_arm_fault+0xe4>)
    38e8:	f004 fd9d 	bl	8426 <z_impl_z_log_msg2_static_create>
	*nested_exc = false;
    38ec:	2600      	movs	r6, #0
		return NULL;
    38ee:	4634      	mov	r4, r6
    38f0:	e7cb      	b.n	388a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    38f2:	4604      	mov	r4, r0
			*nested_exc = true;
    38f4:	2601      	movs	r6, #1
    38f6:	e7c8      	b.n	388a <z_arm_fault+0x32>
	*nested_exc = false;
    38f8:	2600      	movs	r6, #0
		return NULL;
    38fa:	4634      	mov	r4, r6
    38fc:	e7c5      	b.n	388a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    38fe:	2220      	movs	r2, #32
    3900:	4621      	mov	r1, r4
    3902:	a801      	add	r0, sp, #4
    3904:	f004 fed8 	bl	86b8 <memcpy>
	if (nested_exc) {
    3908:	b14e      	cbz	r6, 391e <z_arm_fault+0xc6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    390a:	9b08      	ldr	r3, [sp, #32]
    390c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3910:	b95a      	cbnz	r2, 392a <z_arm_fault+0xd2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3912:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3916:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    391a:	9308      	str	r3, [sp, #32]
    391c:	e005      	b.n	392a <z_arm_fault+0xd2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    391e:	9b08      	ldr	r3, [sp, #32]
    3920:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3924:	f023 0301 	bic.w	r3, r3, #1
    3928:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    392a:	a901      	add	r1, sp, #4
    392c:	4628      	mov	r0, r5
    392e:	f004 fe0f 	bl	8550 <z_arm_fatal_error>
    3932:	e7b4      	b.n	389e <z_arm_fault+0x46>
    3934:	e000ed00 	.word	0xe000ed00
    3938:	0000a128 	.word	0x0000a128
    393c:	00009a1c 	.word	0x00009a1c

00003940 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3940:	4a02      	ldr	r2, [pc, #8]	; (394c <z_arm_fault_init+0xc>)
    3942:	6953      	ldr	r3, [r2, #20]
    3944:	f043 0310 	orr.w	r3, r3, #16
    3948:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    394a:	4770      	bx	lr
    394c:	e000ed00 	.word	0xe000ed00

00003950 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3950:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3954:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3958:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    395a:	4672      	mov	r2, lr
	bl z_arm_fault
    395c:	f7ff ff7c 	bl	3858 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3960:	bd01      	pop	{r0, pc}
    3962:	bf00      	nop

00003964 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3964:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3966:	e006      	b.n	3976 <z_arm_interrupt_init+0x12>
    3968:	f002 010f 	and.w	r1, r2, #15
    396c:	4b09      	ldr	r3, [pc, #36]	; (3994 <z_arm_interrupt_init+0x30>)
    396e:	440b      	add	r3, r1
    3970:	2120      	movs	r1, #32
    3972:	7619      	strb	r1, [r3, #24]
    3974:	3201      	adds	r2, #1
    3976:	2a2f      	cmp	r2, #47	; 0x2f
    3978:	dc0a      	bgt.n	3990 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    397a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    397c:	2b00      	cmp	r3, #0
    397e:	dbf3      	blt.n	3968 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3980:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3984:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3988:	2120      	movs	r1, #32
    398a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    398e:	e7f1      	b.n	3974 <z_arm_interrupt_init+0x10>
	}
}
    3990:	4770      	bx	lr
    3992:	bf00      	nop
    3994:	e000ecfc 	.word	0xe000ecfc

00003998 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3998:	2000      	movs	r0, #0
    msr CONTROL, r0
    399a:	f380 8814 	msr	CONTROL, r0
    isb
    399e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    39a2:	f005 feed 	bl	9780 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    39a6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    39a8:	490d      	ldr	r1, [pc, #52]	; (39e0 <__start+0x48>)
    str r0, [r1]
    39aa:	6008      	str	r0, [r1, #0]
    dsb
    39ac:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    39b0:	480c      	ldr	r0, [pc, #48]	; (39e4 <__start+0x4c>)
    msr msp, r0
    39b2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    39b6:	f000 f82d 	bl	3a14 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    39ba:	2020      	movs	r0, #32
    msr BASEPRI, r0
    39bc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    39c0:	4809      	ldr	r0, [pc, #36]	; (39e8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    39c2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    39c6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    39c8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    39cc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    39d0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    39d2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    39d4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    39d8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    39dc:	f7fe ffca 	bl	2974 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    39e0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    39e4:	20001d00 	.word	0x20001d00
    ldr r0, =z_interrupt_stacks
    39e8:	20001e80 	.word	0x20001e80

000039ec <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    39ec:	4b08      	ldr	r3, [pc, #32]	; (3a10 <z_arm_clear_arm_mpu_config+0x24>)
    39ee:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    39f2:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    39f6:	2300      	movs	r3, #0
    39f8:	e006      	b.n	3a08 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    39fa:	4a05      	ldr	r2, [pc, #20]	; (3a10 <z_arm_clear_arm_mpu_config+0x24>)
    39fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3a00:	2100      	movs	r1, #0
    3a02:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    3a06:	3301      	adds	r3, #1
    3a08:	4283      	cmp	r3, r0
    3a0a:	dbf6      	blt.n	39fa <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    3a0c:	4770      	bx	lr
    3a0e:	bf00      	nop
    3a10:	e000ed00 	.word	0xe000ed00

00003a14 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3a14:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3a16:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3a18:	2400      	movs	r4, #0
    3a1a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3a1e:	f7ff ffe5 	bl	39ec <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3a22:	4623      	mov	r3, r4
    3a24:	e008      	b.n	3a38 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    3a26:	f103 0120 	add.w	r1, r3, #32
    3a2a:	4a0e      	ldr	r2, [pc, #56]	; (3a64 <z_arm_init_arch_hw_at_boot+0x50>)
    3a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a30:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3a34:	3301      	adds	r3, #1
    3a36:	b2db      	uxtb	r3, r3
    3a38:	2b07      	cmp	r3, #7
    3a3a:	d9f4      	bls.n	3a26 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3a3c:	2300      	movs	r3, #0
    3a3e:	e008      	b.n	3a52 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3a40:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3a44:	4a07      	ldr	r2, [pc, #28]	; (3a64 <z_arm_init_arch_hw_at_boot+0x50>)
    3a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a4a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3a4e:	3301      	adds	r3, #1
    3a50:	b2db      	uxtb	r3, r3
    3a52:	2b07      	cmp	r3, #7
    3a54:	d9f4      	bls.n	3a40 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    3a56:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a5c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3a60:	bd10      	pop	{r4, pc}
    3a62:	bf00      	nop
    3a64:	e000e100 	.word	0xe000e100

00003a68 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3a68:	b508      	push	{r3, lr}
	if (_current == thread) {
    3a6a:	4b0a      	ldr	r3, [pc, #40]	; (3a94 <z_impl_k_thread_abort+0x2c>)
    3a6c:	689b      	ldr	r3, [r3, #8]
    3a6e:	4283      	cmp	r3, r0
    3a70:	d002      	beq.n	3a78 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    3a72:	f003 fa9f 	bl	6fb4 <z_thread_abort>
}
    3a76:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3a78:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d0f8      	beq.n	3a72 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3a80:	4b05      	ldr	r3, [pc, #20]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a82:	685a      	ldr	r2, [r3, #4]
    3a84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3a88:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3a90:	625a      	str	r2, [r3, #36]	; 0x24
    3a92:	e7ee      	b.n	3a72 <z_impl_k_thread_abort+0xa>
    3a94:	200013b8 	.word	0x200013b8
    3a98:	e000ed00 	.word	0xe000ed00

00003a9c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3a9c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3a9e:	4b03      	ldr	r3, [pc, #12]	; (3aac <z_arm_configure_static_mpu_regions+0x10>)
    3aa0:	4a03      	ldr	r2, [pc, #12]	; (3ab0 <z_arm_configure_static_mpu_regions+0x14>)
    3aa2:	2101      	movs	r1, #1
    3aa4:	4803      	ldr	r0, [pc, #12]	; (3ab4 <z_arm_configure_static_mpu_regions+0x18>)
    3aa6:	f004 fdc8 	bl	863a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3aaa:	bd08      	pop	{r3, pc}
    3aac:	20040000 	.word	0x20040000
    3ab0:	20000000 	.word	0x20000000
    3ab4:	0000a158 	.word	0x0000a158

00003ab8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3ab8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3aba:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    3abe:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3ac0:	4804      	ldr	r0, [pc, #16]	; (3ad4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3ac2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    3ac4:	2320      	movs	r3, #32
    3ac6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3ac8:	4b03      	ldr	r3, [pc, #12]	; (3ad8 <z_arm_configure_dynamic_mpu_regions+0x20>)
    3aca:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3acc:	2101      	movs	r1, #1
    3ace:	f004 fdb8 	bl	8642 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    3ad2:	bd08      	pop	{r3, pc}
    3ad4:	20000e54 	.word	0x20000e54
    3ad8:	150b0000 	.word	0x150b0000

00003adc <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3adc:	4a08      	ldr	r2, [pc, #32]	; (3b00 <region_init+0x24>)
    3ade:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3ae2:	680b      	ldr	r3, [r1, #0]
    3ae4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3ae8:	4303      	orrs	r3, r0
    3aea:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3aee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3af2:	688b      	ldr	r3, [r1, #8]
    3af4:	f043 0301 	orr.w	r3, r3, #1
    3af8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	e000ed00 	.word	0xe000ed00

00003b04 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    3b04:	b5b0      	push	{r4, r5, r7, lr}
    3b06:	af00      	add	r7, sp, #0
    3b08:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    3b0a:	2807      	cmp	r0, #7
    3b0c:	d804      	bhi.n	3b18 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    3b0e:	f7ff ffe5 	bl	3adc <region_init>

	return index;
    3b12:	4620      	mov	r0, r4
}
    3b14:	46bd      	mov	sp, r7
    3b16:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3b18:	466d      	mov	r5, sp
    3b1a:	b088      	sub	sp, #32
    3b1c:	466b      	mov	r3, sp
    3b1e:	f113 0210 	adds.w	r2, r3, #16
    3b22:	d034      	beq.n	3b8e <region_allocate_and_init+0x8a>
    3b24:	210c      	movs	r1, #12
    3b26:	b11a      	cbz	r2, 3b30 <region_allocate_and_init+0x2c>
    3b28:	2904      	cmp	r1, #4
    3b2a:	dd01      	ble.n	3b30 <region_allocate_and_init+0x2c>
    3b2c:	481b      	ldr	r0, [pc, #108]	; (3b9c <region_allocate_and_init+0x98>)
    3b2e:	6158      	str	r0, [r3, #20]
    3b30:	b112      	cbz	r2, 3b38 <region_allocate_and_init+0x34>
    3b32:	2908      	cmp	r1, #8
    3b34:	dd00      	ble.n	3b38 <region_allocate_and_init+0x34>
    3b36:	619c      	str	r4, [r3, #24]
    3b38:	290b      	cmp	r1, #11
    3b3a:	dd2b      	ble.n	3b94 <region_allocate_and_init+0x90>
    3b3c:	200c      	movs	r0, #12
    3b3e:	b152      	cbz	r2, 3b56 <region_allocate_and_init+0x52>
    3b40:	2100      	movs	r1, #0
    3b42:	2403      	movs	r4, #3
    3b44:	f364 0107 	bfi	r1, r4, #0, #8
    3b48:	f36f 210f 	bfc	r1, #8, #8
    3b4c:	f36f 4117 	bfc	r1, #16, #8
    3b50:	f36f 611f 	bfc	r1, #24, #8
    3b54:	6119      	str	r1, [r3, #16]
    3b56:	2100      	movs	r1, #0
    3b58:	f36f 0100 	bfc	r1, #0, #1
    3b5c:	f36f 0141 	bfc	r1, #1, #1
    3b60:	f36f 0182 	bfc	r1, #2, #1
    3b64:	f36f 01c5 	bfc	r1, #3, #3
    3b68:	2301      	movs	r3, #1
    3b6a:	f363 1188 	bfi	r1, r3, #6, #3
    3b6e:	f400 737b 	and.w	r3, r0, #1004	; 0x3ec
    3b72:	f363 2152 	bfi	r1, r3, #9, #10
    3b76:	f36f 41de 	bfc	r1, #19, #12
    3b7a:	f36f 71df 	bfc	r1, #31, #1
    3b7e:	2300      	movs	r3, #0
    3b80:	4807      	ldr	r0, [pc, #28]	; (3ba0 <region_allocate_and_init+0x9c>)
    3b82:	f004 fc50 	bl	8426 <z_impl_z_log_msg2_static_create>
    3b86:	46ad      	mov	sp, r5
		return -EINVAL;
    3b88:	f06f 0015 	mvn.w	r0, #21
    3b8c:	e7c2      	b.n	3b14 <region_allocate_and_init+0x10>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3b8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3b92:	e7c8      	b.n	3b26 <region_allocate_and_init+0x22>
    3b94:	f06f 001b 	mvn.w	r0, #27
    3b98:	e7d1      	b.n	3b3e <region_allocate_and_init+0x3a>
    3b9a:	bf00      	nop
    3b9c:	0000a164 	.word	0x0000a164
    3ba0:	00009a14 	.word	0x00009a14

00003ba4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ba8:	af00      	add	r7, sp, #0
    3baa:	4681      	mov	r9, r0
    3bac:	4688      	mov	r8, r1
    3bae:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    3bb0:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    3bb2:	2500      	movs	r5, #0
    3bb4:	e00f      	b.n	3bd6 <mpu_configure_regions+0x32>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3bb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3bba:	e024      	b.n	3c06 <mpu_configure_regions+0x62>
    3bbc:	f06f 001b 	mvn.w	r0, #27
    3bc0:	e02d      	b.n	3c1e <mpu_configure_regions+0x7a>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3bc2:	4621      	mov	r1, r4
    3bc4:	b2f0      	uxtb	r0, r6
    3bc6:	f004 fd19 	bl	85fc <mpu_configure_region>
    3bca:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    3bcc:	f110 0f16 	cmn.w	r0, #22
    3bd0:	d04c      	beq.n	3c6c <mpu_configure_regions+0xc8>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3bd2:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    3bd4:	3501      	adds	r5, #1
    3bd6:	4545      	cmp	r5, r8
    3bd8:	da48      	bge.n	3c6c <mpu_configure_regions+0xc8>
		if (regions[i].size == 0U) {
    3bda:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    3bde:	eb09 0484 	add.w	r4, r9, r4, lsl #2
    3be2:	6862      	ldr	r2, [r4, #4]
    3be4:	2a00      	cmp	r2, #0
    3be6:	d0f5      	beq.n	3bd4 <mpu_configure_regions+0x30>
		if (do_sanity_check &&
    3be8:	f1ba 0f00 	cmp.w	sl, #0
    3bec:	d0e9      	beq.n	3bc2 <mpu_configure_regions+0x1e>
				(!mpu_partition_is_valid(&regions[i]))) {
    3bee:	4620      	mov	r0, r4
    3bf0:	f004 fcf3 	bl	85da <mpu_partition_is_valid>
		if (do_sanity_check &&
    3bf4:	2800      	cmp	r0, #0
    3bf6:	d1e4      	bne.n	3bc2 <mpu_configure_regions+0x1e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3bf8:	466c      	mov	r4, sp
    3bfa:	b088      	sub	sp, #32
    3bfc:	466b      	mov	r3, sp
    3bfe:	f113 0210 	adds.w	r2, r3, #16
    3c02:	d0d8      	beq.n	3bb6 <mpu_configure_regions+0x12>
    3c04:	210c      	movs	r1, #12
    3c06:	b11a      	cbz	r2, 3c10 <mpu_configure_regions+0x6c>
    3c08:	2904      	cmp	r1, #4
    3c0a:	dd01      	ble.n	3c10 <mpu_configure_regions+0x6c>
    3c0c:	4819      	ldr	r0, [pc, #100]	; (3c74 <mpu_configure_regions+0xd0>)
    3c0e:	6158      	str	r0, [r3, #20]
    3c10:	b112      	cbz	r2, 3c18 <mpu_configure_regions+0x74>
    3c12:	2908      	cmp	r1, #8
    3c14:	dd00      	ble.n	3c18 <mpu_configure_regions+0x74>
    3c16:	619d      	str	r5, [r3, #24]
    3c18:	290b      	cmp	r1, #11
    3c1a:	ddcf      	ble.n	3bbc <mpu_configure_regions+0x18>
    3c1c:	200c      	movs	r0, #12
    3c1e:	b152      	cbz	r2, 3c36 <mpu_configure_regions+0x92>
    3c20:	2100      	movs	r1, #0
    3c22:	2503      	movs	r5, #3
    3c24:	f365 0107 	bfi	r1, r5, #0, #8
    3c28:	f36f 210f 	bfc	r1, #8, #8
    3c2c:	f36f 4117 	bfc	r1, #16, #8
    3c30:	f36f 611f 	bfc	r1, #24, #8
    3c34:	6119      	str	r1, [r3, #16]
    3c36:	2100      	movs	r1, #0
    3c38:	f36f 0100 	bfc	r1, #0, #1
    3c3c:	f36f 0141 	bfc	r1, #1, #1
    3c40:	f36f 0182 	bfc	r1, #2, #1
    3c44:	f36f 01c5 	bfc	r1, #3, #3
    3c48:	2301      	movs	r3, #1
    3c4a:	f363 1188 	bfi	r1, r3, #6, #3
    3c4e:	f400 737b 	and.w	r3, r0, #1004	; 0x3ec
    3c52:	f363 2152 	bfi	r1, r3, #9, #10
    3c56:	f36f 41de 	bfc	r1, #19, #12
    3c5a:	f36f 71df 	bfc	r1, #31, #1
    3c5e:	2300      	movs	r3, #0
    3c60:	4805      	ldr	r0, [pc, #20]	; (3c78 <mpu_configure_regions+0xd4>)
    3c62:	f004 fbe0 	bl	8426 <z_impl_z_log_msg2_static_create>
    3c66:	46a5      	mov	sp, r4
			return -EINVAL;
    3c68:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    3c6c:	4630      	mov	r0, r6
    3c6e:	46bd      	mov	sp, r7
    3c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c74:	0000a18c 	.word	0x0000a18c
    3c78:	00009a14 	.word	0x00009a14

00003c7c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    3c7c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    3c7e:	4c03      	ldr	r4, [pc, #12]	; (3c8c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3c80:	2301      	movs	r3, #1
    3c82:	7822      	ldrb	r2, [r4, #0]
    3c84:	f7ff ff8e 	bl	3ba4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3c88:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    3c8a:	bd10      	pop	{r4, pc}
    3c8c:	200015de 	.word	0x200015de

00003c90 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3c90:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3c92:	2300      	movs	r3, #0
    3c94:	4a09      	ldr	r2, [pc, #36]	; (3cbc <mpu_configure_dynamic_mpu_regions+0x2c>)
    3c96:	7812      	ldrb	r2, [r2, #0]
    3c98:	f7ff ff84 	bl	3ba4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3c9c:	f110 0f16 	cmn.w	r0, #22
    3ca0:	d00a      	beq.n	3cb8 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3ca2:	4603      	mov	r3, r0
    3ca4:	e006      	b.n	3cb4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    3ca6:	4a06      	ldr	r2, [pc, #24]	; (3cc0 <mpu_configure_dynamic_mpu_regions+0x30>)
    3ca8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3cac:	2100      	movs	r1, #0
    3cae:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    3cb2:	3301      	adds	r3, #1
    3cb4:	2b07      	cmp	r3, #7
    3cb6:	ddf6      	ble.n	3ca6 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    3cb8:	bd08      	pop	{r3, pc}
    3cba:	bf00      	nop
    3cbc:	200015de 	.word	0x200015de
    3cc0:	e000ed00 	.word	0xe000ed00

00003cc4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3cc4:	4b04      	ldr	r3, [pc, #16]	; (3cd8 <arm_core_mpu_enable+0x14>)
    3cc6:	2205      	movs	r2, #5
    3cc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3ccc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3cd0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3cd4:	4770      	bx	lr
    3cd6:	bf00      	nop
    3cd8:	e000ed00 	.word	0xe000ed00

00003cdc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3cdc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3ce0:	4b02      	ldr	r3, [pc, #8]	; (3cec <arm_core_mpu_disable+0x10>)
    3ce2:	2200      	movs	r2, #0
    3ce4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3ce8:	4770      	bx	lr
    3cea:	bf00      	nop
    3cec:	e000ed00 	.word	0xe000ed00

00003cf0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3cf0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3cf2:	4b0e      	ldr	r3, [pc, #56]	; (3d2c <z_arm_mpu_init+0x3c>)
    3cf4:	681d      	ldr	r5, [r3, #0]
    3cf6:	2d08      	cmp	r5, #8
    3cf8:	d815      	bhi.n	3d26 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3cfa:	f7ff ffef 	bl	3cdc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3cfe:	2400      	movs	r4, #0
    3d00:	e009      	b.n	3d16 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3d02:	4b0a      	ldr	r3, [pc, #40]	; (3d2c <z_arm_mpu_init+0x3c>)
    3d04:	6859      	ldr	r1, [r3, #4]
    3d06:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3d0a:	0093      	lsls	r3, r2, #2
    3d0c:	4419      	add	r1, r3
    3d0e:	4620      	mov	r0, r4
    3d10:	f7ff fee4 	bl	3adc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3d14:	3401      	adds	r4, #1
    3d16:	42a5      	cmp	r5, r4
    3d18:	d8f3      	bhi.n	3d02 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3d1a:	4b05      	ldr	r3, [pc, #20]	; (3d30 <z_arm_mpu_init+0x40>)
    3d1c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3d1e:	f7ff ffd1 	bl	3cc4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3d22:	2000      	movs	r0, #0
}
    3d24:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    3d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d2a:	e7fb      	b.n	3d24 <z_arm_mpu_init+0x34>
    3d2c:	0000a1c0 	.word	0x0000a1c0
    3d30:	200015de 	.word	0x200015de

00003d34 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3d34:	4b01      	ldr	r3, [pc, #4]	; (3d3c <__stdout_hook_install+0x8>)
    3d36:	6018      	str	r0, [r3, #0]
}
    3d38:	4770      	bx	lr
    3d3a:	bf00      	nop
    3d3c:	2000002c 	.word	0x2000002c

00003d40 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3d40:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d42:	f04f 0320 	mov.w	r3, #32
    3d46:	f3ef 8411 	mrs	r4, BASEPRI
    3d4a:	f383 8812 	msr	BASEPRI_MAX, r3
    3d4e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3d52:	2301      	movs	r3, #1
    3d54:	4a0c      	ldr	r2, [pc, #48]	; (3d88 <nordicsemi_nrf52_init+0x48>)
    3d56:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3d5e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3d62:	f004 fcf9 	bl	8758 <nrf52_errata_197>
    3d66:	b120      	cbz	r0, 3d72 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d6c:	2201      	movs	r2, #1
    3d6e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d76:	2201      	movs	r2, #1
    3d78:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3d7c:	f384 8811 	msr	BASEPRI, r4
    3d80:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3d84:	2000      	movs	r0, #0
    3d86:	bd10      	pop	{r4, pc}
    3d88:	4001e000 	.word	0x4001e000

00003d8c <sys_arch_reboot>:
    *p_gpregret = val;
    3d8c:	b2c0      	uxtb	r0, r0
    3d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3d92:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3d96:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3d9a:	4905      	ldr	r1, [pc, #20]	; (3db0 <sys_arch_reboot+0x24>)
    3d9c:	68ca      	ldr	r2, [r1, #12]
    3d9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3da2:	4b04      	ldr	r3, [pc, #16]	; (3db4 <sys_arch_reboot+0x28>)
    3da4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3da6:	60cb      	str	r3, [r1, #12]
    3da8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3dac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3dae:	e7fd      	b.n	3dac <sys_arch_reboot+0x20>
    3db0:	e000ed00 	.word	0xe000ed00
    3db4:	05fa0004 	.word	0x05fa0004

00003db8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3db8:	b130      	cbz	r0, 3dc8 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    3dba:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3dbc:	0180      	lsls	r0, r0, #6
    3dbe:	4b03      	ldr	r3, [pc, #12]	; (3dcc <arch_busy_wait+0x14>)
    3dc0:	f043 0301 	orr.w	r3, r3, #1
    3dc4:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3dc6:	bd08      	pop	{r3, pc}
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop
    3dcc:	00009ad0 	.word	0x00009ad0

00003dd0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    3dd0:	4800      	ldr	r0, [pc, #0]	; (3dd4 <get_hf_flags+0x4>)
    3dd2:	4770      	bx	lr
    3dd4:	20000eb8 	.word	0x20000eb8

00003dd8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3dd8:	4b01      	ldr	r3, [pc, #4]	; (3de0 <get_subsys+0x8>)
    3dda:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    3ddc:	1140      	asrs	r0, r0, #5
    3dde:	4770      	bx	lr
    3de0:	20000e70 	.word	0x20000e70

00003de4 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3de4:	b538      	push	{r3, r4, r5, lr}
    3de6:	4605      	mov	r5, r0
    3de8:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3dea:	f7ff fff5 	bl	3dd8 <get_subsys>
    3dee:	4601      	mov	r1, r0
    3df0:	2240      	movs	r2, #64	; 0x40
    3df2:	4803      	ldr	r0, [pc, #12]	; (3e00 <onoff_stop+0x1c>)
    3df4:	f004 fd47 	bl	8886 <stop>
    3df8:	4601      	mov	r1, r0
	notify(mgr, res);
    3dfa:	4628      	mov	r0, r5
    3dfc:	47a0      	blx	r4
}
    3dfe:	bd38      	pop	{r3, r4, r5, pc}
    3e00:	000097f4 	.word	0x000097f4

00003e04 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3e04:	b530      	push	{r4, r5, lr}
    3e06:	b083      	sub	sp, #12
    3e08:	4605      	mov	r5, r0
    3e0a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3e0c:	f7ff ffe4 	bl	3dd8 <get_subsys>
    3e10:	4601      	mov	r1, r0
    3e12:	2340      	movs	r3, #64	; 0x40
    3e14:	9300      	str	r3, [sp, #0]
    3e16:	4623      	mov	r3, r4
    3e18:	4a05      	ldr	r2, [pc, #20]	; (3e30 <onoff_start+0x2c>)
    3e1a:	4806      	ldr	r0, [pc, #24]	; (3e34 <onoff_start+0x30>)
    3e1c:	f004 fd4d 	bl	88ba <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3e20:	1e01      	subs	r1, r0, #0
    3e22:	db01      	blt.n	3e28 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3e24:	b003      	add	sp, #12
    3e26:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3e28:	4628      	mov	r0, r5
    3e2a:	47a0      	blx	r4
}
    3e2c:	e7fa      	b.n	3e24 <onoff_start+0x20>
    3e2e:	bf00      	nop
    3e30:	00008903 	.word	0x00008903
    3e34:	000097f4 	.word	0x000097f4

00003e38 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3e38:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    3e3a:	b110      	cbz	r0, 3e42 <clock_event_handler+0xa>
    3e3c:	2801      	cmp	r0, #1
    3e3e:	d00d      	beq.n	3e5c <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    3e40:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3e42:	2100      	movs	r1, #0
    3e44:	4808      	ldr	r0, [pc, #32]	; (3e68 <clock_event_handler+0x30>)
    3e46:	f004 fca9 	bl	879c <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3e4a:	6883      	ldr	r3, [r0, #8]
    3e4c:	f013 0f07 	tst.w	r3, #7
    3e50:	d1f6      	bne.n	3e40 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3e52:	2100      	movs	r1, #0
    3e54:	4804      	ldr	r0, [pc, #16]	; (3e68 <clock_event_handler+0x30>)
    3e56:	f004 fd04 	bl	8862 <clkstarted_handle>
    3e5a:	e7f1      	b.n	3e40 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3e5c:	2101      	movs	r1, #1
    3e5e:	4802      	ldr	r0, [pc, #8]	; (3e68 <clock_event_handler+0x30>)
    3e60:	f004 fcff 	bl	8862 <clkstarted_handle>
}
    3e64:	e7ec      	b.n	3e40 <clock_event_handler+0x8>
    3e66:	bf00      	nop
    3e68:	000097f4 	.word	0x000097f4

00003e6c <generic_hfclk_start>:
{
    3e6c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3e6e:	f04f 0320 	mov.w	r3, #32
    3e72:	f3ef 8411 	mrs	r4, BASEPRI
    3e76:	f383 8812 	msr	BASEPRI_MAX, r3
    3e7a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3e7e:	4a13      	ldr	r2, [pc, #76]	; (3ecc <generic_hfclk_start+0x60>)
    3e80:	6813      	ldr	r3, [r2, #0]
    3e82:	f043 0302 	orr.w	r3, r3, #2
    3e86:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3e88:	f013 0f01 	tst.w	r3, #1
    3e8c:	d108      	bne.n	3ea0 <generic_hfclk_start+0x34>
	bool already_started = false;
    3e8e:	2300      	movs	r3, #0
	__asm__ volatile(
    3e90:	f384 8811 	msr	BASEPRI, r4
    3e94:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3e98:	b99b      	cbnz	r3, 3ec2 <generic_hfclk_start+0x56>
	hfclk_start();
    3e9a:	f004 fd3a 	bl	8912 <hfclk_start>
}
    3e9e:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ea4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3ea8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3eac:	f012 0f01 	tst.w	r2, #1
    3eb0:	d101      	bne.n	3eb6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    3eb2:	2300      	movs	r3, #0
    3eb4:	e7ec      	b.n	3e90 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    3eb6:	f7ff ff8b 	bl	3dd0 <get_hf_flags>
    3eba:	f004 fcbf 	bl	883c <set_on_state>
			already_started = true;
    3ebe:	2301      	movs	r3, #1
    3ec0:	e7e6      	b.n	3e90 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    3ec2:	2100      	movs	r1, #0
    3ec4:	4802      	ldr	r0, [pc, #8]	; (3ed0 <generic_hfclk_start+0x64>)
    3ec6:	f004 fccc 	bl	8862 <clkstarted_handle>
		return;
    3eca:	e7e8      	b.n	3e9e <generic_hfclk_start+0x32>
    3ecc:	20000ec8 	.word	0x20000ec8
    3ed0:	000097f4 	.word	0x000097f4

00003ed4 <generic_hfclk_stop>:
{
    3ed4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ed6:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <generic_hfclk_stop+0x2c>)
    3ed8:	f3bf 8f5b 	dmb	ish
    3edc:	e853 2f00 	ldrex	r2, [r3]
    3ee0:	f022 0102 	bic.w	r1, r2, #2
    3ee4:	e843 1000 	strex	r0, r1, [r3]
    3ee8:	2800      	cmp	r0, #0
    3eea:	d1f7      	bne.n	3edc <generic_hfclk_stop+0x8>
    3eec:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3ef0:	f012 0f01 	tst.w	r2, #1
    3ef4:	d000      	beq.n	3ef8 <generic_hfclk_stop+0x24>
}
    3ef6:	bd08      	pop	{r3, pc}
	hfclk_stop();
    3ef8:	f004 fd15 	bl	8926 <hfclk_stop>
    3efc:	e7fb      	b.n	3ef6 <generic_hfclk_stop+0x22>
    3efe:	bf00      	nop
    3f00:	20000ec8 	.word	0x20000ec8

00003f04 <api_blocking_start>:
{
    3f04:	b500      	push	{lr}
    3f06:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3f08:	f8cd d000 	str.w	sp, [sp]
    3f0c:	f8cd d004 	str.w	sp, [sp, #4]
    3f10:	2300      	movs	r3, #0
    3f12:	9302      	str	r3, [sp, #8]
    3f14:	2301      	movs	r3, #1
    3f16:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f18:	466b      	mov	r3, sp
    3f1a:	4a07      	ldr	r2, [pc, #28]	; (3f38 <api_blocking_start+0x34>)
    3f1c:	f004 fce9 	bl	88f2 <api_start>
	if (err < 0) {
    3f20:	2800      	cmp	r0, #0
    3f22:	db05      	blt.n	3f30 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    3f24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3f28:	2300      	movs	r3, #0
    3f2a:	4668      	mov	r0, sp
    3f2c:	f002 fc3a 	bl	67a4 <z_impl_k_sem_take>
}
    3f30:	b005      	add	sp, #20
    3f32:	f85d fb04 	ldr.w	pc, [sp], #4
    3f36:	bf00      	nop
    3f38:	0000893b 	.word	0x0000893b

00003f3c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3f3c:	b570      	push	{r4, r5, r6, lr}
    3f3e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f40:	2200      	movs	r2, #0
    3f42:	2101      	movs	r1, #1
    3f44:	4610      	mov	r0, r2
    3f46:	f7fe fcfb 	bl	2940 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3f4a:	4811      	ldr	r0, [pc, #68]	; (3f90 <clk_init+0x54>)
    3f4c:	f001 f986 	bl	525c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3f50:	4b10      	ldr	r3, [pc, #64]	; (3f94 <clk_init+0x58>)
    3f52:	4298      	cmp	r0, r3
    3f54:	d119      	bne.n	3f8a <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3f56:	f005 f8b5 	bl	90c4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3f5a:	2400      	movs	r4, #0
    3f5c:	2c01      	cmp	r4, #1
    3f5e:	d812      	bhi.n	3f86 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3f60:	4621      	mov	r1, r4
    3f62:	4630      	mov	r0, r6
    3f64:	f004 fc1a 	bl	879c <get_sub_data>
    3f68:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3f6a:	4621      	mov	r1, r4
    3f6c:	4630      	mov	r0, r6
    3f6e:	f004 fc22 	bl	87b6 <get_onoff_manager>
    3f72:	4909      	ldr	r1, [pc, #36]	; (3f98 <clk_init+0x5c>)
    3f74:	f003 fdec 	bl	7b50 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3f78:	2800      	cmp	r0, #0
    3f7a:	db05      	blt.n	3f88 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3f7c:	2301      	movs	r3, #1
    3f7e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3f80:	441c      	add	r4, r3
    3f82:	b2e4      	uxtb	r4, r4
    3f84:	e7ea      	b.n	3f5c <clk_init+0x20>
	}

	return 0;
    3f86:	2000      	movs	r0, #0
}
    3f88:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3f8a:	f06f 0004 	mvn.w	r0, #4
    3f8e:	e7fb      	b.n	3f88 <clk_init+0x4c>
    3f90:	00003e39 	.word	0x00003e39
    3f94:	0bad0000 	.word	0x0bad0000
    3f98:	0000a23c 	.word	0x0000a23c

00003f9c <lfclk_spinwait>:
{
    3f9c:	b570      	push	{r4, r5, r6, lr}
    3f9e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3fa0:	2801      	cmp	r0, #1
    3fa2:	d107      	bne.n	3fb4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fa8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3fac:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3fb0:	2b01      	cmp	r3, #1
    3fb2:	d05a      	beq.n	406a <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3fb4:	f005 f988 	bl	92c8 <k_is_in_isr>
    3fb8:	b928      	cbnz	r0, 3fc6 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    3fba:	4b2f      	ldr	r3, [pc, #188]	; (4078 <lfclk_spinwait+0xdc>)
    3fbc:	781b      	ldrb	r3, [r3, #0]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d043      	beq.n	404a <lfclk_spinwait+0xae>
    3fc2:	2300      	movs	r3, #0
    3fc4:	e000      	b.n	3fc8 <lfclk_spinwait+0x2c>
    3fc6:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    3fc8:	461c      	mov	r4, r3
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d03f      	beq.n	404e <lfclk_spinwait+0xb2>
	__asm__ volatile(
    3fce:	f04f 0320 	mov.w	r3, #32
    3fd2:	f3ef 8611 	mrs	r6, BASEPRI
    3fd6:	f383 8812 	msr	BASEPRI_MAX, r3
    3fda:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    3fde:	b924      	cbnz	r4, 3fea <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    3fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fe4:	2202      	movs	r2, #2
    3fe6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3fee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3ff2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3ff6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3ffa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3ffe:	d12d      	bne.n	405c <lfclk_spinwait+0xc0>
    return false;
    4000:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4002:	b11a      	cbz	r2, 400c <lfclk_spinwait+0x70>
    4004:	2b01      	cmp	r3, #1
    4006:	d02b      	beq.n	4060 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4008:	2d01      	cmp	r5, #1
    400a:	d029      	beq.n	4060 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    400c:	b30c      	cbz	r4, 4052 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    400e:	4630      	mov	r0, r6
    4010:	f7fe fb44 	bl	269c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4018:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    401c:	2b00      	cmp	r3, #0
    401e:	d1e4      	bne.n	3fea <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4024:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4028:	2b00      	cmp	r3, #0
    402a:	d0de      	beq.n	3fea <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    402c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4030:	2200      	movs	r2, #0
    4032:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4036:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    403a:	2201      	movs	r2, #1
    403c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4040:	490e      	ldr	r1, [pc, #56]	; (407c <lfclk_spinwait+0xe0>)
    4042:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4046:	609a      	str	r2, [r3, #8]
}
    4048:	e7cf      	b.n	3fea <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    404a:	2301      	movs	r3, #1
    404c:	e7bc      	b.n	3fc8 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    404e:	2600      	movs	r6, #0
    4050:	e7c5      	b.n	3fde <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    4052:	2021      	movs	r0, #33	; 0x21
    4054:	2100      	movs	r1, #0
    4056:	f002 ff7b 	bl	6f50 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    405a:	e7db      	b.n	4014 <lfclk_spinwait+0x78>
                return true;
    405c:	2201      	movs	r2, #1
    405e:	e7d0      	b.n	4002 <lfclk_spinwait+0x66>
	if (isr_mode) {
    4060:	b124      	cbz	r4, 406c <lfclk_spinwait+0xd0>
	__asm__ volatile(
    4062:	f386 8811 	msr	BASEPRI, r6
    4066:	f3bf 8f6f 	isb	sy
}
    406a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    406c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4070:	2202      	movs	r2, #2
    4072:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4076:	e7f8      	b.n	406a <lfclk_spinwait+0xce>
    4078:	200015df 	.word	0x200015df
    407c:	e000e100 	.word	0xe000e100

00004080 <z_nrf_clock_control_lf_on>:
{
    4080:	b510      	push	{r4, lr}
    4082:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4084:	4b10      	ldr	r3, [pc, #64]	; (40c8 <z_nrf_clock_control_lf_on+0x48>)
    4086:	2101      	movs	r1, #1
    4088:	f3bf 8f5b 	dmb	ish
    408c:	e853 2f00 	ldrex	r2, [r3]
    4090:	e843 1000 	strex	r0, r1, [r3]
    4094:	2800      	cmp	r0, #0
    4096:	d1f9      	bne.n	408c <z_nrf_clock_control_lf_on+0xc>
    4098:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    409c:	b11a      	cbz	r2, 40a6 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    409e:	1e63      	subs	r3, r4, #1
    40a0:	2b01      	cmp	r3, #1
    40a2:	d90d      	bls.n	40c0 <z_nrf_clock_control_lf_on+0x40>
}
    40a4:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    40a6:	4809      	ldr	r0, [pc, #36]	; (40cc <z_nrf_clock_control_lf_on+0x4c>)
    40a8:	f004 fb85 	bl	87b6 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    40ac:	4908      	ldr	r1, [pc, #32]	; (40d0 <z_nrf_clock_control_lf_on+0x50>)
    40ae:	2300      	movs	r3, #0
    40b0:	604b      	str	r3, [r1, #4]
    40b2:	608b      	str	r3, [r1, #8]
    40b4:	60cb      	str	r3, [r1, #12]
    40b6:	2301      	movs	r3, #1
    40b8:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    40ba:	f003 fd65 	bl	7b88 <onoff_request>
    40be:	e7ee      	b.n	409e <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    40c0:	4620      	mov	r0, r4
    40c2:	f7ff ff6b 	bl	3f9c <lfclk_spinwait>
		break;
    40c6:	e7ed      	b.n	40a4 <z_nrf_clock_control_lf_on+0x24>
    40c8:	20000ecc 	.word	0x20000ecc
    40cc:	000097f4 	.word	0x000097f4
    40d0:	20000e60 	.word	0x20000e60

000040d4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    40d4:	b510      	push	{r4, lr}
    40d6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    40d8:	280a      	cmp	r0, #10
    40da:	d007      	beq.n	40ec <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    40dc:	4b07      	ldr	r3, [pc, #28]	; (40fc <console_out+0x28>)
    40de:	6818      	ldr	r0, [r3, #0]
    40e0:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    40e2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    40e4:	685b      	ldr	r3, [r3, #4]
    40e6:	4798      	blx	r3

	return c;
}
    40e8:	4620      	mov	r0, r4
    40ea:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    40ec:	4b03      	ldr	r3, [pc, #12]	; (40fc <console_out+0x28>)
    40ee:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    40f0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    40f2:	685b      	ldr	r3, [r3, #4]
    40f4:	210d      	movs	r1, #13
    40f6:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    40f8:	e7f0      	b.n	40dc <console_out+0x8>
    40fa:	bf00      	nop
    40fc:	20000ed0 	.word	0x20000ed0

00004100 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    4100:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    4102:	4c04      	ldr	r4, [pc, #16]	; (4114 <uart_console_hook_install+0x14>)
    4104:	4620      	mov	r0, r4
    4106:	f7ff fe15 	bl	3d34 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    410a:	4620      	mov	r0, r4
    410c:	f7fc fdba 	bl	c84 <__printk_hook_install>
#endif
}
    4110:	bd10      	pop	{r4, pc}
    4112:	bf00      	nop
    4114:	000040d5 	.word	0x000040d5

00004118 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4118:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    411a:	4806      	ldr	r0, [pc, #24]	; (4134 <uart_console_init+0x1c>)
    411c:	4b06      	ldr	r3, [pc, #24]	; (4138 <uart_console_init+0x20>)
    411e:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    4120:	f005 f859 	bl	91d6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4124:	b118      	cbz	r0, 412e <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    4126:	f7ff ffeb 	bl	4100 <uart_console_hook_install>

	return 0;
    412a:	2000      	movs	r0, #0
}
    412c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    412e:	f06f 0012 	mvn.w	r0, #18
    4132:	e7fb      	b.n	412c <uart_console_init+0x14>
    4134:	00009854 	.word	0x00009854
    4138:	20000ed0 	.word	0x20000ed0

0000413c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    413c:	b128      	cbz	r0, 414a <get_dev+0xe>
    413e:	2801      	cmp	r0, #1
    4140:	d101      	bne.n	4146 <get_dev+0xa>
    4142:	4803      	ldr	r0, [pc, #12]	; (4150 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    4144:	4770      	bx	lr
	const struct device *dev = NULL;
    4146:	2000      	movs	r0, #0
    4148:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    414a:	4802      	ldr	r0, [pc, #8]	; (4154 <get_dev+0x18>)
    414c:	4770      	bx	lr
    414e:	bf00      	nop
    4150:	0000980c 	.word	0x0000980c
    4154:	00009824 	.word	0x00009824

00004158 <gpio_nrfx_pin_interrupt_configure>:
{
    4158:	b5f0      	push	{r4, r5, r6, r7, lr}
    415a:	b085      	sub	sp, #20
    415c:	460e      	mov	r6, r1
    415e:	4619      	mov	r1, r3
	return port->config;
    4160:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4162:	7b1b      	ldrb	r3, [r3, #12]
    4164:	f006 051f 	and.w	r5, r6, #31
    4168:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    416c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    4170:	d022      	beq.n	41b8 <gpio_nrfx_pin_interrupt_configure+0x60>
    4172:	4607      	mov	r7, r0
    4174:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4176:	2300      	movs	r3, #0
    4178:	9302      	str	r3, [sp, #8]
    417a:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    417c:	4610      	mov	r0, r2
    417e:	f004 fc5a 	bl	8a36 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4182:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    4186:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4188:	6899      	ldr	r1, [r3, #8]
    418a:	40f1      	lsrs	r1, r6
    418c:	f011 0f01 	tst.w	r1, #1
    4190:	d102      	bne.n	4198 <gpio_nrfx_pin_interrupt_configure+0x40>
    4192:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    4196:	d014      	beq.n	41c2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4198:	2300      	movs	r3, #0
    419a:	aa02      	add	r2, sp, #8
    419c:	4619      	mov	r1, r3
    419e:	4628      	mov	r0, r5
    41a0:	f001 facc 	bl	573c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    41a4:	4b1b      	ldr	r3, [pc, #108]	; (4214 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    41a6:	4298      	cmp	r0, r3
    41a8:	d131      	bne.n	420e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    41aa:	2101      	movs	r1, #1
    41ac:	4628      	mov	r0, r5
    41ae:	f001 fca3 	bl	5af8 <nrfx_gpiote_trigger_enable>
	return 0;
    41b2:	2000      	movs	r0, #0
}
    41b4:	b005      	add	sp, #20
    41b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    41b8:	4628      	mov	r0, r5
    41ba:	f001 fd01 	bl	5bc0 <nrfx_gpiote_trigger_disable>
		return 0;
    41be:	2000      	movs	r0, #0
    41c0:	e7f8      	b.n	41b4 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    41c2:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    41c6:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    41c8:	2a01      	cmp	r2, #1
    41ca:	d014      	beq.n	41f6 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    41cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    41d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    41d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    41d8:	f013 0f01 	tst.w	r3, #1
    41dc:	d1dc      	bne.n	4198 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    41de:	f10d 0107 	add.w	r1, sp, #7
    41e2:	4628      	mov	r0, r5
    41e4:	f001 fc2c 	bl	5a40 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    41e8:	4b0b      	ldr	r3, [pc, #44]	; (4218 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    41ea:	4298      	cmp	r0, r3
    41ec:	d005      	beq.n	41fa <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    41ee:	f10d 0307 	add.w	r3, sp, #7
    41f2:	9303      	str	r3, [sp, #12]
    41f4:	e7d0      	b.n	4198 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    41f6:	4a09      	ldr	r2, [pc, #36]	; (421c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    41f8:	e7ea      	b.n	41d0 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    41fa:	f10d 0007 	add.w	r0, sp, #7
    41fe:	f001 fc73 	bl	5ae8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4202:	4b04      	ldr	r3, [pc, #16]	; (4214 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    4204:	4298      	cmp	r0, r3
    4206:	d0f2      	beq.n	41ee <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    4208:	f06f 000b 	mvn.w	r0, #11
    420c:	e7d2      	b.n	41b4 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    420e:	f06f 0004 	mvn.w	r0, #4
    4212:	e7cf      	b.n	41b4 <gpio_nrfx_pin_interrupt_configure+0x5c>
    4214:	0bad0000 	.word	0x0bad0000
    4218:	0bad0004 	.word	0x0bad0004
    421c:	50000300 	.word	0x50000300

00004220 <pin_uninit>:
{
    4220:	b530      	push	{r4, r5, lr}
    4222:	b083      	sub	sp, #12
    4224:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4226:	f10d 0107 	add.w	r1, sp, #7
    422a:	f001 fc09 	bl	5a40 <nrfx_gpiote_channel_get>
    422e:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4230:	4620      	mov	r0, r4
    4232:	f001 fcf5 	bl	5c20 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4236:	4b0b      	ldr	r3, [pc, #44]	; (4264 <pin_uninit+0x44>)
    4238:	4298      	cmp	r0, r3
    423a:	d10f      	bne.n	425c <pin_uninit+0x3c>
	if (free_ch) {
    423c:	429d      	cmp	r5, r3
    423e:	d005      	beq.n	424c <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4240:	4b08      	ldr	r3, [pc, #32]	; (4264 <pin_uninit+0x44>)
    4242:	4298      	cmp	r0, r3
    4244:	d107      	bne.n	4256 <pin_uninit+0x36>
    4246:	2000      	movs	r0, #0
}
    4248:	b003      	add	sp, #12
    424a:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    424c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4250:	f001 fc42 	bl	5ad8 <nrfx_gpiote_channel_free>
    4254:	e7f4      	b.n	4240 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4256:	f06f 0004 	mvn.w	r0, #4
    425a:	e7f5      	b.n	4248 <pin_uninit+0x28>
		return -EIO;
    425c:	f06f 0004 	mvn.w	r0, #4
    4260:	e7f2      	b.n	4248 <pin_uninit+0x28>
    4262:	bf00      	nop
    4264:	0bad0000 	.word	0x0bad0000

00004268 <gpio_nrfx_pin_configure>:
{
    4268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    426c:	b087      	sub	sp, #28
	return port->config;
    426e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4272:	f898 300c 	ldrb.w	r3, [r8, #12]
    4276:	f001 051f 	and.w	r5, r1, #31
    427a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    427e:	2a00      	cmp	r2, #0
    4280:	d044      	beq.n	430c <gpio_nrfx_pin_configure+0xa4>
    4282:	460c      	mov	r4, r1
    4284:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4286:	2600      	movs	r6, #0
    4288:	9603      	str	r6, [sp, #12]
    428a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    428c:	f10d 0117 	add.w	r1, sp, #23
    4290:	4620      	mov	r0, r4
    4292:	f001 fbd5 	bl	5a40 <nrfx_gpiote_channel_get>
    4296:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4298:	4633      	mov	r3, r6
    429a:	aa03      	add	r2, sp, #12
    429c:	4631      	mov	r1, r6
    429e:	4628      	mov	r0, r5
    42a0:	f001 fa4c 	bl	573c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    42a4:	4b30      	ldr	r3, [pc, #192]	; (4368 <gpio_nrfx_pin_configure+0x100>)
    42a6:	4298      	cmp	r0, r3
    42a8:	d15b      	bne.n	4362 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    42aa:	4599      	cmp	r9, r3
    42ac:	d036      	beq.n	431c <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    42ae:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    42b2:	d043      	beq.n	433c <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    42b4:	f10d 0103 	add.w	r1, sp, #3
    42b8:	4638      	mov	r0, r7
    42ba:	f004 fb43 	bl	8944 <get_drive>
		if (rv != 0) {
    42be:	4606      	mov	r6, r0
    42c0:	bb40      	cbnz	r0, 4314 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    42c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    42c6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    42ca:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    42ce:	bf0c      	ite	eq
    42d0:	2301      	moveq	r3, #1
    42d2:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    42d4:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    42d8:	4638      	mov	r0, r7
    42da:	f004 fb79 	bl	89d0 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    42de:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    42e2:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    42e6:	d01e      	beq.n	4326 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    42e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    42ec:	2101      	movs	r1, #1
    42ee:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    42f2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    42f6:	2200      	movs	r2, #0
    42f8:	a901      	add	r1, sp, #4
    42fa:	4628      	mov	r0, r5
    42fc:	f001 fad6 	bl	58ac <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4300:	4b19      	ldr	r3, [pc, #100]	; (4368 <gpio_nrfx_pin_configure+0x100>)
    4302:	4298      	cmp	r0, r3
    4304:	d006      	beq.n	4314 <gpio_nrfx_pin_configure+0xac>
    4306:	f06f 0615 	mvn.w	r6, #21
    430a:	e003      	b.n	4314 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    430c:	4628      	mov	r0, r5
    430e:	f7ff ff87 	bl	4220 <pin_uninit>
    4312:	4606      	mov	r6, r0
}
    4314:	4630      	mov	r0, r6
    4316:	b007      	add	sp, #28
    4318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    431c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4320:	f001 fbda 	bl	5ad8 <nrfx_gpiote_channel_free>
    4324:	e7c3      	b.n	42ae <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4326:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    432a:	d0e4      	beq.n	42f6 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    432c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4330:	2301      	movs	r3, #1
    4332:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    4336:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    433a:	e7dc      	b.n	42f6 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    433c:	4638      	mov	r0, r7
    433e:	f004 fb47 	bl	89d0 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    4342:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4346:	2300      	movs	r3, #0
    4348:	461a      	mov	r2, r3
    434a:	a902      	add	r1, sp, #8
    434c:	4628      	mov	r0, r5
    434e:	f001 f9f5 	bl	573c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4352:	4b05      	ldr	r3, [pc, #20]	; (4368 <gpio_nrfx_pin_configure+0x100>)
    4354:	4298      	cmp	r0, r3
    4356:	d101      	bne.n	435c <gpio_nrfx_pin_configure+0xf4>
    4358:	2600      	movs	r6, #0
    435a:	e7db      	b.n	4314 <gpio_nrfx_pin_configure+0xac>
    435c:	f06f 0615 	mvn.w	r6, #21
    4360:	e7d8      	b.n	4314 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    4362:	f06f 0615 	mvn.w	r6, #21
    4366:	e7d5      	b.n	4314 <gpio_nrfx_pin_configure+0xac>
    4368:	0bad0000 	.word	0x0bad0000

0000436c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    436c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    436e:	f001 fba9 	bl	5ac4 <nrfx_gpiote_is_init>
    4372:	b108      	cbz	r0, 4378 <gpio_nrfx_init+0xc>
		return 0;
    4374:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4376:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    4378:	f001 fb7a 	bl	5a70 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    437c:	4b08      	ldr	r3, [pc, #32]	; (43a0 <gpio_nrfx_init+0x34>)
    437e:	4298      	cmp	r0, r3
    4380:	d10a      	bne.n	4398 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4382:	2100      	movs	r1, #0
    4384:	4807      	ldr	r0, [pc, #28]	; (43a4 <gpio_nrfx_init+0x38>)
    4386:	f001 fb55 	bl	5a34 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    438a:	2200      	movs	r2, #0
    438c:	2105      	movs	r1, #5
    438e:	2006      	movs	r0, #6
    4390:	f7fe fad6 	bl	2940 <z_arm_irq_priority_set>
	return 0;
    4394:	2000      	movs	r0, #0
    4396:	e7ee      	b.n	4376 <gpio_nrfx_init+0xa>
		return -EIO;
    4398:	f06f 0004 	mvn.w	r0, #4
    439c:	e7eb      	b.n	4376 <gpio_nrfx_init+0xa>
    439e:	bf00      	nop
    43a0:	0bad0000 	.word	0x0bad0000
    43a4:	00008ad5 	.word	0x00008ad5

000043a8 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    43a8:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    43aa:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    43ac:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    43b0:	d06f      	beq.n	4492 <baudrate_set+0xea>
    43b2:	d83a      	bhi.n	442a <baudrate_set+0x82>
    43b4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    43b8:	d06e      	beq.n	4498 <baudrate_set+0xf0>
    43ba:	d90a      	bls.n	43d2 <baudrate_set+0x2a>
    43bc:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    43c0:	d075      	beq.n	44ae <baudrate_set+0x106>
    43c2:	d924      	bls.n	440e <baudrate_set+0x66>
    43c4:	f647 2312 	movw	r3, #31250	; 0x7a12
    43c8:	4299      	cmp	r1, r3
    43ca:	d12b      	bne.n	4424 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    43cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    43d0:	e013      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    43d2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    43d6:	d061      	beq.n	449c <baudrate_set+0xf4>
    43d8:	d907      	bls.n	43ea <baudrate_set+0x42>
    43da:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    43de:	d063      	beq.n	44a8 <baudrate_set+0x100>
    43e0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    43e4:	d110      	bne.n	4408 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    43e6:	4b3c      	ldr	r3, [pc, #240]	; (44d8 <baudrate_set+0x130>)
    43e8:	e007      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    43ea:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    43ee:	d058      	beq.n	44a2 <baudrate_set+0xfa>
    43f0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    43f4:	d105      	bne.n	4402 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    43f6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    43fa:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    43fe:	2000      	movs	r0, #0
    4400:	4770      	bx	lr
	switch (baudrate) {
    4402:	f06f 0015 	mvn.w	r0, #21
    4406:	4770      	bx	lr
    4408:	f06f 0015 	mvn.w	r0, #21
    440c:	4770      	bx	lr
    440e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    4412:	d04e      	beq.n	44b2 <baudrate_set+0x10a>
    4414:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    4418:	d101      	bne.n	441e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    441a:	4b30      	ldr	r3, [pc, #192]	; (44dc <baudrate_set+0x134>)
    441c:	e7ed      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    441e:	f06f 0015 	mvn.w	r0, #21
    4422:	4770      	bx	lr
    4424:	f06f 0015 	mvn.w	r0, #21
    4428:	4770      	bx	lr
    442a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    442e:	d042      	beq.n	44b6 <baudrate_set+0x10e>
    4430:	d909      	bls.n	4446 <baudrate_set+0x9e>
    4432:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    4436:	d046      	beq.n	44c6 <baudrate_set+0x11e>
    4438:	d91f      	bls.n	447a <baudrate_set+0xd2>
    443a:	4b29      	ldr	r3, [pc, #164]	; (44e0 <baudrate_set+0x138>)
    443c:	4299      	cmp	r1, r3
    443e:	d148      	bne.n	44d2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4440:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4444:	e7d9      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    4446:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    444a:	d037      	beq.n	44bc <baudrate_set+0x114>
    444c:	d905      	bls.n	445a <baudrate_set+0xb2>
    444e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    4452:	d10f      	bne.n	4474 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4454:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4458:	e7cf      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    445a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    445e:	4299      	cmp	r1, r3
    4460:	d02e      	beq.n	44c0 <baudrate_set+0x118>
    4462:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    4466:	d102      	bne.n	446e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4468:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    446c:	e7c5      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    446e:	f06f 0015 	mvn.w	r0, #21
    4472:	4770      	bx	lr
    4474:	f06f 0015 	mvn.w	r0, #21
    4478:	4770      	bx	lr
    447a:	4b1a      	ldr	r3, [pc, #104]	; (44e4 <baudrate_set+0x13c>)
    447c:	4299      	cmp	r1, r3
    447e:	d025      	beq.n	44cc <baudrate_set+0x124>
    4480:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4484:	d102      	bne.n	448c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4486:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    448a:	e7b6      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    448c:	f06f 0015 	mvn.w	r0, #21
    4490:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4492:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4496:	e7b0      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4498:	4b13      	ldr	r3, [pc, #76]	; (44e8 <baudrate_set+0x140>)
    449a:	e7ae      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    449c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    44a0:	e7ab      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    44a2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    44a6:	e7a8      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    44a8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    44ac:	e7a5      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    44ae:	4b0f      	ldr	r3, [pc, #60]	; (44ec <baudrate_set+0x144>)
    44b0:	e7a3      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    44b2:	4b0f      	ldr	r3, [pc, #60]	; (44f0 <baudrate_set+0x148>)
    44b4:	e7a1      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    44b6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    44ba:	e79e      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    44bc:	4b0d      	ldr	r3, [pc, #52]	; (44f4 <baudrate_set+0x14c>)
    44be:	e79c      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    44c0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    44c4:	e799      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    44c6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    44ca:	e796      	b.n	43fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    44cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    44d0:	e793      	b.n	43fa <baudrate_set+0x52>
	switch (baudrate) {
    44d2:	f06f 0015 	mvn.w	r0, #21
}
    44d6:	4770      	bx	lr
    44d8:	0013b000 	.word	0x0013b000
    44dc:	004ea000 	.word	0x004ea000
    44e0:	000f4240 	.word	0x000f4240
    44e4:	0003d090 	.word	0x0003d090
    44e8:	00275000 	.word	0x00275000
    44ec:	0075c000 	.word	0x0075c000
    44f0:	003af000 	.word	0x003af000
    44f4:	013a9000 	.word	0x013a9000

000044f8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    44f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44fc:	4605      	mov	r5, r0
    44fe:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    4500:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4504:	f004 fee0 	bl	92c8 <k_is_in_isr>
    4508:	b920      	cbnz	r0, 4514 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    450a:	4b16      	ldr	r3, [pc, #88]	; (4564 <uarte_nrfx_poll_out+0x6c>)
    450c:	781b      	ldrb	r3, [r3, #0]
    450e:	b143      	cbz	r3, 4522 <uarte_nrfx_poll_out+0x2a>
    4510:	2300      	movs	r3, #0
    4512:	e000      	b.n	4516 <uarte_nrfx_poll_out+0x1e>
    4514:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    4516:	b953      	cbnz	r3, 452e <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    4518:	4628      	mov	r0, r5
    451a:	f004 fbf2 	bl	8d02 <wait_tx_ready>
    451e:	4606      	mov	r6, r0
    4520:	e013      	b.n	454a <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4522:	2301      	movs	r3, #1
    4524:	e7f7      	b.n	4516 <uarte_nrfx_poll_out+0x1e>
    4526:	f384 8811 	msr	BASEPRI, r4
    452a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    452e:	f04f 0320 	mov.w	r3, #32
    4532:	f3ef 8411 	mrs	r4, BASEPRI
    4536:	f383 8812 	msr	BASEPRI_MAX, r3
    453a:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    453e:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    4540:	4628      	mov	r0, r5
    4542:	f004 fb90 	bl	8c66 <is_tx_ready>
    4546:	2800      	cmp	r0, #0
    4548:	d0ed      	beq.n	4526 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    454a:	4641      	mov	r1, r8
    454c:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    4550:	2201      	movs	r2, #1
    4552:	4628      	mov	r0, r5
    4554:	f004 fba1 	bl	8c9a <tx_start>
	__asm__ volatile(
    4558:	f386 8811 	msr	BASEPRI, r6
    455c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4564:	200015df 	.word	0x200015df

00004568 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4568:	b530      	push	{r4, r5, lr}
    456a:	b087      	sub	sp, #28
    456c:	4604      	mov	r4, r0
    456e:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4570:	f101 0012 	add.w	r0, r1, #18
    4574:	f001 fba8 	bl	5cc8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4578:	4b1e      	ldr	r3, [pc, #120]	; (45f4 <endtx_stoptx_ppi_init+0x8c>)
    457a:	4298      	cmp	r0, r3
    457c:	d112      	bne.n	45a4 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    457e:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4580:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4584:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4586:	4a1c      	ldr	r2, [pc, #112]	; (45f8 <endtx_stoptx_ppi_init+0x90>)
    4588:	33a2      	adds	r3, #162	; 0xa2
    458a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    458e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4592:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4594:	7ca9      	ldrb	r1, [r5, #18]
    4596:	2301      	movs	r3, #1
    4598:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    459a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    459e:	2000      	movs	r0, #0
}
    45a0:	b007      	add	sp, #28
    45a2:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    45a4:	4b15      	ldr	r3, [pc, #84]	; (45fc <endtx_stoptx_ppi_init+0x94>)
    45a6:	9305      	str	r3, [sp, #20]
    45a8:	2300      	movs	r3, #0
    45aa:	2202      	movs	r2, #2
    45ac:	f362 0307 	bfi	r3, r2, #0, #8
    45b0:	f36f 230f 	bfc	r3, #8, #8
    45b4:	f36f 4317 	bfc	r3, #16, #8
    45b8:	f36f 631f 	bfc	r3, #24, #8
    45bc:	9304      	str	r3, [sp, #16]
    45be:	2100      	movs	r1, #0
    45c0:	f36f 0100 	bfc	r1, #0, #1
    45c4:	f36f 0141 	bfc	r1, #1, #1
    45c8:	f36f 0182 	bfc	r1, #2, #1
    45cc:	f36f 01c5 	bfc	r1, #3, #3
    45d0:	2301      	movs	r3, #1
    45d2:	f363 1188 	bfi	r1, r3, #6, #3
    45d6:	2308      	movs	r3, #8
    45d8:	f363 2152 	bfi	r1, r3, #9, #10
    45dc:	f36f 41de 	bfc	r1, #19, #12
    45e0:	f36f 71df 	bfc	r1, #31, #1
    45e4:	2300      	movs	r3, #0
    45e6:	aa04      	add	r2, sp, #16
    45e8:	4805      	ldr	r0, [pc, #20]	; (4600 <endtx_stoptx_ppi_init+0x98>)
    45ea:	f003 ff1c 	bl	8426 <z_impl_z_log_msg2_static_create>
		return -EIO;
    45ee:	f06f 0004 	mvn.w	r0, #4
    45f2:	e7d5      	b.n	45a0 <endtx_stoptx_ppi_init+0x38>
    45f4:	0bad0000 	.word	0x0bad0000
    45f8:	4001f000 	.word	0x4001f000
    45fc:	0000a29c 	.word	0x0000a29c
    4600:	00009a34 	.word	0x00009a34

00004604 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4604:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    4608:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    460c:	4b01      	ldr	r3, [pc, #4]	; (4614 <set_comparator+0x10>)
    460e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    4612:	4770      	bx	lr
    4614:	40011000 	.word	0x40011000

00004618 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    4618:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    461c:	4b01      	ldr	r3, [pc, #4]	; (4624 <get_comparator+0xc>)
    461e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    4622:	4770      	bx	lr
    4624:	40011000 	.word	0x40011000

00004628 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    462c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    462e:	4a02      	ldr	r2, [pc, #8]	; (4638 <event_enable+0x10>)
    4630:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	40011000 	.word	0x40011000

0000463c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    463c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4640:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4642:	4a02      	ldr	r2, [pc, #8]	; (464c <event_disable+0x10>)
    4644:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    4648:	4770      	bx	lr
    464a:	bf00      	nop
    464c:	40011000 	.word	0x40011000

00004650 <counter>:
     return p_reg->COUNTER;
    4650:	4b01      	ldr	r3, [pc, #4]	; (4658 <counter+0x8>)
    4652:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    4656:	4770      	bx	lr
    4658:	40011000 	.word	0x40011000

0000465c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    465c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    465e:	2301      	movs	r3, #1
    4660:	4083      	lsls	r3, r0
    4662:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4666:	4a10      	ldr	r2, [pc, #64]	; (46a8 <compare_int_lock+0x4c>)
    4668:	f3bf 8f5b 	dmb	ish
    466c:	e852 1f00 	ldrex	r1, [r2]
    4670:	ea01 0e0c 	and.w	lr, r1, ip
    4674:	e842 e400 	strex	r4, lr, [r2]
    4678:	2c00      	cmp	r4, #0
    467a:	d1f7      	bne.n	466c <compare_int_lock+0x10>
    467c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4680:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4684:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4688:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    468c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4690:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4694:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4698:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    469c:	420b      	tst	r3, r1
}
    469e:	bf14      	ite	ne
    46a0:	2001      	movne	r0, #1
    46a2:	2000      	moveq	r0, #0
    46a4:	bd10      	pop	{r4, pc}
    46a6:	bf00      	nop
    46a8:	20000ef0 	.word	0x20000ef0

000046ac <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    46ac:	b570      	push	{r4, r5, r6, lr}
    46ae:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    46b0:	f004 fbe1 	bl	8e76 <full_int_lock>
    46b4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    46b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    46ba:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    46bc:	4a17      	ldr	r2, [pc, #92]	; (471c <channel_processing_check_and_clear+0x70>)
    46be:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    46c2:	4213      	tst	r3, r2
    46c4:	d105      	bne.n	46d2 <channel_processing_check_and_clear+0x26>
	bool result = false;
    46c6:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    46c8:	4628      	mov	r0, r5
    46ca:	f004 fbdd 	bl	8e88 <full_int_unlock>

	return result;
}
    46ce:	4630      	mov	r0, r6
    46d0:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    46d2:	2301      	movs	r3, #1
    46d4:	40a3      	lsls	r3, r4
    46d6:	43db      	mvns	r3, r3
    46d8:	4a11      	ldr	r2, [pc, #68]	; (4720 <channel_processing_check_and_clear+0x74>)
    46da:	f3bf 8f5b 	dmb	ish
    46de:	e852 1f00 	ldrex	r1, [r2]
    46e2:	ea01 0003 	and.w	r0, r1, r3
    46e6:	e842 0600 	strex	r6, r0, [r2]
    46ea:	2e00      	cmp	r6, #0
    46ec:	d1f7      	bne.n	46de <channel_processing_check_and_clear+0x32>
    46ee:	f3bf 8f5b 	dmb	ish
    46f2:	b959      	cbnz	r1, 470c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    46f4:	f104 0350 	add.w	r3, r4, #80	; 0x50
    46f8:	009b      	lsls	r3, r3, #2
    46fa:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4700:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4704:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4706:	b113      	cbz	r3, 470e <channel_processing_check_and_clear+0x62>
    4708:	2301      	movs	r3, #1
    470a:	e000      	b.n	470e <channel_processing_check_and_clear+0x62>
    470c:	2301      	movs	r3, #1
		if (result) {
    470e:	461e      	mov	r6, r3
    4710:	2b00      	cmp	r3, #0
    4712:	d0d9      	beq.n	46c8 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    4714:	4620      	mov	r0, r4
    4716:	f004 fb9f 	bl	8e58 <event_clear>
    471a:	e7d5      	b.n	46c8 <channel_processing_check_and_clear+0x1c>
    471c:	40011000 	.word	0x40011000
    4720:	20000eec 	.word	0x20000eec

00004724 <compare_int_unlock>:
	if (key) {
    4724:	b901      	cbnz	r1, 4728 <compare_int_unlock+0x4>
}
    4726:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    4728:	2301      	movs	r3, #1
    472a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    472c:	4a11      	ldr	r2, [pc, #68]	; (4774 <compare_int_unlock+0x50>)
    472e:	f3bf 8f5b 	dmb	ish
    4732:	e852 1f00 	ldrex	r1, [r2]
    4736:	4319      	orrs	r1, r3
    4738:	e842 1c00 	strex	ip, r1, [r2]
    473c:	f1bc 0f00 	cmp.w	ip, #0
    4740:	d1f7      	bne.n	4732 <compare_int_unlock+0xe>
    4742:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    474a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    474c:	4a0a      	ldr	r2, [pc, #40]	; (4778 <compare_int_unlock+0x54>)
    474e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4752:	f3bf 8f5b 	dmb	ish
    4756:	4b09      	ldr	r3, [pc, #36]	; (477c <compare_int_unlock+0x58>)
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    475e:	fa23 f000 	lsr.w	r0, r3, r0
    4762:	f010 0f01 	tst.w	r0, #1
    4766:	d0de      	beq.n	4726 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4768:	4b05      	ldr	r3, [pc, #20]	; (4780 <compare_int_unlock+0x5c>)
    476a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    476e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4772:	e7d8      	b.n	4726 <compare_int_unlock+0x2>
    4774:	20000ef0 	.word	0x20000ef0
    4778:	40011000 	.word	0x40011000
    477c:	20000eec 	.word	0x20000eec
    4780:	e000e100 	.word	0xe000e100

00004784 <sys_clock_timeout_handler>:
{
    4784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4788:	4607      	mov	r7, r0
    478a:	4614      	mov	r4, r2
    478c:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    478e:	4610      	mov	r0, r2
    4790:	4619      	mov	r1, r3
    4792:	f004 fb6d 	bl	8e70 <absolute_time_to_cc>
    4796:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4798:	4b15      	ldr	r3, [pc, #84]	; (47f0 <sys_clock_timeout_handler+0x6c>)
    479a:	681a      	ldr	r2, [r3, #0]
    479c:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    479e:	601c      	str	r4, [r3, #0]
    47a0:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    47a2:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    47a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    47aa:	d309      	bcc.n	47c0 <sys_clock_timeout_handler+0x3c>
	return false;
    47ac:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    47ae:	f002 fd17 	bl	71e0 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    47b2:	4638      	mov	r0, r7
    47b4:	f7ff ff30 	bl	4618 <get_comparator>
    47b8:	42a8      	cmp	r0, r5
    47ba:	d00e      	beq.n	47da <sys_clock_timeout_handler+0x56>
}
    47bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    47c0:	4b0c      	ldr	r3, [pc, #48]	; (47f4 <sys_clock_timeout_handler+0x70>)
    47c2:	681b      	ldr	r3, [r3, #0]
    47c4:	0a1a      	lsrs	r2, r3, #8
    47c6:	061b      	lsls	r3, r3, #24
    47c8:	eb15 0803 	adds.w	r8, r5, r3
    47cc:	f142 0900 	adc.w	r9, r2, #0
    47d0:	4b09      	ldr	r3, [pc, #36]	; (47f8 <sys_clock_timeout_handler+0x74>)
    47d2:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    47d6:	2401      	movs	r4, #1
    47d8:	e7e9      	b.n	47ae <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    47da:	b11c      	cbz	r4, 47e4 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    47dc:	4638      	mov	r0, r7
    47de:	f7ff ff23 	bl	4628 <event_enable>
}
    47e2:	e7eb      	b.n	47bc <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    47e4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    47e8:	4638      	mov	r0, r7
    47ea:	f7ff ff0b 	bl	4604 <set_comparator>
    47ee:	e7f5      	b.n	47dc <sys_clock_timeout_handler+0x58>
    47f0:	200006d0 	.word	0x200006d0
    47f4:	20000ef4 	.word	0x20000ef4
    47f8:	200006b8 	.word	0x200006b8

000047fc <z_nrf_rtc_timer_read>:
{
    47fc:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    47fe:	4b0d      	ldr	r3, [pc, #52]	; (4834 <z_nrf_rtc_timer_read+0x38>)
    4800:	681c      	ldr	r4, [r3, #0]
    4802:	0a25      	lsrs	r5, r4, #8
    4804:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4806:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    480a:	f7ff ff21 	bl	4650 <counter>
    480e:	4603      	mov	r3, r0
	val += cntr;
    4810:	1900      	adds	r0, r0, r4
    4812:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    481a:	d20a      	bcs.n	4832 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    481c:	4b06      	ldr	r3, [pc, #24]	; (4838 <z_nrf_rtc_timer_read+0x3c>)
    481e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4822:	4290      	cmp	r0, r2
    4824:	eb71 0303 	sbcs.w	r3, r1, r3
    4828:	d203      	bcs.n	4832 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    482a:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    482e:	f141 0100 	adc.w	r1, r1, #0
}
    4832:	bd38      	pop	{r3, r4, r5, pc}
    4834:	20000ef4 	.word	0x20000ef4
    4838:	200006b8 	.word	0x200006b8

0000483c <compare_set_nolocks>:
{
    483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    483e:	4606      	mov	r6, r0
    4840:	4614      	mov	r4, r2
    4842:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    4844:	4610      	mov	r0, r2
    4846:	4619      	mov	r1, r3
    4848:	f004 fb12 	bl	8e70 <absolute_time_to_cc>
    484c:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    484e:	f7ff ffd5 	bl	47fc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4852:	42a0      	cmp	r0, r4
    4854:	eb71 0305 	sbcs.w	r3, r1, r5
    4858:	d21d      	bcs.n	4896 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    485a:	1a23      	subs	r3, r4, r0
    485c:	eb65 0101 	sbc.w	r1, r5, r1
    4860:	4a1b      	ldr	r2, [pc, #108]	; (48d0 <compare_set_nolocks+0x94>)
    4862:	4293      	cmp	r3, r2
    4864:	f171 0300 	sbcs.w	r3, r1, #0
    4868:	d22f      	bcs.n	48ca <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    486a:	4b1a      	ldr	r3, [pc, #104]	; (48d4 <compare_set_nolocks+0x98>)
    486c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4870:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4874:	42ab      	cmp	r3, r5
    4876:	bf08      	it	eq
    4878:	42a2      	cmpeq	r2, r4
    487a:	d01a      	beq.n	48b2 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    487c:	4639      	mov	r1, r7
    487e:	4630      	mov	r0, r6
    4880:	f004 fb07 	bl	8e92 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4884:	4639      	mov	r1, r7
    4886:	f004 fae3 	bl	8e50 <counter_sub>
    488a:	1900      	adds	r0, r0, r4
    488c:	f145 0300 	adc.w	r3, r5, #0
    4890:	4604      	mov	r4, r0
    4892:	461d      	mov	r5, r3
    4894:	e00d      	b.n	48b2 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    4896:	2301      	movs	r3, #1
    4898:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    489a:	4a0f      	ldr	r2, [pc, #60]	; (48d8 <compare_set_nolocks+0x9c>)
    489c:	f3bf 8f5b 	dmb	ish
    48a0:	e852 1f00 	ldrex	r1, [r2]
    48a4:	4319      	orrs	r1, r3
    48a6:	e842 1000 	strex	r0, r1, [r2]
    48aa:	2800      	cmp	r0, #0
    48ac:	d1f8      	bne.n	48a0 <compare_set_nolocks+0x64>
    48ae:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    48b2:	4b08      	ldr	r3, [pc, #32]	; (48d4 <compare_set_nolocks+0x98>)
    48b4:	0132      	lsls	r2, r6, #4
    48b6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    48ba:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    48be:	9906      	ldr	r1, [sp, #24]
    48c0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    48c2:	9b07      	ldr	r3, [sp, #28]
    48c4:	6073      	str	r3, [r6, #4]
	return ret;
    48c6:	2000      	movs	r0, #0
}
    48c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    48ca:	f06f 0015 	mvn.w	r0, #21
    48ce:	e7fb      	b.n	48c8 <compare_set_nolocks+0x8c>
    48d0:	01000001 	.word	0x01000001
    48d4:	200006c0 	.word	0x200006c0
    48d8:	20000eec 	.word	0x20000eec

000048dc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    48dc:	b530      	push	{r4, r5, lr}
    48de:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    48e0:	2300      	movs	r3, #0
    48e2:	4a1d      	ldr	r2, [pc, #116]	; (4958 <sys_clock_driver_init+0x7c>)
    48e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    48e8:	2b00      	cmp	r3, #0
    48ea:	dd24      	ble.n	4936 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    48ec:	4c1a      	ldr	r4, [pc, #104]	; (4958 <sys_clock_driver_init+0x7c>)
    48ee:	2502      	movs	r5, #2
    48f0:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48f4:	4b19      	ldr	r3, [pc, #100]	; (495c <sys_clock_driver_init+0x80>)
    48f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    48fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    48fe:	2200      	movs	r2, #0
    4900:	2101      	movs	r1, #1
    4902:	2011      	movs	r0, #17
    4904:	f7fe f81c 	bl	2940 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4908:	2011      	movs	r0, #17
    490a:	f7fd fffd 	bl	2908 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    490e:	2301      	movs	r3, #1
    4910:	60a3      	str	r3, [r4, #8]
    4912:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4914:	4a12      	ldr	r2, [pc, #72]	; (4960 <sys_clock_driver_init+0x84>)
    4916:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4918:	2400      	movs	r4, #0
    491a:	9401      	str	r4, [sp, #4]
    491c:	4b11      	ldr	r3, [pc, #68]	; (4964 <sys_clock_driver_init+0x88>)
    491e:	9300      	str	r3, [sp, #0]
    4920:	4a11      	ldr	r2, [pc, #68]	; (4968 <sys_clock_driver_init+0x8c>)
    4922:	2300      	movs	r3, #0
    4924:	4620      	mov	r0, r4
    4926:	f004 faef 	bl	8f08 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    492a:	4628      	mov	r0, r5
    492c:	f7ff fba8 	bl	4080 <z_nrf_clock_control_lf_on>

	return 0;
}
    4930:	4620      	mov	r0, r4
    4932:	b003      	add	sp, #12
    4934:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4936:	4a0d      	ldr	r2, [pc, #52]	; (496c <sys_clock_driver_init+0x90>)
    4938:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    493c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4944:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4948:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    494c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    494e:	4902      	ldr	r1, [pc, #8]	; (4958 <sys_clock_driver_init+0x7c>)
    4950:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4954:	3301      	adds	r3, #1
    4956:	e7c7      	b.n	48e8 <sys_clock_driver_init+0xc>
    4958:	40011000 	.word	0x40011000
    495c:	e000e100 	.word	0xe000e100
    4960:	20000ef0 	.word	0x20000ef0
    4964:	00004785 	.word	0x00004785
    4968:	007fffff 	.word	0x007fffff
    496c:	200006c0 	.word	0x200006c0

00004970 <process_channel>:
{
    4970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4974:	b082      	sub	sp, #8
    4976:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4978:	f7ff fe98 	bl	46ac <channel_processing_check_and_clear>
    497c:	b910      	cbnz	r0, 4984 <process_channel+0x14>
}
    497e:	b002      	add	sp, #8
    4980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4984:	f7ff ff3a 	bl	47fc <z_nrf_rtc_timer_read>
    4988:	4682      	mov	sl, r0
    498a:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    498c:	f004 fa73 	bl	8e76 <full_int_lock>
    4990:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    4992:	4b13      	ldr	r3, [pc, #76]	; (49e0 <process_channel+0x70>)
    4994:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4998:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    499c:	45c2      	cmp	sl, r8
    499e:	eb76 0309 	sbcs.w	r3, r6, r9
    49a2:	d20b      	bcs.n	49bc <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    49a4:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    49a6:	4628      	mov	r0, r5
    49a8:	f004 fa6e 	bl	8e88 <full_int_unlock>
		if (handler) {
    49ac:	2e00      	cmp	r6, #0
    49ae:	d0e6      	beq.n	497e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    49b0:	9700      	str	r7, [sp, #0]
    49b2:	4642      	mov	r2, r8
    49b4:	464b      	mov	r3, r9
    49b6:	4620      	mov	r0, r4
    49b8:	47b0      	blx	r6
}
    49ba:	e7e0      	b.n	497e <process_channel+0xe>
			handler = cc_data[chan].callback;
    49bc:	4a08      	ldr	r2, [pc, #32]	; (49e0 <process_channel+0x70>)
    49be:	0123      	lsls	r3, r4, #4
    49c0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    49c4:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    49c6:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    49c8:	2000      	movs	r0, #0
    49ca:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    49cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    49d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    49d8:	4620      	mov	r0, r4
    49da:	f7ff fe2f 	bl	463c <event_disable>
    49de:	e7e2      	b.n	49a6 <process_channel+0x36>
    49e0:	200006c0 	.word	0x200006c0

000049e4 <rtc_nrf_isr>:
{
    49e4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    49e6:	4b0e      	ldr	r3, [pc, #56]	; (4a20 <rtc_nrf_isr+0x3c>)
    49e8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    49ec:	f013 0f02 	tst.w	r3, #2
    49f0:	d00d      	beq.n	4a0e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49f2:	4b0b      	ldr	r3, [pc, #44]	; (4a20 <rtc_nrf_isr+0x3c>)
    49f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    49f8:	b14b      	cbz	r3, 4a0e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    49fa:	4b09      	ldr	r3, [pc, #36]	; (4a20 <rtc_nrf_isr+0x3c>)
    49fc:	2200      	movs	r2, #0
    49fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4a02:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    4a06:	4a07      	ldr	r2, [pc, #28]	; (4a24 <rtc_nrf_isr+0x40>)
    4a08:	6813      	ldr	r3, [r2, #0]
    4a0a:	3301      	adds	r3, #1
    4a0c:	6013      	str	r3, [r2, #0]
{
    4a0e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4a10:	2c00      	cmp	r4, #0
    4a12:	dd00      	ble.n	4a16 <rtc_nrf_isr+0x32>
}
    4a14:	bd10      	pop	{r4, pc}
		process_channel(chan);
    4a16:	4620      	mov	r0, r4
    4a18:	f7ff ffaa 	bl	4970 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4a1c:	3401      	adds	r4, #1
    4a1e:	e7f7      	b.n	4a10 <rtc_nrf_isr+0x2c>
    4a20:	40011000 	.word	0x40011000
    4a24:	20000ef4 	.word	0x20000ef4

00004a28 <sys_clock_set_timeout>:
{
    4a28:	b510      	push	{r4, lr}
    4a2a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4a2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4a30:	d006      	beq.n	4a40 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4a32:	2801      	cmp	r0, #1
    4a34:	dd06      	ble.n	4a44 <sys_clock_set_timeout+0x1c>
    4a36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4a3a:	da05      	bge.n	4a48 <sys_clock_set_timeout+0x20>
    4a3c:	1e44      	subs	r4, r0, #1
    4a3e:	e004      	b.n	4a4a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4a40:	480f      	ldr	r0, [pc, #60]	; (4a80 <sys_clock_set_timeout+0x58>)
    4a42:	e7f8      	b.n	4a36 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4a44:	2400      	movs	r4, #0
    4a46:	e000      	b.n	4a4a <sys_clock_set_timeout+0x22>
    4a48:	4c0d      	ldr	r4, [pc, #52]	; (4a80 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4a4a:	f7ff fed7 	bl	47fc <z_nrf_rtc_timer_read>
    4a4e:	4b0d      	ldr	r3, [pc, #52]	; (4a84 <sys_clock_set_timeout+0x5c>)
    4a50:	6819      	ldr	r1, [r3, #0]
    4a52:	685b      	ldr	r3, [r3, #4]
    4a54:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    4a56:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4a5a:	d300      	bcc.n	4a5e <sys_clock_set_timeout+0x36>
		ticks = 0;
    4a5c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4a5e:	4420      	add	r0, r4
    4a60:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    4a62:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    4a66:	d300      	bcc.n	4a6a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4a68:	4a05      	ldr	r2, [pc, #20]	; (4a80 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    4a6a:	2000      	movs	r0, #0
    4a6c:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4a6e:	9001      	str	r0, [sp, #4]
    4a70:	4905      	ldr	r1, [pc, #20]	; (4a88 <sys_clock_set_timeout+0x60>)
    4a72:	9100      	str	r1, [sp, #0]
    4a74:	f143 0300 	adc.w	r3, r3, #0
    4a78:	f004 fa46 	bl	8f08 <compare_set>
}
    4a7c:	b002      	add	sp, #8
    4a7e:	bd10      	pop	{r4, pc}
    4a80:	007fffff 	.word	0x007fffff
    4a84:	200006d0 	.word	0x200006d0
    4a88:	00004785 	.word	0x00004785

00004a8c <sys_clock_elapsed>:
{
    4a8c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4a8e:	f7ff feb5 	bl	47fc <z_nrf_rtc_timer_read>
    4a92:	4b02      	ldr	r3, [pc, #8]	; (4a9c <sys_clock_elapsed+0x10>)
    4a94:	681b      	ldr	r3, [r3, #0]
}
    4a96:	1ac0      	subs	r0, r0, r3
    4a98:	bd08      	pop	{r3, pc}
    4a9a:	bf00      	nop
    4a9c:	200006d0 	.word	0x200006d0

00004aa0 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    4aa0:	b500      	push	{lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    4aa2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    4aa6:	d001      	beq.n	4aac <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4aa8:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    4aaa:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    4aac:	f3c0 1e81 	ubfx	lr, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    4ab0:	f3c0 2c03 	ubfx	ip, r0, #8, #4
    *p_pin = pin_number & 0x1F;
    4ab4:	f000 031f 	and.w	r3, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ab8:	f010 0f20 	tst.w	r0, #32
    4abc:	d10d      	bne.n	4ada <nrf_pin_configure+0x3a>
        case 0: return NRF_P0;
    4abe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4ac2:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4ac6:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4aca:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4ace:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4ad2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    4ad6:	f85d fb04 	ldr.w	pc, [sp], #4
        case 1: return NRF_P1;
    4ada:	4801      	ldr	r0, [pc, #4]	; (4ae0 <nrf_pin_configure+0x40>)
    4adc:	e7f1      	b.n	4ac2 <nrf_pin_configure+0x22>
    4ade:	bf00      	nop
    4ae0:	50000300 	.word	0x50000300

00004ae4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ae6:	4605      	mov	r5, r0
    4ae8:	460e      	mov	r6, r1
    4aea:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4aec:	2400      	movs	r4, #0
    4aee:	e017      	b.n	4b20 <pinctrl_configure_pins+0x3c>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    4af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4af4:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    4af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    4afc:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b00:	f012 0f20 	tst.w	r2, #32
    4b04:	d160      	bne.n	4bc8 <pinctrl_configure_pins+0xe4>
        case 0: return NRF_P0;
    4b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4b0a:	2101      	movs	r1, #1
    4b0c:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
    4b10:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4b14:	460a      	mov	r2, r1
    4b16:	5828      	ldr	r0, [r5, r0]
    4b18:	f7ff ffc2 	bl	4aa0 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4b1c:	3401      	adds	r4, #1
    4b1e:	b2e4      	uxtb	r4, r4
    4b20:	42b4      	cmp	r4, r6
    4b22:	f080 81bf 	bcs.w	4ea4 <pinctrl_configure_pins+0x3c0>
		switch (NRF_GET_FUN(pins[i])) {
    4b26:	00a0      	lsls	r0, r4, #2
    4b28:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4b2c:	0c1a      	lsrs	r2, r3, #16
    4b2e:	2a22      	cmp	r2, #34	; 0x22
    4b30:	f200 81ba 	bhi.w	4ea8 <pinctrl_configure_pins+0x3c4>
    4b34:	a101      	add	r1, pc, #4	; (adr r1, 4b3c <pinctrl_configure_pins+0x58>)
    4b36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4b3a:	bf00      	nop
    4b3c:	00004af1 	.word	0x00004af1
    4b40:	00004bcd 	.word	0x00004bcd
    4b44:	00004be3 	.word	0x00004be3
    4b48:	00004c15 	.word	0x00004c15
    4b4c:	00004c2b 	.word	0x00004c2b
    4b50:	00004c5d 	.word	0x00004c5d
    4b54:	00004c8f 	.word	0x00004c8f
    4b58:	00004ea9 	.word	0x00004ea9
    4b5c:	00004ea9 	.word	0x00004ea9
    4b60:	00004ea9 	.word	0x00004ea9
    4b64:	00004ea9 	.word	0x00004ea9
    4b68:	00004ca5 	.word	0x00004ca5
    4b6c:	00004cbb 	.word	0x00004cbb
    4b70:	00004ea9 	.word	0x00004ea9
    4b74:	00004ea9 	.word	0x00004ea9
    4b78:	00004ea9 	.word	0x00004ea9
    4b7c:	00004ea9 	.word	0x00004ea9
    4b80:	00004ea9 	.word	0x00004ea9
    4b84:	00004ea9 	.word	0x00004ea9
    4b88:	00004ea9 	.word	0x00004ea9
    4b8c:	00004ea9 	.word	0x00004ea9
    4b90:	00004ea9 	.word	0x00004ea9
    4b94:	00004cd1 	.word	0x00004cd1
    4b98:	00004d25 	.word	0x00004d25
    4b9c:	00004d79 	.word	0x00004d79
    4ba0:	00004dcd 	.word	0x00004dcd
    4ba4:	00004ea9 	.word	0x00004ea9
    4ba8:	00004ea9 	.word	0x00004ea9
    4bac:	00004ea9 	.word	0x00004ea9
    4bb0:	00004e21 	.word	0x00004e21
    4bb4:	00004e37 	.word	0x00004e37
    4bb8:	00004e4d 	.word	0x00004e4d
    4bbc:	00004e63 	.word	0x00004e63
    4bc0:	00004e79 	.word	0x00004e79
    4bc4:	00004e8f 	.word	0x00004e8f
        case 1: return NRF_P1;
    4bc8:	4ab9      	ldr	r2, [pc, #740]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4bca:	e79e      	b.n	4b0a <pinctrl_configure_pins+0x26>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    4bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4bd0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4bd4:	2200      	movs	r2, #0
    4bd6:	4611      	mov	r1, r2
    4bd8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4bdc:	f7ff ff60 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4be0:	e79c      	b.n	4b1c <pinctrl_configure_pins+0x38>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    4be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4be6:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    4bea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    4bee:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bf2:	f012 0f20 	tst.w	r2, #32
    4bf6:	d10b      	bne.n	4c10 <pinctrl_configure_pins+0x12c>
        case 0: return NRF_P0;
    4bf8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4bfc:	2101      	movs	r1, #1
    4bfe:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
    4c02:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4c06:	460a      	mov	r2, r1
    4c08:	5828      	ldr	r0, [r5, r0]
    4c0a:	f7ff ff49 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4c0e:	e785      	b.n	4b1c <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    4c10:	4aa7      	ldr	r2, [pc, #668]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4c12:	e7f3      	b.n	4bfc <pinctrl_configure_pins+0x118>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    4c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c18:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4c1c:	2200      	movs	r2, #0
    4c1e:	4611      	mov	r1, r2
    4c20:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4c24:	f7ff ff3c 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4c28:	e778      	b.n	4b1c <pinctrl_configure_pins+0x38>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    4c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c2e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4c32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    4c36:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c3a:	f012 0f20 	tst.w	r2, #32
    4c3e:	d10b      	bne.n	4c58 <pinctrl_configure_pins+0x174>
        case 0: return NRF_P0;
    4c40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4c44:	2101      	movs	r1, #1
    4c46:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
    4c4a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4c4e:	2200      	movs	r2, #0
    4c50:	5828      	ldr	r0, [r5, r0]
    4c52:	f7ff ff25 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4c56:	e761      	b.n	4b1c <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    4c58:	4a95      	ldr	r2, [pc, #596]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4c5a:	e7f3      	b.n	4c44 <pinctrl_configure_pins+0x160>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    4c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c60:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4c64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    4c68:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c6c:	f012 0f20 	tst.w	r2, #32
    4c70:	d10b      	bne.n	4c8a <pinctrl_configure_pins+0x1a6>
        case 0: return NRF_P0;
    4c72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4c76:	2101      	movs	r1, #1
    4c78:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
    4c7c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4c80:	460a      	mov	r2, r1
    4c82:	5828      	ldr	r0, [r5, r0]
    4c84:	f7ff ff0c 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4c88:	e748      	b.n	4b1c <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    4c8a:	4a89      	ldr	r2, [pc, #548]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4c8c:	e7f3      	b.n	4c76 <pinctrl_configure_pins+0x192>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    4c8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c92:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4c96:	2200      	movs	r2, #0
    4c98:	4611      	mov	r1, r2
    4c9a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4c9e:	f7ff feff 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4ca2:	e73b      	b.n	4b1c <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    4ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4ca8:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4cac:	2200      	movs	r2, #0
    4cae:	4611      	mov	r1, r2
    4cb0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4cb4:	f7ff fef4 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4cb8:	e730      	b.n	4b1c <pinctrl_configure_pins+0x38>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    4cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4cbe:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4cc2:	2200      	movs	r2, #0
    4cc4:	4611      	mov	r1, r2
    4cc6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4cca:	f7ff fee9 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4cce:	e725      	b.n	4b1c <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    4cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4cd4:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4cd8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4cdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
    4ce0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4ce4:	d111      	bne.n	4d0a <pinctrl_configure_pins+0x226>
    *p_pin = pin_number & 0x1F;
    4ce6:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4cea:	0953      	lsrs	r3, r2, #5
    4cec:	d10b      	bne.n	4d06 <pinctrl_configure_pins+0x222>
        case 0: return NRF_P0;
    4cee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4cf2:	2301      	movs	r3, #1
    4cf4:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4cf6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4cfa:	2201      	movs	r2, #1
    4cfc:	4611      	mov	r1, r2
    4cfe:	5828      	ldr	r0, [r5, r0]
    4d00:	f7ff fece 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4d04:	e70a      	b.n	4b1c <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    4d06:	4a6a      	ldr	r2, [pc, #424]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4d08:	e7f3      	b.n	4cf2 <pinctrl_configure_pins+0x20e>
    *p_pin = pin_number & 0x1F;
    4d0a:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d0e:	0953      	lsrs	r3, r2, #5
    4d10:	d106      	bne.n	4d20 <pinctrl_configure_pins+0x23c>
        case 0: return NRF_P0;
    4d12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4d16:	2301      	movs	r3, #1
    4d18:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4d1a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    4d1e:	e7ec      	b.n	4cfa <pinctrl_configure_pins+0x216>
        case 1: return NRF_P1;
    4d20:	4a63      	ldr	r2, [pc, #396]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4d22:	e7f8      	b.n	4d16 <pinctrl_configure_pins+0x232>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    4d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d28:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4d2c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4d30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
    4d34:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4d38:	d111      	bne.n	4d5e <pinctrl_configure_pins+0x27a>
    *p_pin = pin_number & 0x1F;
    4d3a:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d3e:	0953      	lsrs	r3, r2, #5
    4d40:	d10b      	bne.n	4d5a <pinctrl_configure_pins+0x276>
        case 0: return NRF_P0;
    4d42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4d46:	2301      	movs	r3, #1
    4d48:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4d4a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4d4e:	2201      	movs	r2, #1
    4d50:	4611      	mov	r1, r2
    4d52:	5828      	ldr	r0, [r5, r0]
    4d54:	f7ff fea4 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4d58:	e6e0      	b.n	4b1c <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    4d5a:	4a55      	ldr	r2, [pc, #340]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4d5c:	e7f3      	b.n	4d46 <pinctrl_configure_pins+0x262>
    *p_pin = pin_number & 0x1F;
    4d5e:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d62:	0953      	lsrs	r3, r2, #5
    4d64:	d106      	bne.n	4d74 <pinctrl_configure_pins+0x290>
        case 0: return NRF_P0;
    4d66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4d6a:	2301      	movs	r3, #1
    4d6c:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4d6e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    4d72:	e7ec      	b.n	4d4e <pinctrl_configure_pins+0x26a>
        case 1: return NRF_P1;
    4d74:	4a4e      	ldr	r2, [pc, #312]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4d76:	e7f8      	b.n	4d6a <pinctrl_configure_pins+0x286>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    4d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d7c:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4d80:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4d84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
    4d88:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4d8c:	d111      	bne.n	4db2 <pinctrl_configure_pins+0x2ce>
    *p_pin = pin_number & 0x1F;
    4d8e:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d92:	0953      	lsrs	r3, r2, #5
    4d94:	d10b      	bne.n	4dae <pinctrl_configure_pins+0x2ca>
        case 0: return NRF_P0;
    4d96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4d9a:	2301      	movs	r3, #1
    4d9c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4d9e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4da2:	2201      	movs	r2, #1
    4da4:	4611      	mov	r1, r2
    4da6:	5828      	ldr	r0, [r5, r0]
    4da8:	f7ff fe7a 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4dac:	e6b6      	b.n	4b1c <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    4dae:	4a40      	ldr	r2, [pc, #256]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4db0:	e7f3      	b.n	4d9a <pinctrl_configure_pins+0x2b6>
    *p_pin = pin_number & 0x1F;
    4db2:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4db6:	0953      	lsrs	r3, r2, #5
    4db8:	d106      	bne.n	4dc8 <pinctrl_configure_pins+0x2e4>
        case 0: return NRF_P0;
    4dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4dbe:	2301      	movs	r3, #1
    4dc0:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4dc2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    4dc6:	e7ec      	b.n	4da2 <pinctrl_configure_pins+0x2be>
        case 1: return NRF_P1;
    4dc8:	4a39      	ldr	r2, [pc, #228]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4dca:	e7f8      	b.n	4dbe <pinctrl_configure_pins+0x2da>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    4dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4dd0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4dd4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4dd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
    4ddc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4de0:	d111      	bne.n	4e06 <pinctrl_configure_pins+0x322>
    *p_pin = pin_number & 0x1F;
    4de2:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4de6:	0953      	lsrs	r3, r2, #5
    4de8:	d10b      	bne.n	4e02 <pinctrl_configure_pins+0x31e>
        case 0: return NRF_P0;
    4dea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4dee:	2301      	movs	r3, #1
    4df0:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4df2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4df6:	2201      	movs	r2, #1
    4df8:	4611      	mov	r1, r2
    4dfa:	5828      	ldr	r0, [r5, r0]
    4dfc:	f7ff fe50 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4e00:	e68c      	b.n	4b1c <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    4e02:	4a2b      	ldr	r2, [pc, #172]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4e04:	e7f3      	b.n	4dee <pinctrl_configure_pins+0x30a>
    *p_pin = pin_number & 0x1F;
    4e06:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e0a:	0953      	lsrs	r3, r2, #5
    4e0c:	d106      	bne.n	4e1c <pinctrl_configure_pins+0x338>
        case 0: return NRF_P0;
    4e0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4e12:	2301      	movs	r3, #1
    4e14:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4e16:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    4e1a:	e7ec      	b.n	4df6 <pinctrl_configure_pins+0x312>
        case 1: return NRF_P1;
    4e1c:	4a24      	ldr	r2, [pc, #144]	; (4eb0 <pinctrl_configure_pins+0x3cc>)
    4e1e:	e7f8      	b.n	4e12 <pinctrl_configure_pins+0x32e>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    4e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e24:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e28:	2201      	movs	r2, #1
    4e2a:	2100      	movs	r1, #0
    4e2c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e30:	f7ff fe36 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4e34:	e672      	b.n	4b1c <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    4e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e3a:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e3e:	2201      	movs	r2, #1
    4e40:	2100      	movs	r1, #0
    4e42:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e46:	f7ff fe2b 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4e4a:	e667      	b.n	4b1c <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    4e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e50:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e54:	2201      	movs	r2, #1
    4e56:	2100      	movs	r1, #0
    4e58:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e5c:	f7ff fe20 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4e60:	e65c      	b.n	4b1c <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    4e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e66:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e6a:	2201      	movs	r2, #1
    4e6c:	2100      	movs	r1, #0
    4e6e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e72:	f7ff fe15 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4e76:	e651      	b.n	4b1c <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    4e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e7c:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e80:	2201      	movs	r2, #1
    4e82:	2100      	movs	r1, #0
    4e84:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e88:	f7ff fe0a 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4e8c:	e646      	b.n	4b1c <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    4e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e92:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e96:	2201      	movs	r2, #1
    4e98:	2100      	movs	r1, #0
    4e9a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e9e:	f7ff fdff 	bl	4aa0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4ea2:	e63b      	b.n	4b1c <pinctrl_configure_pins+0x38>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    4ea4:	2000      	movs	r0, #0
    4ea6:	e001      	b.n	4eac <pinctrl_configure_pins+0x3c8>
		switch (NRF_GET_FUN(pins[i])) {
    4ea8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    4eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4eae:	bf00      	nop
    4eb0:	50000300 	.word	0x50000300

00004eb4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4eb4:	b500      	push	{lr}
    4eb6:	b087      	sub	sp, #28
	z_impl_log_panic();
    4eb8:	f7fc fe22 	bl	1b00 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4ebc:	4b13      	ldr	r3, [pc, #76]	; (4f0c <k_sys_fatal_error_handler+0x58>)
    4ebe:	9305      	str	r3, [sp, #20]
    4ec0:	2300      	movs	r3, #0
    4ec2:	2202      	movs	r2, #2
    4ec4:	f362 0307 	bfi	r3, r2, #0, #8
    4ec8:	f36f 230f 	bfc	r3, #8, #8
    4ecc:	f36f 4317 	bfc	r3, #16, #8
    4ed0:	f36f 631f 	bfc	r3, #24, #8
    4ed4:	9304      	str	r3, [sp, #16]
    4ed6:	2100      	movs	r1, #0
    4ed8:	f36f 0100 	bfc	r1, #0, #1
    4edc:	f36f 0141 	bfc	r1, #1, #1
    4ee0:	f36f 0182 	bfc	r1, #2, #1
    4ee4:	f36f 01c5 	bfc	r1, #3, #3
    4ee8:	2301      	movs	r3, #1
    4eea:	f363 1188 	bfi	r1, r3, #6, #3
    4eee:	2308      	movs	r3, #8
    4ef0:	f363 2152 	bfi	r1, r3, #9, #10
    4ef4:	f36f 41de 	bfc	r1, #19, #12
    4ef8:	f36f 71df 	bfc	r1, #31, #1
    4efc:	2300      	movs	r3, #0
    4efe:	aa04      	add	r2, sp, #16
    4f00:	4803      	ldr	r0, [pc, #12]	; (4f10 <k_sys_fatal_error_handler+0x5c>)
    4f02:	f003 fa90 	bl	8426 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    4f06:	2000      	movs	r0, #0
    4f08:	f7fe ff40 	bl	3d8c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4f0c:	0000a350 	.word	0x0000a350
    4f10:	000099fc 	.word	0x000099fc

00004f14 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4f14:	4b02      	ldr	r3, [pc, #8]	; (4f20 <nvmc_wait+0xc>)
    4f16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d0fa      	beq.n	4f14 <nvmc_wait>
}
    4f1e:	4770      	bx	lr
    4f20:	4001e000 	.word	0x4001e000

00004f24 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    4f24:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4f26:	4b03      	ldr	r3, [pc, #12]	; (4f34 <nvmc_config+0x10>)
    4f28:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    4f2c:	f7ff fff2 	bl	4f14 <nvmc_wait>
}
    4f30:	bd08      	pop	{r3, pc}
    4f32:	bf00      	nop
    4f34:	4001e000 	.word	0x4001e000

00004f38 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4f38:	4b01      	ldr	r3, [pc, #4]	; (4f40 <SystemCoreClockUpdate+0x8>)
    4f3a:	4a02      	ldr	r2, [pc, #8]	; (4f44 <SystemCoreClockUpdate+0xc>)
    4f3c:	601a      	str	r2, [r3, #0]
}
    4f3e:	4770      	bx	lr
    4f40:	20000058 	.word	0x20000058
    4f44:	03d09000 	.word	0x03d09000

00004f48 <SystemInit>:

void SystemInit(void)
{
    4f48:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4f4a:	f004 f822 	bl	8f92 <nrf52_errata_36>
    4f4e:	b140      	cbz	r0, 4f62 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f54:	2200      	movs	r2, #0
    4f56:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4f5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4f5e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4f62:	f004 f820 	bl	8fa6 <nrf52_errata_66>
    4f66:	2800      	cmp	r0, #0
    4f68:	d046      	beq.n	4ff8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4f6e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4f72:	4b59      	ldr	r3, [pc, #356]	; (50d8 <SystemInit+0x190>)
    4f74:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4f78:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4f7c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4f80:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4f84:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4f88:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4f8c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4f90:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4f94:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4f98:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4f9c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4fa0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4fa4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4fa8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4fac:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4fb0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4fb4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4fb8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4fbc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4fc0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4fc4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4fc8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4fcc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4fd0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4fd4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4fd8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4fdc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4fe0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4fe4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4fe8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4fec:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4ff0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4ff4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4ff8:	f003 ffdf 	bl	8fba <nrf52_errata_98>
    4ffc:	b118      	cbz	r0, 5006 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4ffe:	4b37      	ldr	r3, [pc, #220]	; (50dc <SystemInit+0x194>)
    5000:	4a37      	ldr	r2, [pc, #220]	; (50e0 <SystemInit+0x198>)
    5002:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5006:	f003 ffeb 	bl	8fe0 <nrf52_errata_103>
    500a:	b118      	cbz	r0, 5014 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    500c:	4b35      	ldr	r3, [pc, #212]	; (50e4 <SystemInit+0x19c>)
    500e:	22fb      	movs	r2, #251	; 0xfb
    5010:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5014:	f003 fff7 	bl	9006 <nrf52_errata_115>
    5018:	b170      	cbz	r0, 5038 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    501a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    501e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    5022:	f023 030f 	bic.w	r3, r3, #15
    5026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    502a:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    502e:	f002 020f 	and.w	r2, r2, #15
    5032:	4313      	orrs	r3, r2
    5034:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5038:	f003 fff8 	bl	902c <nrf52_errata_120>
    503c:	b120      	cbz	r0, 5048 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    503e:	4b2a      	ldr	r3, [pc, #168]	; (50e8 <SystemInit+0x1a0>)
    5040:	f44f 7200 	mov.w	r2, #512	; 0x200
    5044:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5048:	f004 f803 	bl	9052 <nrf52_errata_136>
    504c:	b160      	cbz	r0, 5068 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    504e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5052:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5056:	f013 0f01 	tst.w	r3, #1
    505a:	d005      	beq.n	5068 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    505c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5060:	f06f 0201 	mvn.w	r2, #1
    5064:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5068:	f003 fffd 	bl	9066 <nrf52_configuration_249>
    506c:	b138      	cbz	r0, 507e <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    506e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5072:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    507a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    507e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5082:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    5086:	2b00      	cmp	r3, #0
    5088:	db08      	blt.n	509c <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    508a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    508e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5092:	2b00      	cmp	r3, #0
    5094:	db02      	blt.n	509c <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    5096:	f7ff ff4f 	bl	4f38 <SystemCoreClockUpdate>
}
    509a:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    509c:	2001      	movs	r0, #1
    509e:	f7ff ff41 	bl	4f24 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    50a2:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    50a6:	2512      	movs	r5, #18
    50a8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    50ac:	f7ff ff32 	bl	4f14 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    50b0:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    50b4:	f7ff ff2e 	bl	4f14 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    50b8:	2000      	movs	r0, #0
    50ba:	f7ff ff33 	bl	4f24 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    50be:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    50c2:	490a      	ldr	r1, [pc, #40]	; (50ec <SystemInit+0x1a4>)
    50c4:	68ca      	ldr	r2, [r1, #12]
    50c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    50ca:	4b09      	ldr	r3, [pc, #36]	; (50f0 <SystemInit+0x1a8>)
    50cc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    50ce:	60cb      	str	r3, [r1, #12]
    50d0:	f3bf 8f4f 	dsb	sy
    __NOP();
    50d4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    50d6:	e7fd      	b.n	50d4 <SystemInit+0x18c>
    50d8:	4000c000 	.word	0x4000c000
    50dc:	40005000 	.word	0x40005000
    50e0:	00038148 	.word	0x00038148
    50e4:	4000f000 	.word	0x4000f000
    50e8:	40029000 	.word	0x40029000
    50ec:	e000ed00 	.word	0xe000ed00
    50f0:	05fa0004 	.word	0x05fa0004

000050f4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    50f4:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    50f6:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    50f8:	fab4 f384 	clz	r3, r4
    50fc:	f1c3 031f 	rsb	r3, r3, #31
    5100:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    5104:	2b00      	cmp	r3, #0
    5106:	db16      	blt.n	5136 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5108:	2201      	movs	r2, #1
    510a:	fa02 f303 	lsl.w	r3, r2, r3
    510e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5112:	f3bf 8f5b 	dmb	ish
    5116:	e850 2f00 	ldrex	r2, [r0]
    511a:	42a2      	cmp	r2, r4
    511c:	d104      	bne.n	5128 <nrfx_flag32_alloc+0x34>
    511e:	e840 3e00 	strex	lr, r3, [r0]
    5122:	f1be 0f00 	cmp.w	lr, #0
    5126:	d1f6      	bne.n	5116 <nrfx_flag32_alloc+0x22>
    5128:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    512c:	d1e3      	bne.n	50f6 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    512e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    5132:	4802      	ldr	r0, [pc, #8]	; (513c <nrfx_flag32_alloc+0x48>)
}
    5134:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    5136:	4802      	ldr	r0, [pc, #8]	; (5140 <nrfx_flag32_alloc+0x4c>)
    5138:	e7fc      	b.n	5134 <nrfx_flag32_alloc+0x40>
    513a:	bf00      	nop
    513c:	0bad0000 	.word	0x0bad0000
    5140:	0bad0002 	.word	0x0bad0002

00005144 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5144:	6803      	ldr	r3, [r0, #0]
    5146:	40cb      	lsrs	r3, r1
    5148:	f013 0f01 	tst.w	r3, #1
    514c:	d115      	bne.n	517a <nrfx_flag32_free+0x36>
{
    514e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5150:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    5152:	2301      	movs	r3, #1
    5154:	408b      	lsls	r3, r1
    5156:	4313      	orrs	r3, r2
    5158:	f3bf 8f5b 	dmb	ish
    515c:	e850 cf00 	ldrex	ip, [r0]
    5160:	4594      	cmp	ip, r2
    5162:	d104      	bne.n	516e <nrfx_flag32_free+0x2a>
    5164:	e840 3e00 	strex	lr, r3, [r0]
    5168:	f1be 0f00 	cmp.w	lr, #0
    516c:	d1f6      	bne.n	515c <nrfx_flag32_free+0x18>
    516e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5172:	d1ed      	bne.n	5150 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    5174:	4802      	ldr	r0, [pc, #8]	; (5180 <nrfx_flag32_free+0x3c>)
}
    5176:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    517a:	4802      	ldr	r0, [pc, #8]	; (5184 <nrfx_flag32_free+0x40>)
}
    517c:	4770      	bx	lr
    517e:	bf00      	nop
    5180:	0bad0000 	.word	0x0bad0000
    5184:	0bad0004 	.word	0x0bad0004

00005188 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    5188:	b570      	push	{r4, r5, r6, lr}
    518a:	b082      	sub	sp, #8
    switch (domain)
    518c:	4605      	mov	r5, r0
    518e:	b118      	cbz	r0, 5198 <clock_stop+0x10>
    5190:	2801      	cmp	r0, #1
    5192:	d016      	beq.n	51c2 <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5194:	b002      	add	sp, #8
    5196:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    5198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    519c:	2202      	movs	r2, #2
    519e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51a2:	2200      	movs	r2, #0
    51a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    51a8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    51ac:	2201      	movs	r2, #1
    51ae:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    51b0:	2301      	movs	r3, #1
    51b2:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    51b6:	429d      	cmp	r5, r3
    51b8:	d00f      	beq.n	51da <clock_stop+0x52>
    51ba:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    51bc:	f242 7410 	movw	r4, #10000	; 0x2710
    51c0:	e029      	b.n	5216 <clock_stop+0x8e>
    p_reg->INTENCLR = mask;
    51c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    51c6:	2201      	movs	r2, #1
    51c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51cc:	2100      	movs	r1, #0
    51ce:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    51d2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    51d6:	605a      	str	r2, [r3, #4]
}
    51d8:	e7ea      	b.n	51b0 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    51da:	f10d 0607 	add.w	r6, sp, #7
    51de:	e7ed      	b.n	51bc <clock_stop+0x34>
            if (p_clk_src != NULL)
    51e0:	b136      	cbz	r6, 51f0 <clock_stop+0x68>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    51e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    51e6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    51ea:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    51ee:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    51f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    51f4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    51f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    51fc:	d122      	bne.n	5244 <clock_stop+0xbc>
    return false;
    51fe:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5200:	b323      	cbz	r3, 524c <clock_stop+0xc4>
    5202:	b11e      	cbz	r6, 520c <clock_stop+0x84>
    5204:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5208:	2b01      	cmp	r3, #1
    520a:	d11f      	bne.n	524c <clock_stop+0xc4>
    520c:	2001      	movs	r0, #1
    520e:	f003 ff3d 	bl	908c <nrfx_busy_wait>
    5212:	3c01      	subs	r4, #1
    5214:	d01a      	beq.n	524c <clock_stop+0xc4>
    switch (domain)
    5216:	2d00      	cmp	r5, #0
    5218:	d0e2      	beq.n	51e0 <clock_stop+0x58>
    521a:	2d01      	cmp	r5, #1
    521c:	d001      	beq.n	5222 <clock_stop+0x9a>
    521e:	2300      	movs	r3, #0
    5220:	e7ee      	b.n	5200 <clock_stop+0x78>
            if (p_clk_src != NULL)
    5222:	b136      	cbz	r6, 5232 <clock_stop+0xaa>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5228:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    522c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5230:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5236:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    523a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    523e:	d103      	bne.n	5248 <clock_stop+0xc0>
    return false;
    5240:	2300      	movs	r3, #0
    5242:	e7dd      	b.n	5200 <clock_stop+0x78>
                return true;
    5244:	2301      	movs	r3, #1
    5246:	e7db      	b.n	5200 <clock_stop+0x78>
                return true;
    5248:	2301      	movs	r3, #1
    524a:	e7d9      	b.n	5200 <clock_stop+0x78>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    524c:	2d01      	cmp	r5, #1
    524e:	d1a1      	bne.n	5194 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    5250:	4b01      	ldr	r3, [pc, #4]	; (5258 <clock_stop+0xd0>)
    5252:	2200      	movs	r2, #0
    5254:	715a      	strb	r2, [r3, #5]
    5256:	e79d      	b.n	5194 <clock_stop+0xc>
    5258:	20000ef8 	.word	0x20000ef8

0000525c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    525c:	4b06      	ldr	r3, [pc, #24]	; (5278 <nrfx_clock_init+0x1c>)
    525e:	791b      	ldrb	r3, [r3, #4]
    5260:	b93b      	cbnz	r3, 5272 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5262:	4b05      	ldr	r3, [pc, #20]	; (5278 <nrfx_clock_init+0x1c>)
    5264:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5266:	2201      	movs	r2, #1
    5268:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    526a:	2200      	movs	r2, #0
    526c:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    526e:	4803      	ldr	r0, [pc, #12]	; (527c <nrfx_clock_init+0x20>)
    5270:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5272:	4803      	ldr	r0, [pc, #12]	; (5280 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5274:	4770      	bx	lr
    5276:	bf00      	nop
    5278:	20000ef8 	.word	0x20000ef8
    527c:	0bad0000 	.word	0x0bad0000
    5280:	0bad000c 	.word	0x0bad000c

00005284 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5284:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    528a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    528e:	b18b      	cbz	r3, 52b4 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5294:	2200      	movs	r2, #0
    5296:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    529a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    529e:	2201      	movs	r2, #1
    52a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    52a4:	4b15      	ldr	r3, [pc, #84]	; (52fc <nrfx_power_clock_irq_handler+0x78>)
    52a6:	795b      	ldrb	r3, [r3, #5]
    52a8:	b923      	cbnz	r3, 52b4 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    52aa:	4b14      	ldr	r3, [pc, #80]	; (52fc <nrfx_power_clock_irq_handler+0x78>)
    52ac:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	2000      	movs	r0, #0
    52b2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    52b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    52bc:	b19b      	cbz	r3, 52e6 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52c2:	2200      	movs	r2, #0
    52c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    52c8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    52cc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    52d0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    52d4:	f012 0f03 	tst.w	r2, #3
    52d8:	d106      	bne.n	52e8 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    52da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52de:	2201      	movs	r2, #1
    52e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52e4:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    52e6:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    52e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52ec:	2202      	movs	r2, #2
    52ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    52f2:	4b02      	ldr	r3, [pc, #8]	; (52fc <nrfx_power_clock_irq_handler+0x78>)
    52f4:	681b      	ldr	r3, [r3, #0]
    52f6:	2001      	movs	r0, #1
    52f8:	4798      	blx	r3
}
    52fa:	e7f4      	b.n	52e6 <nrfx_power_clock_irq_handler+0x62>
    52fc:	20000ef8 	.word	0x20000ef8

00005300 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5300:	3008      	adds	r0, #8
    5302:	4b03      	ldr	r3, [pc, #12]	; (5310 <pin_in_use+0x10>)
    5304:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5308:	f000 0001 	and.w	r0, r0, #1
    530c:	4770      	bx	lr
    530e:	bf00      	nop
    5310:	2000005c 	.word	0x2000005c

00005314 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5314:	3008      	adds	r0, #8
    5316:	4b03      	ldr	r3, [pc, #12]	; (5324 <pin_in_use_by_te+0x10>)
    5318:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    531c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5320:	4770      	bx	lr
    5322:	bf00      	nop
    5324:	2000005c 	.word	0x2000005c

00005328 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5328:	3008      	adds	r0, #8
    532a:	4b04      	ldr	r3, [pc, #16]	; (533c <pin_has_trigger+0x14>)
    532c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5330:	f010 001c 	ands.w	r0, r0, #28
    5334:	bf18      	it	ne
    5336:	2001      	movne	r0, #1
    5338:	4770      	bx	lr
    533a:	bf00      	nop
    533c:	2000005c 	.word	0x2000005c

00005340 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5340:	3008      	adds	r0, #8
    5342:	4b03      	ldr	r3, [pc, #12]	; (5350 <pin_is_output+0x10>)
    5344:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5348:	f3c0 0040 	ubfx	r0, r0, #1, #1
    534c:	4770      	bx	lr
    534e:	bf00      	nop
    5350:	2000005c 	.word	0x2000005c

00005354 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5354:	3008      	adds	r0, #8
    5356:	4b02      	ldr	r3, [pc, #8]	; (5360 <pin_te_get+0xc>)
    5358:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    535c:	0b40      	lsrs	r0, r0, #13
    535e:	4770      	bx	lr
    5360:	2000005c 	.word	0x2000005c

00005364 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5364:	2200      	movs	r2, #0
    5366:	e004      	b.n	5372 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    536c:	4283      	cmp	r3, r0
    536e:	d00f      	beq.n	5390 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5370:	3201      	adds	r2, #1
    5372:	2a2f      	cmp	r2, #47	; 0x2f
    5374:	d80a      	bhi.n	538c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5376:	f102 0308 	add.w	r3, r2, #8
    537a:	4906      	ldr	r1, [pc, #24]	; (5394 <handler_in_use+0x30>)
    537c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    5380:	f413 7f80 	tst.w	r3, #256	; 0x100
    5384:	d0f0      	beq.n	5368 <handler_in_use+0x4>
    5386:	f3c3 2343 	ubfx	r3, r3, #9, #4
    538a:	e7ef      	b.n	536c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    538c:	2000      	movs	r0, #0
    538e:	4770      	bx	lr
            return true;
    5390:	2001      	movs	r0, #1
}
    5392:	4770      	bx	lr
    5394:	2000005c 	.word	0x2000005c

00005398 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5398:	2300      	movs	r3, #0
    539a:	b113      	cbz	r3, 53a2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    539c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    53a0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    53a2:	4a07      	ldr	r2, [pc, #28]	; (53c0 <find_handler+0x28>)
    53a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    53a8:	4282      	cmp	r2, r0
    53aa:	d001      	beq.n	53b0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    53ac:	3301      	adds	r3, #1
    53ae:	e7f4      	b.n	539a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    53b0:	4a03      	ldr	r2, [pc, #12]	; (53c0 <find_handler+0x28>)
    53b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    53b6:	6852      	ldr	r2, [r2, #4]
    53b8:	428a      	cmp	r2, r1
    53ba:	d1f7      	bne.n	53ac <find_handler+0x14>
            return i;
    53bc:	4618      	mov	r0, r3
    53be:	4770      	bx	lr
    53c0:	2000005c 	.word	0x2000005c

000053c4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    53c4:	3008      	adds	r0, #8
    53c6:	4b06      	ldr	r3, [pc, #24]	; (53e0 <channel_handler_get+0x1c>)
    53c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    53cc:	f410 7f80 	tst.w	r0, #256	; 0x100
    53d0:	d004      	beq.n	53dc <channel_handler_get+0x18>
    53d2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    53d6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    53da:	4770      	bx	lr
        return NULL;
    53dc:	2000      	movs	r0, #0
}
    53de:	4770      	bx	lr
    53e0:	2000005c 	.word	0x2000005c

000053e4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    53e4:	b570      	push	{r4, r5, r6, lr}
    53e6:	4604      	mov	r4, r0
    53e8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    53ea:	f7ff ffeb 	bl	53c4 <channel_handler_get>

    if (handler)
    53ee:	b120      	cbz	r0, 53fa <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    53f0:	6806      	ldr	r6, [r0, #0]
    53f2:	6842      	ldr	r2, [r0, #4]
    53f4:	4629      	mov	r1, r5
    53f6:	4620      	mov	r0, r4
    53f8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    53fa:	4b04      	ldr	r3, [pc, #16]	; (540c <call_handler+0x28>)
    53fc:	689b      	ldr	r3, [r3, #8]
    53fe:	b123      	cbz	r3, 540a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5400:	4a02      	ldr	r2, [pc, #8]	; (540c <call_handler+0x28>)
    5402:	68d2      	ldr	r2, [r2, #12]
    5404:	4629      	mov	r1, r5
    5406:	4620      	mov	r0, r4
    5408:	4798      	blx	r3
    }
}
    540a:	bd70      	pop	{r4, r5, r6, pc}
    540c:	2000005c 	.word	0x2000005c

00005410 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5410:	f100 0208 	add.w	r2, r0, #8
    5414:	4b0e      	ldr	r3, [pc, #56]	; (5450 <release_handler+0x40>)
    5416:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    541a:	f413 7f80 	tst.w	r3, #256	; 0x100
    541e:	d016      	beq.n	544e <release_handler+0x3e>
{
    5420:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5422:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5426:	4610      	mov	r0, r2
    5428:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    542c:	4a08      	ldr	r2, [pc, #32]	; (5450 <release_handler+0x40>)
    542e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    5432:	4620      	mov	r0, r4
    5434:	f7ff ff96 	bl	5364 <handler_in_use>
    5438:	b100      	cbz	r0, 543c <release_handler+0x2c>
}
    543a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    543c:	4804      	ldr	r0, [pc, #16]	; (5450 <release_handler+0x40>)
    543e:	2300      	movs	r3, #0
    5440:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5444:	4621      	mov	r1, r4
    5446:	3074      	adds	r0, #116	; 0x74
    5448:	f7ff fe7c 	bl	5144 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    544c:	e7f5      	b.n	543a <release_handler+0x2a>
    544e:	4770      	bx	lr
    5450:	2000005c 	.word	0x2000005c

00005454 <pin_handler_trigger_uninit>:
{
    5454:	b510      	push	{r4, lr}
    5456:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    5458:	f7ff ff5c 	bl	5314 <pin_in_use_by_te>
    545c:	b140      	cbz	r0, 5470 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    545e:	4620      	mov	r0, r4
    5460:	f7ff ff78 	bl	5354 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5464:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5468:	4b06      	ldr	r3, [pc, #24]	; (5484 <pin_handler_trigger_uninit+0x30>)
    546a:	2200      	movs	r2, #0
    546c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    5470:	4620      	mov	r0, r4
    5472:	f7ff ffcd 	bl	5410 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5476:	3408      	adds	r4, #8
    5478:	4b03      	ldr	r3, [pc, #12]	; (5488 <pin_handler_trigger_uninit+0x34>)
    547a:	2200      	movs	r2, #0
    547c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    5480:	bd10      	pop	{r4, pc}
    5482:	bf00      	nop
    5484:	40006000 	.word	0x40006000
    5488:	2000005c 	.word	0x2000005c

0000548c <pin_handler_set>:
{
    548c:	b570      	push	{r4, r5, r6, lr}
    548e:	b082      	sub	sp, #8
    5490:	4606      	mov	r6, r0
    5492:	460c      	mov	r4, r1
    5494:	4615      	mov	r5, r2
    release_handler(pin);
    5496:	f7ff ffbb 	bl	5410 <release_handler>
    if (!handler)
    549a:	b324      	cbz	r4, 54e6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    549c:	4629      	mov	r1, r5
    549e:	4620      	mov	r0, r4
    54a0:	f7ff ff7a 	bl	5398 <find_handler>
    if (handler_id < 0)
    54a4:	1e03      	subs	r3, r0, #0
    54a6:	db13      	blt.n	54d0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    54a8:	4a10      	ldr	r2, [pc, #64]	; (54ec <pin_handler_set+0x60>)
    54aa:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    54ae:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    54b2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    54b4:	025b      	lsls	r3, r3, #9
    54b6:	b29b      	uxth	r3, r3
    54b8:	f106 0008 	add.w	r0, r6, #8
    54bc:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    54c0:	430b      	orrs	r3, r1
    54c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    54c6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    54ca:	4809      	ldr	r0, [pc, #36]	; (54f0 <pin_handler_set+0x64>)
}
    54cc:	b002      	add	sp, #8
    54ce:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    54d0:	f10d 0107 	add.w	r1, sp, #7
    54d4:	4807      	ldr	r0, [pc, #28]	; (54f4 <pin_handler_set+0x68>)
    54d6:	f7ff fe0d 	bl	50f4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    54da:	4b05      	ldr	r3, [pc, #20]	; (54f0 <pin_handler_set+0x64>)
    54dc:	4298      	cmp	r0, r3
    54de:	d1f5      	bne.n	54cc <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    54e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    54e4:	e7e0      	b.n	54a8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    54e6:	4802      	ldr	r0, [pc, #8]	; (54f0 <pin_handler_set+0x64>)
    54e8:	e7f0      	b.n	54cc <pin_handler_set+0x40>
    54ea:	bf00      	nop
    54ec:	2000005c 	.word	0x2000005c
    54f0:	0bad0000 	.word	0x0bad0000
    54f4:	200000d0 	.word	0x200000d0

000054f8 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    54f8:	b538      	push	{r3, r4, r5, lr}
    54fa:	4604      	mov	r4, r0
    while (mask)
    54fc:	e018      	b.n	5530 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    54fe:	fa94 f3a4 	rbit	r3, r4
    5502:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5506:	2201      	movs	r2, #1
    5508:	409a      	lsls	r2, r3
    550a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    550e:	4a0a      	ldr	r2, [pc, #40]	; (5538 <gpiote_evt_handle+0x40>)
    5510:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5514:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    5518:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    551c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5520:	f3c0 4001 	ubfx	r0, r0, #16, #2
    5524:	f003 fe47 	bl	91b6 <gpiote_polarity_to_trigger>
    5528:	4601      	mov	r1, r0
    552a:	4628      	mov	r0, r5
    552c:	f7ff ff5a 	bl	53e4 <call_handler>
    while (mask)
    5530:	2c00      	cmp	r4, #0
    5532:	d1e4      	bne.n	54fe <gpiote_evt_handle+0x6>
    }
}
    5534:	bd38      	pop	{r3, r4, r5, pc}
    5536:	bf00      	nop
    5538:	40006000 	.word	0x40006000

0000553c <latch_pending_read_and_check>:
{
    553c:	b082      	sub	sp, #8
    553e:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5540:	4b11      	ldr	r3, [pc, #68]	; (5588 <latch_pending_read_and_check+0x4c>)
    5542:	e893 0003 	ldmia.w	r3, {r0, r1}
    5546:	ab02      	add	r3, sp, #8
    5548:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    554c:	4660      	mov	r0, ip
    554e:	2300      	movs	r3, #0
    5550:	e00b      	b.n	556a <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    5552:	aa02      	add	r2, sp, #8
    5554:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5558:	f852 2c08 	ldr.w	r2, [r2, #-8]
    555c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    5560:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5564:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5568:	3301      	adds	r3, #1
    556a:	2b01      	cmp	r3, #1
    556c:	d9f1      	bls.n	5552 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    556e:	2300      	movs	r3, #0
    5570:	2b01      	cmp	r3, #1
    5572:	d804      	bhi.n	557e <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    5574:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    5578:	b922      	cbnz	r2, 5584 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    557a:	3301      	adds	r3, #1
    557c:	e7f8      	b.n	5570 <latch_pending_read_and_check+0x34>
    return false;
    557e:	2000      	movs	r0, #0
}
    5580:	b002      	add	sp, #8
    5582:	4770      	bx	lr
            return true;
    5584:	2001      	movs	r0, #1
    5586:	e7fb      	b.n	5580 <latch_pending_read_and_check+0x44>
    5588:	00009ac8 	.word	0x00009ac8

0000558c <next_sense_cond_call_handler>:
{
    558c:	b570      	push	{r4, r5, r6, lr}
    558e:	4604      	mov	r4, r0
    5590:	460d      	mov	r5, r1
    5592:	4616      	mov	r6, r2
    if (is_level(trigger))
    5594:	4608      	mov	r0, r1
    5596:	f003 fe10 	bl	91ba <is_level>
    559a:	b9d0      	cbnz	r0, 55d2 <next_sense_cond_call_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    559c:	2e02      	cmp	r6, #2
    559e:	d052      	beq.n	5646 <next_sense_cond_call_handler+0xba>
    55a0:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    55a2:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    55a6:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55a8:	2901      	cmp	r1, #1
    55aa:	d04e      	beq.n	564a <next_sense_cond_call_handler+0xbe>
        case 0: return NRF_P0;
    55ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    55b0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    55b4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    55b8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    55bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    55c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    55c4:	2d03      	cmp	r5, #3
    55c6:	d044      	beq.n	5652 <next_sense_cond_call_handler+0xc6>
    55c8:	2e02      	cmp	r6, #2
    55ca:	d040      	beq.n	564e <next_sense_cond_call_handler+0xc2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    55cc:	2e03      	cmp	r6, #3
    55ce:	d045      	beq.n	565c <next_sense_cond_call_handler+0xd0>
}
    55d0:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    55d2:	4629      	mov	r1, r5
    55d4:	4620      	mov	r0, r4
    55d6:	f7ff ff05 	bl	53e4 <call_handler>
    *p_pin = pin_number & 0x1F;
    55da:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    55de:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55e0:	2a01      	cmp	r2, #1
    55e2:	d02a      	beq.n	563a <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
    55e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    55e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    55ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    55f4:	429e      	cmp	r6, r3
    55f6:	d1eb      	bne.n	55d0 <next_sense_cond_call_handler+0x44>
    *p_pin = pin_number & 0x1F;
    55f8:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    55fc:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55fe:	2a01      	cmp	r2, #1
    5600:	d01d      	beq.n	563e <next_sense_cond_call_handler+0xb2>
        case 0: return NRF_P0;
    5602:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5606:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    560a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    560e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    5612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    5616:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    561a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    561c:	2c01      	cmp	r4, #1
    561e:	d010      	beq.n	5642 <next_sense_cond_call_handler+0xb6>
        case 0: return NRF_P0;
    5620:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5624:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5628:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    562c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5630:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5634:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    5638:	e7ca      	b.n	55d0 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
    563a:	4a0a      	ldr	r2, [pc, #40]	; (5664 <next_sense_cond_call_handler+0xd8>)
    563c:	e7d4      	b.n	55e8 <next_sense_cond_call_handler+0x5c>
    563e:	4909      	ldr	r1, [pc, #36]	; (5664 <next_sense_cond_call_handler+0xd8>)
    5640:	e7e1      	b.n	5606 <next_sense_cond_call_handler+0x7a>
    5642:	4908      	ldr	r1, [pc, #32]	; (5664 <next_sense_cond_call_handler+0xd8>)
    5644:	e7ee      	b.n	5624 <next_sense_cond_call_handler+0x98>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5646:	2003      	movs	r0, #3
    5648:	e7ab      	b.n	55a2 <next_sense_cond_call_handler+0x16>
    564a:	4906      	ldr	r1, [pc, #24]	; (5664 <next_sense_cond_call_handler+0xd8>)
    564c:	e7b0      	b.n	55b0 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    564e:	2d01      	cmp	r5, #1
    5650:	d1bc      	bne.n	55cc <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
    5652:	4629      	mov	r1, r5
    5654:	4620      	mov	r0, r4
    5656:	f7ff fec5 	bl	53e4 <call_handler>
}
    565a:	e7b9      	b.n	55d0 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    565c:	2d02      	cmp	r5, #2
    565e:	d1b7      	bne.n	55d0 <next_sense_cond_call_handler+0x44>
    5660:	e7f7      	b.n	5652 <next_sense_cond_call_handler+0xc6>
    5662:	bf00      	nop
    5664:	50000300 	.word	0x50000300

00005668 <port_event_handle>:
{
    5668:	b570      	push	{r4, r5, r6, lr}
    566a:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    566c:	4a2f      	ldr	r2, [pc, #188]	; (572c <port_event_handle+0xc4>)
    566e:	466b      	mov	r3, sp
    5670:	e892 0003 	ldmia.w	r2, {r0, r1}
    5674:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5678:	2300      	movs	r3, #0
    567a:	a802      	add	r0, sp, #8
    567c:	e00b      	b.n	5696 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    567e:	aa04      	add	r2, sp, #16
    5680:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5684:	f852 2c10 	ldr.w	r2, [r2, #-16]
    5688:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    568c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5690:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5694:	3301      	adds	r3, #1
    5696:	2b01      	cmp	r3, #1
    5698:	d9f1      	bls.n	567e <port_event_handle+0x16>
    569a:	e042      	b.n	5722 <port_event_handle+0xba>
        case 1: return NRF_P1;
    569c:	4e24      	ldr	r6, [pc, #144]	; (5730 <port_event_handle+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    569e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    56a2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    56a6:	f3c2 4201 	ubfx	r2, r2, #16, #2
    56aa:	f7ff ff6f 	bl	558c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    56ae:	2301      	movs	r3, #1
    56b0:	40ab      	lsls	r3, r5
    56b2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    56b6:	ab04      	add	r3, sp, #16
    56b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    56bc:	f853 0c08 	ldr.w	r0, [r3, #-8]
    56c0:	b310      	cbz	r0, 5708 <port_event_handle+0xa0>
                uint32_t pin = NRF_CTZ(latch[i]);
    56c2:	fa90 f0a0 	rbit	r0, r0
    56c6:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    56ca:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    56ce:	f100 0208 	add.w	r2, r0, #8
    56d2:	4b18      	ldr	r3, [pc, #96]	; (5734 <port_event_handle+0xcc>)
    56d4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    56d8:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    56dc:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    56de:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    56e2:	f10d 0c08 	add.w	ip, sp, #8
    56e6:	2301      	movs	r3, #1
    56e8:	fa03 f202 	lsl.w	r2, r3, r2
    56ec:	f81c 3005 	ldrb.w	r3, [ip, r5]
    56f0:	ea23 0302 	bic.w	r3, r3, r2
    56f4:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
    56f8:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    56fc:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56fe:	2b01      	cmp	r3, #1
    5700:	d0cc      	beq.n	569c <port_event_handle+0x34>
        case 0: return NRF_P0;
    5702:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    5706:	e7ca      	b.n	569e <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5708:	3401      	adds	r4, #1
    570a:	2c01      	cmp	r4, #1
    570c:	d9d3      	bls.n	56b6 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    570e:	4b0a      	ldr	r3, [pc, #40]	; (5738 <port_event_handle+0xd0>)
    5710:	2200      	movs	r2, #0
    5712:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    5716:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    571a:	a802      	add	r0, sp, #8
    571c:	f7ff ff0e 	bl	553c <latch_pending_read_and_check>
    5720:	b108      	cbz	r0, 5726 <port_event_handle+0xbe>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5722:	2400      	movs	r4, #0
    5724:	e7f1      	b.n	570a <port_event_handle+0xa2>
}
    5726:	b004      	add	sp, #16
    5728:	bd70      	pop	{r4, r5, r6, pc}
    572a:	bf00      	nop
    572c:	00009ac8 	.word	0x00009ac8
    5730:	50000300 	.word	0x50000300
    5734:	2000005c 	.word	0x2000005c
    5738:	40006000 	.word	0x40006000

0000573c <nrfx_gpiote_input_configure>:
{
    573c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5740:	4604      	mov	r4, r0
    5742:	4615      	mov	r5, r2
    5744:	461e      	mov	r6, r3
    if (p_input_config)
    5746:	b371      	cbz	r1, 57a6 <nrfx_gpiote_input_configure+0x6a>
    5748:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    574a:	f003 fd1e 	bl	918a <pin_is_task_output>
    574e:	2800      	cmp	r0, #0
    5750:	f040 8099 	bne.w	5886 <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
    5754:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5758:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    575a:	2b01      	cmp	r3, #1
    575c:	d045      	beq.n	57ea <nrfx_gpiote_input_configure+0xae>
        case 0: return NRF_P0;
    575e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5762:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    5766:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    576a:	2f00      	cmp	r7, #0
    576c:	d03f      	beq.n	57ee <nrfx_gpiote_input_configure+0xb2>
    576e:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5770:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    5774:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5778:	2f00      	cmp	r7, #0
    577a:	d03a      	beq.n	57f2 <nrfx_gpiote_input_configure+0xb6>
    577c:	7839      	ldrb	r1, [r7, #0]
    577e:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5780:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    5782:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5786:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    578a:	4a43      	ldr	r2, [pc, #268]	; (5898 <nrfx_gpiote_input_configure+0x15c>)
    578c:	f104 0108 	add.w	r1, r4, #8
    5790:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5794:	f023 0302 	bic.w	r3, r3, #2
    5798:	b29b      	uxth	r3, r3
    579a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    579e:	f043 0301 	orr.w	r3, r3, #1
    57a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    57a6:	b1bd      	cbz	r5, 57d8 <nrfx_gpiote_input_configure+0x9c>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    57a8:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    57aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    57ae:	4620      	mov	r0, r4
    57b0:	f7ff fdc6 	bl	5340 <pin_is_output>
    57b4:	b1f8      	cbz	r0, 57f6 <nrfx_gpiote_input_configure+0xba>
            if (use_evt)
    57b6:	f1b8 0f00 	cmp.w	r8, #0
    57ba:	d166      	bne.n	588a <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    57bc:	4a36      	ldr	r2, [pc, #216]	; (5898 <nrfx_gpiote_input_configure+0x15c>)
    57be:	f104 0108 	add.w	r1, r4, #8
    57c2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    57c6:	f023 031c 	bic.w	r3, r3, #28
    57ca:	b29b      	uxth	r3, r3
    57cc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    57d0:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    57d4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    57d8:	2e00      	cmp	r6, #0
    57da:	d05a      	beq.n	5892 <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    57dc:	6872      	ldr	r2, [r6, #4]
    57de:	6831      	ldr	r1, [r6, #0]
    57e0:	4620      	mov	r0, r4
    57e2:	f7ff fe53 	bl	548c <pin_handler_set>
}
    57e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
    57ea:	482c      	ldr	r0, [pc, #176]	; (589c <nrfx_gpiote_input_configure+0x160>)
    57ec:	e7b9      	b.n	5762 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    57ee:	2100      	movs	r1, #0
    57f0:	e7be      	b.n	5770 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    57f2:	2100      	movs	r1, #0
    57f4:	e7c4      	b.n	5780 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    57f6:	4a28      	ldr	r2, [pc, #160]	; (5898 <nrfx_gpiote_input_configure+0x15c>)
    57f8:	f104 0108 	add.w	r1, r4, #8
    57fc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5800:	f023 0320 	bic.w	r3, r3, #32
    5804:	04db      	lsls	r3, r3, #19
    5806:	0cdb      	lsrs	r3, r3, #19
    5808:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    580c:	f1b8 0f00 	cmp.w	r8, #0
    5810:	d0d4      	beq.n	57bc <nrfx_gpiote_input_configure+0x80>
                if (!edge)
    5812:	2f03      	cmp	r7, #3
    5814:	d83b      	bhi.n	588e <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5816:	686b      	ldr	r3, [r5, #4]
    5818:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    581a:	b937      	cbnz	r7, 582a <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    581c:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    5820:	4b1f      	ldr	r3, [pc, #124]	; (58a0 <nrfx_gpiote_input_configure+0x164>)
    5822:	2200      	movs	r2, #0
    5824:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5828:	e7c8      	b.n	57bc <nrfx_gpiote_input_configure+0x80>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    582a:	4638      	mov	r0, r7
    582c:	f003 fcc4 	bl	91b8 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5830:	4b1b      	ldr	r3, [pc, #108]	; (58a0 <nrfx_gpiote_input_configure+0x164>)
    5832:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    5836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    583a:	f021 0103 	bic.w	r1, r1, #3
    583e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5842:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5846:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    584a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    584e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5852:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    5856:	0221      	lsls	r1, r4, #8
    5858:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    585c:	0400      	lsls	r0, r0, #16
    585e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5862:	4301      	orrs	r1, r0
    5864:	ea4c 0101 	orr.w	r1, ip, r1
    5868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    586c:	036b      	lsls	r3, r5, #13
    586e:	b29b      	uxth	r3, r3
    5870:	4a09      	ldr	r2, [pc, #36]	; (5898 <nrfx_gpiote_input_configure+0x15c>)
    5872:	f104 0108 	add.w	r1, r4, #8
    5876:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    587a:	4303      	orrs	r3, r0
    587c:	f043 0320 	orr.w	r3, r3, #32
    5880:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    5884:	e79a      	b.n	57bc <nrfx_gpiote_input_configure+0x80>
            return NRFX_ERROR_INVALID_PARAM;
    5886:	4807      	ldr	r0, [pc, #28]	; (58a4 <nrfx_gpiote_input_configure+0x168>)
    5888:	e7ad      	b.n	57e6 <nrfx_gpiote_input_configure+0xaa>
                return NRFX_ERROR_INVALID_PARAM;
    588a:	4806      	ldr	r0, [pc, #24]	; (58a4 <nrfx_gpiote_input_configure+0x168>)
    588c:	e7ab      	b.n	57e6 <nrfx_gpiote_input_configure+0xaa>
                    return NRFX_ERROR_INVALID_PARAM;
    588e:	4805      	ldr	r0, [pc, #20]	; (58a4 <nrfx_gpiote_input_configure+0x168>)
    5890:	e7a9      	b.n	57e6 <nrfx_gpiote_input_configure+0xaa>
        err = NRFX_SUCCESS;
    5892:	4805      	ldr	r0, [pc, #20]	; (58a8 <nrfx_gpiote_input_configure+0x16c>)
    5894:	e7a7      	b.n	57e6 <nrfx_gpiote_input_configure+0xaa>
    5896:	bf00      	nop
    5898:	2000005c 	.word	0x2000005c
    589c:	50000300 	.word	0x50000300
    58a0:	40006000 	.word	0x40006000
    58a4:	0bad0004 	.word	0x0bad0004
    58a8:	0bad0000 	.word	0x0bad0000

000058ac <nrfx_gpiote_output_configure>:
{
    58ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58ae:	4604      	mov	r4, r0
    58b0:	4615      	mov	r5, r2
    if (p_config)
    58b2:	2900      	cmp	r1, #0
    58b4:	d055      	beq.n	5962 <nrfx_gpiote_output_configure+0xb6>
    58b6:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    58b8:	f003 fc76 	bl	91a8 <pin_is_input>
    58bc:	b128      	cbz	r0, 58ca <nrfx_gpiote_output_configure+0x1e>
    58be:	4620      	mov	r0, r4
    58c0:	f7ff fd28 	bl	5314 <pin_in_use_by_te>
    58c4:	2800      	cmp	r0, #0
    58c6:	f040 80a2 	bne.w	5a0e <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    58ca:	4620      	mov	r0, r4
    58cc:	f7ff fd2c 	bl	5328 <pin_has_trigger>
    58d0:	b118      	cbz	r0, 58da <nrfx_gpiote_output_configure+0x2e>
    58d2:	7873      	ldrb	r3, [r6, #1]
    58d4:	2b01      	cmp	r3, #1
    58d6:	f000 809c 	beq.w	5a12 <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    58da:	f106 0c01 	add.w	ip, r6, #1
    58de:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    58e0:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    58e4:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    58e6:	2b01      	cmp	r3, #1
    58e8:	d057      	beq.n	599a <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
    58ea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    58ee:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    58f2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    58f6:	f1bc 0f00 	cmp.w	ip, #0
    58fa:	d050      	beq.n	599e <nrfx_gpiote_output_configure+0xf2>
    58fc:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    58fe:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5902:	2f00      	cmp	r7, #0
    5904:	d04d      	beq.n	59a2 <nrfx_gpiote_output_configure+0xf6>
    5906:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    590a:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    590e:	2e00      	cmp	r6, #0
    5910:	d04a      	beq.n	59a8 <nrfx_gpiote_output_configure+0xfc>
    5912:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5916:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    591a:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    591e:	f1bc 0f00 	cmp.w	ip, #0
    5922:	d044      	beq.n	59ae <nrfx_gpiote_output_configure+0x102>
    5924:	7873      	ldrb	r3, [r6, #1]
    5926:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5928:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    592c:	2f00      	cmp	r7, #0
    592e:	d040      	beq.n	59b2 <nrfx_gpiote_output_configure+0x106>
    5930:	f896 c002 	ldrb.w	ip, [r6, #2]
    5934:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5938:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    593c:	2e00      	cmp	r6, #0
    593e:	d03b      	beq.n	59b8 <nrfx_gpiote_output_configure+0x10c>
    5940:	7836      	ldrb	r6, [r6, #0]
    5942:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5944:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5946:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    5948:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    594c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5950:	4a33      	ldr	r2, [pc, #204]	; (5a20 <nrfx_gpiote_output_configure+0x174>)
    5952:	f104 0108 	add.w	r1, r4, #8
    5956:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    595a:	f043 0303 	orr.w	r3, r3, #3
    595e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5962:	2d00      	cmp	r5, #0
    5964:	d057      	beq.n	5a16 <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
    5966:	4620      	mov	r0, r4
    5968:	f003 fc1e 	bl	91a8 <pin_is_input>
    596c:	2800      	cmp	r0, #0
    596e:	d154      	bne.n	5a1a <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
    5970:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    5972:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    5976:	4a2b      	ldr	r2, [pc, #172]	; (5a24 <nrfx_gpiote_output_configure+0x178>)
    5978:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    597c:	4928      	ldr	r1, [pc, #160]	; (5a20 <nrfx_gpiote_output_configure+0x174>)
    597e:	f104 0008 	add.w	r0, r4, #8
    5982:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    5986:	f022 0220 	bic.w	r2, r2, #32
    598a:	04d2      	lsls	r2, r2, #19
    598c:	0cd2      	lsrs	r2, r2, #19
    598e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5992:	786a      	ldrb	r2, [r5, #1]
    5994:	b992      	cbnz	r2, 59bc <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
    5996:	4824      	ldr	r0, [pc, #144]	; (5a28 <nrfx_gpiote_output_configure+0x17c>)
}
    5998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    599a:	4924      	ldr	r1, [pc, #144]	; (5a2c <nrfx_gpiote_output_configure+0x180>)
    599c:	e7a7      	b.n	58ee <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    599e:	2300      	movs	r3, #0
    59a0:	e7ad      	b.n	58fe <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    59a2:	f04f 0e00 	mov.w	lr, #0
    59a6:	e7b0      	b.n	590a <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    59a8:	f04f 0e00 	mov.w	lr, #0
    59ac:	e7b3      	b.n	5916 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    59ae:	2300      	movs	r3, #0
    59b0:	e7ba      	b.n	5928 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    59b2:	f04f 0c00 	mov.w	ip, #0
    59b6:	e7bf      	b.n	5938 <nrfx_gpiote_output_configure+0x8c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    59b8:	2600      	movs	r6, #0
    59ba:	e7c3      	b.n	5944 <nrfx_gpiote_output_configure+0x98>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    59bc:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    59be:	4819      	ldr	r0, [pc, #100]	; (5a24 <nrfx_gpiote_output_configure+0x178>)
    59c0:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    59c4:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    59c8:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    59cc:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    59d0:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    59d4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    59d8:	0221      	lsls	r1, r4, #8
    59da:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    59de:	0412      	lsls	r2, r2, #16
    59e0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    59e4:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    59e6:	0539      	lsls	r1, r7, #20
    59e8:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    59ec:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    59ee:	4332      	orrs	r2, r6
    59f0:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    59f4:	035b      	lsls	r3, r3, #13
    59f6:	b29b      	uxth	r3, r3
    59f8:	4a09      	ldr	r2, [pc, #36]	; (5a20 <nrfx_gpiote_output_configure+0x174>)
    59fa:	3408      	adds	r4, #8
    59fc:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    5a00:	430b      	orrs	r3, r1
    5a02:	f043 0320 	orr.w	r3, r3, #32
    5a06:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    5a0a:	4807      	ldr	r0, [pc, #28]	; (5a28 <nrfx_gpiote_output_configure+0x17c>)
    5a0c:	e7c4      	b.n	5998 <nrfx_gpiote_output_configure+0xec>
    5a0e:	4808      	ldr	r0, [pc, #32]	; (5a30 <nrfx_gpiote_output_configure+0x184>)
    5a10:	e7c2      	b.n	5998 <nrfx_gpiote_output_configure+0xec>
    5a12:	4807      	ldr	r0, [pc, #28]	; (5a30 <nrfx_gpiote_output_configure+0x184>)
    5a14:	e7c0      	b.n	5998 <nrfx_gpiote_output_configure+0xec>
    5a16:	4804      	ldr	r0, [pc, #16]	; (5a28 <nrfx_gpiote_output_configure+0x17c>)
    5a18:	e7be      	b.n	5998 <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
    5a1a:	4805      	ldr	r0, [pc, #20]	; (5a30 <nrfx_gpiote_output_configure+0x184>)
    5a1c:	e7bc      	b.n	5998 <nrfx_gpiote_output_configure+0xec>
    5a1e:	bf00      	nop
    5a20:	2000005c 	.word	0x2000005c
    5a24:	40006000 	.word	0x40006000
    5a28:	0bad0000 	.word	0x0bad0000
    5a2c:	50000300 	.word	0x50000300
    5a30:	0bad0004 	.word	0x0bad0004

00005a34 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5a34:	4b01      	ldr	r3, [pc, #4]	; (5a3c <nrfx_gpiote_global_callback_set+0x8>)
    5a36:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    5a38:	60d9      	str	r1, [r3, #12]
}
    5a3a:	4770      	bx	lr
    5a3c:	2000005c 	.word	0x2000005c

00005a40 <nrfx_gpiote_channel_get>:
{
    5a40:	b538      	push	{r3, r4, r5, lr}
    5a42:	4604      	mov	r4, r0
    5a44:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    5a46:	f7ff fc65 	bl	5314 <pin_in_use_by_te>
    5a4a:	b140      	cbz	r0, 5a5e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5a4c:	f104 0008 	add.w	r0, r4, #8
    5a50:	4b04      	ldr	r3, [pc, #16]	; (5a64 <nrfx_gpiote_channel_get+0x24>)
    5a52:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    5a56:	0b5b      	lsrs	r3, r3, #13
    5a58:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    5a5a:	4803      	ldr	r0, [pc, #12]	; (5a68 <nrfx_gpiote_channel_get+0x28>)
}
    5a5c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5a5e:	4803      	ldr	r0, [pc, #12]	; (5a6c <nrfx_gpiote_channel_get+0x2c>)
    5a60:	e7fc      	b.n	5a5c <nrfx_gpiote_channel_get+0x1c>
    5a62:	bf00      	nop
    5a64:	2000005c 	.word	0x2000005c
    5a68:	0bad0000 	.word	0x0bad0000
    5a6c:	0bad0004 	.word	0x0bad0004

00005a70 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5a70:	4b10      	ldr	r3, [pc, #64]	; (5ab4 <nrfx_gpiote_init+0x44>)
    5a72:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5a76:	b10b      	cbz	r3, 5a7c <nrfx_gpiote_init+0xc>
        return err_code;
    5a78:	480f      	ldr	r0, [pc, #60]	; (5ab8 <nrfx_gpiote_init+0x48>)
}
    5a7a:	4770      	bx	lr
{
    5a7c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5a7e:	4c0d      	ldr	r4, [pc, #52]	; (5ab4 <nrfx_gpiote_init+0x44>)
    5a80:	2260      	movs	r2, #96	; 0x60
    5a82:	2100      	movs	r1, #0
    5a84:	f104 0010 	add.w	r0, r4, #16
    5a88:	f002 fe45 	bl	8716 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5a8c:	2006      	movs	r0, #6
    5a8e:	f7fc ff3b 	bl	2908 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5a92:	4b0a      	ldr	r3, [pc, #40]	; (5abc <nrfx_gpiote_init+0x4c>)
    5a94:	2200      	movs	r2, #0
    5a96:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    5a9a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5aa2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5aa6:	2301      	movs	r3, #1
    5aa8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5aac:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    5aae:	4804      	ldr	r0, [pc, #16]	; (5ac0 <nrfx_gpiote_init+0x50>)
}
    5ab0:	bd10      	pop	{r4, pc}
    5ab2:	bf00      	nop
    5ab4:	2000005c 	.word	0x2000005c
    5ab8:	0bad0005 	.word	0x0bad0005
    5abc:	40006000 	.word	0x40006000
    5ac0:	0bad0000 	.word	0x0bad0000

00005ac4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5ac4:	4b03      	ldr	r3, [pc, #12]	; (5ad4 <nrfx_gpiote_is_init+0x10>)
    5ac6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5aca:	3800      	subs	r0, #0
    5acc:	bf18      	it	ne
    5ace:	2001      	movne	r0, #1
    5ad0:	4770      	bx	lr
    5ad2:	bf00      	nop
    5ad4:	2000005c 	.word	0x2000005c

00005ad8 <nrfx_gpiote_channel_free>:
{
    5ad8:	b508      	push	{r3, lr}
    5ada:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5adc:	4801      	ldr	r0, [pc, #4]	; (5ae4 <nrfx_gpiote_channel_free+0xc>)
    5ade:	f7ff fb31 	bl	5144 <nrfx_flag32_free>
}
    5ae2:	bd08      	pop	{r3, pc}
    5ae4:	200000cc 	.word	0x200000cc

00005ae8 <nrfx_gpiote_channel_alloc>:
{
    5ae8:	b508      	push	{r3, lr}
    5aea:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5aec:	4801      	ldr	r0, [pc, #4]	; (5af4 <nrfx_gpiote_channel_alloc+0xc>)
    5aee:	f7ff fb01 	bl	50f4 <nrfx_flag32_alloc>
}
    5af2:	bd08      	pop	{r3, pc}
    5af4:	200000cc 	.word	0x200000cc

00005af8 <nrfx_gpiote_trigger_enable>:
{
    5af8:	b538      	push	{r3, r4, r5, lr}
    5afa:	4604      	mov	r4, r0
    5afc:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5afe:	f7ff fc09 	bl	5314 <pin_in_use_by_te>
    5b02:	b308      	cbz	r0, 5b48 <nrfx_gpiote_trigger_enable+0x50>
    5b04:	4620      	mov	r0, r4
    5b06:	f003 fb4f 	bl	91a8 <pin_is_input>
    5b0a:	b1e8      	cbz	r0, 5b48 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    5b0c:	4620      	mov	r0, r4
    5b0e:	f7ff fc21 	bl	5354 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5b12:	0083      	lsls	r3, r0, #2
    5b14:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    5b18:	b29b      	uxth	r3, r3
    5b1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5b1e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5b22:	2200      	movs	r2, #0
    5b24:	601a      	str	r2, [r3, #0]
    5b26:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5b28:	4a22      	ldr	r2, [pc, #136]	; (5bb4 <nrfx_gpiote_trigger_enable+0xbc>)
    5b2a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    5b2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5b32:	f043 0301 	orr.w	r3, r3, #1
    5b36:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    5b3a:	b39d      	cbz	r5, 5ba4 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5b3c:	2301      	movs	r3, #1
    5b3e:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    5b42:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    5b46:	e02d      	b.n	5ba4 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5b48:	f104 0308 	add.w	r3, r4, #8
    5b4c:	4a1a      	ldr	r2, [pc, #104]	; (5bb8 <nrfx_gpiote_trigger_enable+0xc0>)
    5b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5b52:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5b56:	2b04      	cmp	r3, #4
    5b58:	d012      	beq.n	5b80 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5b5a:	2b05      	cmp	r3, #5
    5b5c:	d023      	beq.n	5ba6 <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
    5b5e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5b62:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5b64:	2b01      	cmp	r3, #1
    5b66:	d009      	beq.n	5b7c <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
    5b68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    5b6c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5b70:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5b72:	f013 0f01 	tst.w	r3, #1
    5b76:	d018      	beq.n	5baa <nrfx_gpiote_trigger_enable+0xb2>
    5b78:	2003      	movs	r0, #3
    5b7a:	e002      	b.n	5b82 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    5b7c:	4b0f      	ldr	r3, [pc, #60]	; (5bbc <nrfx_gpiote_trigger_enable+0xc4>)
    5b7e:	e7f5      	b.n	5b6c <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5b80:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    5b82:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5b86:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5b88:	2c01      	cmp	r4, #1
    5b8a:	d010      	beq.n	5bae <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
    5b8c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5b90:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5b94:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5b98:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5b9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5ba0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    5ba4:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5ba6:	2002      	movs	r0, #2
    5ba8:	e7eb      	b.n	5b82 <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5baa:	2002      	movs	r0, #2
    5bac:	e7e9      	b.n	5b82 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    5bae:	4903      	ldr	r1, [pc, #12]	; (5bbc <nrfx_gpiote_trigger_enable+0xc4>)
    5bb0:	e7ee      	b.n	5b90 <nrfx_gpiote_trigger_enable+0x98>
    5bb2:	bf00      	nop
    5bb4:	40006000 	.word	0x40006000
    5bb8:	2000005c 	.word	0x2000005c
    5bbc:	50000300 	.word	0x50000300

00005bc0 <nrfx_gpiote_trigger_disable>:
{
    5bc0:	b510      	push	{r4, lr}
    5bc2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5bc4:	f7ff fba6 	bl	5314 <pin_in_use_by_te>
    5bc8:	b1a0      	cbz	r0, 5bf4 <nrfx_gpiote_trigger_disable+0x34>
    5bca:	4620      	mov	r0, r4
    5bcc:	f003 faec 	bl	91a8 <pin_is_input>
    5bd0:	b180      	cbz	r0, 5bf4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    5bd2:	4620      	mov	r0, r4
    5bd4:	f7ff fbbe 	bl	5354 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5bd8:	2201      	movs	r2, #1
    5bda:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    5bdc:	4b0e      	ldr	r3, [pc, #56]	; (5c18 <nrfx_gpiote_trigger_disable+0x58>)
    5bde:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5be2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5be6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    5bea:	f022 0203 	bic.w	r2, r2, #3
    5bee:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    5bf2:	e00e      	b.n	5c12 <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
    5bf4:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    5bf8:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5bfa:	2c01      	cmp	r4, #1
    5bfc:	d00a      	beq.n	5c14 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
    5bfe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5c02:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5c06:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5c0a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    5c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5c12:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    5c14:	4901      	ldr	r1, [pc, #4]	; (5c1c <nrfx_gpiote_trigger_disable+0x5c>)
    5c16:	e7f4      	b.n	5c02 <nrfx_gpiote_trigger_disable+0x42>
    5c18:	40006000 	.word	0x40006000
    5c1c:	50000300 	.word	0x50000300

00005c20 <nrfx_gpiote_pin_uninit>:
{
    5c20:	b510      	push	{r4, lr}
    5c22:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5c24:	f7ff fb6c 	bl	5300 <pin_in_use>
    5c28:	b908      	cbnz	r0, 5c2e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    5c2a:	480c      	ldr	r0, [pc, #48]	; (5c5c <nrfx_gpiote_pin_uninit+0x3c>)
}
    5c2c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    5c2e:	4620      	mov	r0, r4
    5c30:	f7ff ffc6 	bl	5bc0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5c34:	4620      	mov	r0, r4
    5c36:	f7ff fc0d 	bl	5454 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    5c3a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    5c3e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5c40:	2c01      	cmp	r4, #1
    5c42:	d008      	beq.n	5c56 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    5c44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5c48:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5c4c:	2102      	movs	r1, #2
    5c4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    5c52:	4803      	ldr	r0, [pc, #12]	; (5c60 <nrfx_gpiote_pin_uninit+0x40>)
    5c54:	e7ea      	b.n	5c2c <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    5c56:	4a03      	ldr	r2, [pc, #12]	; (5c64 <nrfx_gpiote_pin_uninit+0x44>)
    5c58:	e7f6      	b.n	5c48 <nrfx_gpiote_pin_uninit+0x28>
    5c5a:	bf00      	nop
    5c5c:	0bad0004 	.word	0x0bad0004
    5c60:	0bad0000 	.word	0x0bad0000
    5c64:	50000300 	.word	0x50000300

00005c68 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    5c68:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5c6a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    5c6c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5c70:	2100      	movs	r1, #0
    uint32_t status = 0;
    5c72:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5c74:	e003      	b.n	5c7e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    5c76:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    5c78:	3304      	adds	r3, #4
    5c7a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5c7c:	3101      	adds	r1, #1
    5c7e:	2907      	cmp	r1, #7
    5c80:	d814      	bhi.n	5cac <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c82:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5c86:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    5c8a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5c8c:	2a00      	cmp	r2, #0
    5c8e:	d0f2      	beq.n	5c76 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    5c90:	4a0c      	ldr	r2, [pc, #48]	; (5cc4 <nrfx_gpiote_irq_handler+0x5c>)
    5c92:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5c96:	4210      	tst	r0, r2
    5c98:	d0ed      	beq.n	5c76 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    5c9a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5c9e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ca2:	2500      	movs	r5, #0
    5ca4:	6015      	str	r5, [r2, #0]
    5ca6:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    5ca8:	4304      	orrs	r4, r0
    5caa:	e7e4      	b.n	5c76 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5cac:	4b05      	ldr	r3, [pc, #20]	; (5cc4 <nrfx_gpiote_irq_handler+0x5c>)
    5cae:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5cb2:	b91b      	cbnz	r3, 5cbc <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    5cb4:	4620      	mov	r0, r4
    5cb6:	f7ff fc1f 	bl	54f8 <gpiote_evt_handle>
}
    5cba:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    5cbc:	f7ff fcd4 	bl	5668 <port_event_handle>
    5cc0:	e7f8      	b.n	5cb4 <nrfx_gpiote_irq_handler+0x4c>
    5cc2:	bf00      	nop
    5cc4:	40006000 	.word	0x40006000

00005cc8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5cc8:	b508      	push	{r3, lr}
    5cca:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5ccc:	4801      	ldr	r0, [pc, #4]	; (5cd4 <nrfx_ppi_channel_alloc+0xc>)
    5cce:	f7ff fa11 	bl	50f4 <nrfx_flag32_alloc>
}
    5cd2:	bd08      	pop	{r3, pc}
    5cd4:	200000d8 	.word	0x200000d8

00005cd8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5cd8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5cda:	4c11      	ldr	r4, [pc, #68]	; (5d20 <_DoInit+0x48>)
    5cdc:	2303      	movs	r3, #3
    5cde:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5ce0:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5ce2:	4a10      	ldr	r2, [pc, #64]	; (5d24 <_DoInit+0x4c>)
    5ce4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5ce6:	4b10      	ldr	r3, [pc, #64]	; (5d28 <_DoInit+0x50>)
    5ce8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5cee:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5cf0:	2300      	movs	r3, #0
    5cf2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5cf4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5cf6:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5cf8:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5cfa:	4a0c      	ldr	r2, [pc, #48]	; (5d2c <_DoInit+0x54>)
    5cfc:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5cfe:	2210      	movs	r2, #16
    5d00:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    5d02:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5d04:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5d06:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5d08:	4909      	ldr	r1, [pc, #36]	; (5d30 <_DoInit+0x58>)
    5d0a:	1de0      	adds	r0, r4, #7
    5d0c:	f002 fc9d 	bl	864a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    5d10:	4908      	ldr	r1, [pc, #32]	; (5d34 <_DoInit+0x5c>)
    5d12:	4620      	mov	r0, r4
    5d14:	f002 fc99 	bl	864a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    5d18:	2320      	movs	r3, #32
    5d1a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    5d1c:	bd10      	pop	{r4, pc}
    5d1e:	bf00      	nop
    5d20:	20000f00 	.word	0x20000f00
    5d24:	0000a370 	.word	0x0000a370
    5d28:	20000fb8 	.word	0x20000fb8
    5d2c:	20000fa8 	.word	0x20000fa8
    5d30:	0000a37c 	.word	0x0000a37c
    5d34:	0000a380 	.word	0x0000a380

00005d38 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d3c:	4604      	mov	r4, r0
    5d3e:	460e      	mov	r6, r1
    5d40:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    5d42:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    5d46:	4a2d      	ldr	r2, [pc, #180]	; (5dfc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5d48:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5d4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5d4e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5d50:	42bb      	cmp	r3, r7
    5d52:	d84b      	bhi.n	5dec <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    5d54:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    5d58:	4928      	ldr	r1, [pc, #160]	; (5dfc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5d5a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    5d5e:	f8d2 8020 	ldr.w	r8, [r2, #32]
    5d62:	eba8 0907 	sub.w	r9, r8, r7
    5d66:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    5d6a:	4295      	cmp	r5, r2
    5d6c:	d904      	bls.n	5d78 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    5d6e:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5d70:	429d      	cmp	r5, r3
    5d72:	d916      	bls.n	5da2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    5d74:	2000      	movs	r0, #0
    5d76:	e03e      	b.n	5df6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5d78:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5dfc <SEGGER_RTT_WriteSkipNoLock+0xc4>
    5d7c:	1c63      	adds	r3, r4, #1
    5d7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5d82:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    5d86:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5d88:	462a      	mov	r2, r5
    5d8a:	4631      	mov	r1, r6
    5d8c:	4438      	add	r0, r7
    5d8e:	f002 fc93 	bl	86b8 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5d92:	443d      	add	r5, r7
    5d94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5d98:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    5d9c:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    5d9e:	2001      	movs	r0, #1
    5da0:	e029      	b.n	5df6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5da2:	1c43      	adds	r3, r0, #1
    5da4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5da8:	4a14      	ldr	r2, [pc, #80]	; (5dfc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5daa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5dae:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5db0:	464a      	mov	r2, r9
    5db2:	4631      	mov	r1, r6
    5db4:	4438      	add	r0, r7
    5db6:	f002 fc7f 	bl	86b8 <memcpy>
      NumBytes -= Rem;
    5dba:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    5dbe:	197f      	adds	r7, r7, r5
    5dc0:	d107      	bne.n	5dd2 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    5dc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5dc6:	4b0d      	ldr	r3, [pc, #52]	; (5dfc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5dc8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    5dcc:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    5dce:	2001      	movs	r0, #1
    5dd0:	e011      	b.n	5df6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    5dd2:	1c63      	adds	r3, r4, #1
    5dd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5dd8:	4a08      	ldr	r2, [pc, #32]	; (5dfc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5dda:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    5dde:	463a      	mov	r2, r7
    5de0:	eb06 0109 	add.w	r1, r6, r9
    5de4:	6858      	ldr	r0, [r3, #4]
    5de6:	f002 fc67 	bl	86b8 <memcpy>
    5dea:	e7ea      	b.n	5dc2 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    5dec:	1bdb      	subs	r3, r3, r7
    5dee:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5df0:	42ab      	cmp	r3, r5
    5df2:	d2c1      	bcs.n	5d78 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    5df4:	2000      	movs	r0, #0
}
    5df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5dfa:	bf00      	nop
    5dfc:	20000f00 	.word	0x20000f00

00005e00 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5e00:	4b06      	ldr	r3, [pc, #24]	; (5e1c <SEGGER_RTT_HasDataUp+0x1c>)
    5e02:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    5e06:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    5e0a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    5e0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5e10:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5e14:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    5e16:	1a80      	subs	r0, r0, r2
    5e18:	4770      	bx	lr
    5e1a:	bf00      	nop
    5e1c:	20000f00 	.word	0x20000f00

00005e20 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    5e20:	4b03      	ldr	r3, [pc, #12]	; (5e30 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    5e22:	e000      	b.n	5e26 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    5e24:	3318      	adds	r3, #24
	while (dev < __device_end) {
    5e26:	4a03      	ldr	r2, [pc, #12]	; (5e34 <z_device_state_init+0x14>)
    5e28:	4293      	cmp	r3, r2
    5e2a:	d3fb      	bcc.n	5e24 <z_device_state_init+0x4>
	}
}
    5e2c:	4770      	bx	lr
    5e2e:	bf00      	nop
    5e30:	000097f4 	.word	0x000097f4
    5e34:	0000986c 	.word	0x0000986c

00005e38 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    5e38:	b570      	push	{r4, r5, r6, lr}
    5e3a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5e3c:	4b11      	ldr	r3, [pc, #68]	; (5e84 <z_sys_init_run_level+0x4c>)
    5e3e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5e42:	e009      	b.n	5e58 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    5e44:	4240      	negs	r0, r0
    5e46:	e017      	b.n	5e78 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    5e48:	68eb      	ldr	r3, [r5, #12]
    5e4a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    5e4c:	68ea      	ldr	r2, [r5, #12]
    5e4e:	7853      	ldrb	r3, [r2, #1]
    5e50:	f043 0301 	orr.w	r3, r3, #1
    5e54:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5e56:	3408      	adds	r4, #8
    5e58:	1c73      	adds	r3, r6, #1
    5e5a:	4a0a      	ldr	r2, [pc, #40]	; (5e84 <z_sys_init_run_level+0x4c>)
    5e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e60:	42a3      	cmp	r3, r4
    5e62:	d90d      	bls.n	5e80 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    5e64:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    5e66:	6823      	ldr	r3, [r4, #0]
    5e68:	4628      	mov	r0, r5
    5e6a:	4798      	blx	r3
		if (dev != NULL) {
    5e6c:	2d00      	cmp	r5, #0
    5e6e:	d0f2      	beq.n	5e56 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    5e70:	2800      	cmp	r0, #0
    5e72:	d0eb      	beq.n	5e4c <z_sys_init_run_level+0x14>
				if (rc < 0) {
    5e74:	2800      	cmp	r0, #0
    5e76:	dbe5      	blt.n	5e44 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    5e78:	28ff      	cmp	r0, #255	; 0xff
    5e7a:	dde5      	ble.n	5e48 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    5e7c:	20ff      	movs	r0, #255	; 0xff
    5e7e:	e7e3      	b.n	5e48 <z_sys_init_run_level+0x10>
		}
	}
}
    5e80:	bd70      	pop	{r4, r5, r6, pc}
    5e82:	bf00      	nop
    5e84:	0000a388 	.word	0x0000a388

00005e88 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    5e88:	2804      	cmp	r0, #4
    5e8a:	d80c      	bhi.n	5ea6 <reason_to_str+0x1e>
    5e8c:	e8df f000 	tbb	[pc, r0]
    5e90:	07050d03 	.word	0x07050d03
    5e94:	09          	.byte	0x09
    5e95:	00          	.byte	0x00
    5e96:	4806      	ldr	r0, [pc, #24]	; (5eb0 <reason_to_str+0x28>)
    5e98:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    5e9a:	4806      	ldr	r0, [pc, #24]	; (5eb4 <reason_to_str+0x2c>)
    5e9c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    5e9e:	4806      	ldr	r0, [pc, #24]	; (5eb8 <reason_to_str+0x30>)
    5ea0:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    5ea2:	4806      	ldr	r0, [pc, #24]	; (5ebc <reason_to_str+0x34>)
    5ea4:	4770      	bx	lr
	default:
		return "Unknown error";
    5ea6:	4806      	ldr	r0, [pc, #24]	; (5ec0 <reason_to_str+0x38>)
    5ea8:	4770      	bx	lr
		return "Unhandled interrupt";
    5eaa:	4806      	ldr	r0, [pc, #24]	; (5ec4 <reason_to_str+0x3c>)
	}
}
    5eac:	4770      	bx	lr
    5eae:	bf00      	nop
    5eb0:	0000a3f0 	.word	0x0000a3f0
    5eb4:	0000a3c4 	.word	0x0000a3c4
    5eb8:	0000a3d4 	.word	0x0000a3d4
    5ebc:	0000a3e0 	.word	0x0000a3e0
    5ec0:	0000a3a0 	.word	0x0000a3a0
    5ec4:	0000a3b0 	.word	0x0000a3b0

00005ec8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5ec8:	b130      	cbz	r0, 5ed8 <thread_name_get+0x10>
{
    5eca:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5ecc:	f003 fa02 	bl	92d4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5ed0:	b120      	cbz	r0, 5edc <thread_name_get+0x14>
    5ed2:	7803      	ldrb	r3, [r0, #0]
    5ed4:	b123      	cbz	r3, 5ee0 <thread_name_get+0x18>
}
    5ed6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    5ed8:	4802      	ldr	r0, [pc, #8]	; (5ee4 <thread_name_get+0x1c>)
}
    5eda:	4770      	bx	lr
		thread_name = "unknown";
    5edc:	4801      	ldr	r0, [pc, #4]	; (5ee4 <thread_name_get+0x1c>)
    5ede:	e7fa      	b.n	5ed6 <thread_name_get+0xe>
    5ee0:	4800      	ldr	r0, [pc, #0]	; (5ee4 <thread_name_get+0x1c>)
	return thread_name;
    5ee2:	e7f8      	b.n	5ed6 <thread_name_get+0xe>
    5ee4:	0000a400 	.word	0x0000a400

00005ee8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5eec:	b089      	sub	sp, #36	; 0x24
    5eee:	af00      	add	r7, sp, #0
    5ef0:	4606      	mov	r6, r0
    5ef2:	460c      	mov	r4, r1
	__asm__ volatile(
    5ef4:	f04f 0320 	mov.w	r3, #32
    5ef8:	f3ef 8811 	mrs	r8, BASEPRI
    5efc:	f383 8812 	msr	BASEPRI_MAX, r3
    5f00:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5f04:	f001 f850 	bl	6fa8 <z_impl_z_current_get>
    5f08:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5f0a:	4630      	mov	r0, r6
    5f0c:	f7ff ffbc 	bl	5e88 <reason_to_str>
    5f10:	2303      	movs	r3, #3
    5f12:	713b      	strb	r3, [r7, #4]
    5f14:	46e9      	mov	r9, sp
    5f16:	b08a      	sub	sp, #40	; 0x28
    5f18:	466b      	mov	r3, sp
    5f1a:	f113 0210 	adds.w	r2, r3, #16
    5f1e:	f000 80b5 	beq.w	608c <z_fatal_error+0x1a4>
    5f22:	f04f 0c15 	mov.w	ip, #21
    5f26:	b122      	cbz	r2, 5f32 <z_fatal_error+0x4a>
    5f28:	f1bc 0f04 	cmp.w	ip, #4
    5f2c:	dd01      	ble.n	5f32 <z_fatal_error+0x4a>
    5f2e:	497a      	ldr	r1, [pc, #488]	; (6118 <z_fatal_error+0x230>)
    5f30:	6159      	str	r1, [r3, #20]
    5f32:	b11a      	cbz	r2, 5f3c <z_fatal_error+0x54>
    5f34:	f1bc 0f08 	cmp.w	ip, #8
    5f38:	dd00      	ble.n	5f3c <z_fatal_error+0x54>
    5f3a:	619e      	str	r6, [r3, #24]
    5f3c:	2103      	movs	r1, #3
    5f3e:	7139      	strb	r1, [r7, #4]
    5f40:	b11a      	cbz	r2, 5f4a <z_fatal_error+0x62>
    5f42:	f1bc 0f0c 	cmp.w	ip, #12
    5f46:	dd00      	ble.n	5f4a <z_fatal_error+0x62>
    5f48:	61d8      	str	r0, [r3, #28]
    5f4a:	b122      	cbz	r2, 5f56 <z_fatal_error+0x6e>
    5f4c:	f1bc 0f10 	cmp.w	ip, #16
    5f50:	dd01      	ble.n	5f56 <z_fatal_error+0x6e>
    5f52:	2100      	movs	r1, #0
    5f54:	6219      	str	r1, [r3, #32]
    5f56:	b12a      	cbz	r2, 5f64 <z_fatal_error+0x7c>
    5f58:	f103 0124 	add.w	r1, r3, #36	; 0x24
    5f5c:	2000      	movs	r0, #0
    5f5e:	2800      	cmp	r0, #0
    5f60:	f000 8097 	beq.w	6092 <z_fatal_error+0x1aa>
    5f64:	f1bc 0f14 	cmp.w	ip, #20
    5f68:	f340 809c 	ble.w	60a4 <z_fatal_error+0x1bc>
    5f6c:	2015      	movs	r0, #21
    5f6e:	b16a      	cbz	r2, 5f8c <z_fatal_error+0xa4>
    5f70:	2100      	movs	r1, #0
    5f72:	f04f 0c05 	mov.w	ip, #5
    5f76:	f36c 0107 	bfi	r1, ip, #0, #8
    5f7a:	f36f 210f 	bfc	r1, #8, #8
    5f7e:	f36f 4117 	bfc	r1, #16, #8
    5f82:	f04f 0c01 	mov.w	ip, #1
    5f86:	f36c 611f 	bfi	r1, ip, #24, #8
    5f8a:	6119      	str	r1, [r3, #16]
    5f8c:	2100      	movs	r1, #0
    5f8e:	f36f 0100 	bfc	r1, #0, #1
    5f92:	f36f 0141 	bfc	r1, #1, #1
    5f96:	f36f 0182 	bfc	r1, #2, #1
    5f9a:	f36f 01c5 	bfc	r1, #3, #3
    5f9e:	2301      	movs	r3, #1
    5fa0:	f363 1188 	bfi	r1, r3, #6, #3
    5fa4:	f3c0 0309 	ubfx	r3, r0, #0, #10
    5fa8:	f363 2152 	bfi	r1, r3, #9, #10
    5fac:	f36f 41de 	bfc	r1, #19, #12
    5fb0:	f36f 71df 	bfc	r1, #31, #1
    5fb4:	2300      	movs	r3, #0
    5fb6:	4859      	ldr	r0, [pc, #356]	; (611c <z_fatal_error+0x234>)
    5fb8:	f002 fa35 	bl	8426 <z_impl_z_log_msg2_static_create>
    5fbc:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5fbe:	b124      	cbz	r4, 5fca <z_fatal_error+0xe2>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5fc0:	69e3      	ldr	r3, [r4, #28]
    5fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d16f      	bne.n	60aa <z_fatal_error+0x1c2>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5fca:	4628      	mov	r0, r5
    5fcc:	f7ff ff7c 	bl	5ec8 <thread_name_get>
    5fd0:	2303      	movs	r3, #3
    5fd2:	713b      	strb	r3, [r7, #4]
    5fd4:	46e9      	mov	r9, sp
    5fd6:	b08a      	sub	sp, #40	; 0x28
    5fd8:	466b      	mov	r3, sp
    5fda:	f113 0210 	adds.w	r2, r3, #16
    5fde:	f000 808b 	beq.w	60f8 <z_fatal_error+0x210>
    5fe2:	f04f 0c11 	mov.w	ip, #17
    5fe6:	b122      	cbz	r2, 5ff2 <z_fatal_error+0x10a>
    5fe8:	f1bc 0f04 	cmp.w	ip, #4
    5fec:	dd01      	ble.n	5ff2 <z_fatal_error+0x10a>
    5fee:	494c      	ldr	r1, [pc, #304]	; (6120 <z_fatal_error+0x238>)
    5ff0:	6159      	str	r1, [r3, #20]
    5ff2:	b11a      	cbz	r2, 5ffc <z_fatal_error+0x114>
    5ff4:	f1bc 0f08 	cmp.w	ip, #8
    5ff8:	dd00      	ble.n	5ffc <z_fatal_error+0x114>
    5ffa:	619d      	str	r5, [r3, #24]
    5ffc:	2103      	movs	r1, #3
    5ffe:	7139      	strb	r1, [r7, #4]
    6000:	b11a      	cbz	r2, 600a <z_fatal_error+0x122>
    6002:	f1bc 0f0c 	cmp.w	ip, #12
    6006:	dd00      	ble.n	600a <z_fatal_error+0x122>
    6008:	61d8      	str	r0, [r3, #28]
    600a:	b122      	cbz	r2, 6016 <z_fatal_error+0x12e>
    600c:	f103 0120 	add.w	r1, r3, #32
    6010:	2000      	movs	r0, #0
    6012:	2800      	cmp	r0, #0
    6014:	d073      	beq.n	60fe <z_fatal_error+0x216>
    6016:	f1bc 0f10 	cmp.w	ip, #16
    601a:	dd79      	ble.n	6110 <z_fatal_error+0x228>
    601c:	2011      	movs	r0, #17
    601e:	b16a      	cbz	r2, 603c <z_fatal_error+0x154>
    6020:	2100      	movs	r1, #0
    6022:	f04f 0c04 	mov.w	ip, #4
    6026:	f36c 0107 	bfi	r1, ip, #0, #8
    602a:	f36f 210f 	bfc	r1, #8, #8
    602e:	f36f 4117 	bfc	r1, #16, #8
    6032:	f04f 0c01 	mov.w	ip, #1
    6036:	f36c 611f 	bfi	r1, ip, #24, #8
    603a:	6119      	str	r1, [r3, #16]
    603c:	2100      	movs	r1, #0
    603e:	f36f 0100 	bfc	r1, #0, #1
    6042:	f36f 0141 	bfc	r1, #1, #1
    6046:	f36f 0182 	bfc	r1, #2, #1
    604a:	f36f 01c5 	bfc	r1, #3, #3
    604e:	2301      	movs	r3, #1
    6050:	f363 1188 	bfi	r1, r3, #6, #3
    6054:	f3c0 0309 	ubfx	r3, r0, #0, #10
    6058:	f363 2152 	bfi	r1, r3, #9, #10
    605c:	f36f 41de 	bfc	r1, #19, #12
    6060:	f36f 71df 	bfc	r1, #31, #1
    6064:	2300      	movs	r3, #0
    6066:	482d      	ldr	r0, [pc, #180]	; (611c <z_fatal_error+0x234>)
    6068:	f002 f9dd 	bl	8426 <z_impl_z_log_msg2_static_create>
    606c:	46cd      	mov	sp, r9
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    606e:	4621      	mov	r1, r4
    6070:	4630      	mov	r0, r6
    6072:	f7fe ff1f 	bl	4eb4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6076:	f388 8811 	msr	BASEPRI, r8
    607a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    607e:	4628      	mov	r0, r5
    6080:	f7fd fcf2 	bl	3a68 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6084:	3724      	adds	r7, #36	; 0x24
    6086:	46bd      	mov	sp, r7
    6088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    608c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    6090:	e749      	b.n	5f26 <z_fatal_error+0x3e>
    6092:	f107 0e20 	add.w	lr, r7, #32
    6096:	4486      	add	lr, r0
    6098:	f81e ec1c 	ldrb.w	lr, [lr, #-28]
    609c:	f801 eb01 	strb.w	lr, [r1], #1
    60a0:	3001      	adds	r0, #1
    60a2:	e75c      	b.n	5f5e <z_fatal_error+0x76>
    60a4:	f06f 001b 	mvn.w	r0, #27
    60a8:	e761      	b.n	5f6e <z_fatal_error+0x86>
		LOG_ERR("Fault during interrupt handling\n");
    60aa:	4b1e      	ldr	r3, [pc, #120]	; (6124 <z_fatal_error+0x23c>)
    60ac:	61fb      	str	r3, [r7, #28]
    60ae:	2300      	movs	r3, #0
    60b0:	2202      	movs	r2, #2
    60b2:	f362 0307 	bfi	r3, r2, #0, #8
    60b6:	f36f 230f 	bfc	r3, #8, #8
    60ba:	f36f 4317 	bfc	r3, #16, #8
    60be:	f36f 631f 	bfc	r3, #24, #8
    60c2:	61bb      	str	r3, [r7, #24]
    60c4:	2100      	movs	r1, #0
    60c6:	f36f 0100 	bfc	r1, #0, #1
    60ca:	f36f 0141 	bfc	r1, #1, #1
    60ce:	f36f 0182 	bfc	r1, #2, #1
    60d2:	f36f 01c5 	bfc	r1, #3, #3
    60d6:	2301      	movs	r3, #1
    60d8:	f363 1188 	bfi	r1, r3, #6, #3
    60dc:	2308      	movs	r3, #8
    60de:	f363 2152 	bfi	r1, r3, #9, #10
    60e2:	f36f 41de 	bfc	r1, #19, #12
    60e6:	f36f 71df 	bfc	r1, #31, #1
    60ea:	2300      	movs	r3, #0
    60ec:	f107 0218 	add.w	r2, r7, #24
    60f0:	480a      	ldr	r0, [pc, #40]	; (611c <z_fatal_error+0x234>)
    60f2:	f002 f998 	bl	8426 <z_impl_z_log_msg2_static_create>
    60f6:	e768      	b.n	5fca <z_fatal_error+0xe2>
	LOG_ERR("Current thread: %p (%s)", thread,
    60f8:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    60fc:	e773      	b.n	5fe6 <z_fatal_error+0xfe>
    60fe:	f107 0e20 	add.w	lr, r7, #32
    6102:	4486      	add	lr, r0
    6104:	f81e ec1c 	ldrb.w	lr, [lr, #-28]
    6108:	f801 eb01 	strb.w	lr, [r1], #1
    610c:	3001      	adds	r0, #1
    610e:	e780      	b.n	6012 <z_fatal_error+0x12a>
    6110:	f06f 001b 	mvn.w	r0, #27
    6114:	e783      	b.n	601e <z_fatal_error+0x136>
    6116:	bf00      	nop
    6118:	0000a408 	.word	0x0000a408
    611c:	00009a1c 	.word	0x00009a1c
    6120:	0000a454 	.word	0x0000a454
    6124:	0000a430 	.word	0x0000a430

00006128 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    6128:	b510      	push	{r4, lr}
    612a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    612c:	4c11      	ldr	r4, [pc, #68]	; (6174 <init_idle_thread+0x4c>)
    612e:	23b0      	movs	r3, #176	; 0xb0
    6130:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6134:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6138:	4b0f      	ldr	r3, [pc, #60]	; (6178 <init_idle_thread+0x50>)
    613a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    613e:	4a0f      	ldr	r2, [pc, #60]	; (617c <init_idle_thread+0x54>)
    6140:	9205      	str	r2, [sp, #20]
    6142:	2201      	movs	r2, #1
    6144:	9204      	str	r2, [sp, #16]
    6146:	220f      	movs	r2, #15
    6148:	9203      	str	r2, [sp, #12]
    614a:	2200      	movs	r2, #0
    614c:	9202      	str	r2, [sp, #8]
    614e:	9201      	str	r2, [sp, #4]
    6150:	9300      	str	r3, [sp, #0]
    6152:	4b0b      	ldr	r3, [pc, #44]	; (6180 <init_idle_thread+0x58>)
    6154:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6158:	490a      	ldr	r1, [pc, #40]	; (6184 <init_idle_thread+0x5c>)
    615a:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    615e:	fb0c 1100 	mla	r1, ip, r0, r1
    6162:	4620      	mov	r0, r4
    6164:	f000 f960 	bl	6428 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6168:	7b63      	ldrb	r3, [r4, #13]
    616a:	f023 0304 	bic.w	r3, r3, #4
    616e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    6170:	b006      	add	sp, #24
    6172:	bd10      	pop	{r4, pc}
    6174:	200006d8 	.word	0x200006d8
    6178:	200013b8 	.word	0x200013b8
    617c:	0000a46c 	.word	0x0000a46c
    6180:	00006585 	.word	0x00006585
    6184:	20001d20 	.word	0x20001d20

00006188 <bg_thread_main>:
{
    6188:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    618a:	4b0b      	ldr	r3, [pc, #44]	; (61b8 <bg_thread_main+0x30>)
    618c:	2201      	movs	r2, #1
    618e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6190:	2002      	movs	r0, #2
    6192:	f7ff fe51 	bl	5e38 <z_sys_init_run_level>
	boot_banner();
    6196:	f001 f947 	bl	7428 <boot_banner>
	z_cpp_init_static();
    619a:	f002 f9cf 	bl	853c <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    619e:	2003      	movs	r0, #3
    61a0:	f7ff fe4a 	bl	5e38 <z_sys_init_run_level>
	z_init_static_threads();
    61a4:	f000 f9a4 	bl	64f0 <z_init_static_threads>
	main();
    61a8:	f7fa f918 	bl	3dc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    61ac:	4a03      	ldr	r2, [pc, #12]	; (61bc <bg_thread_main+0x34>)
    61ae:	7b13      	ldrb	r3, [r2, #12]
    61b0:	f023 0301 	bic.w	r3, r3, #1
    61b4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    61b6:	bd08      	pop	{r3, pc}
    61b8:	200015df 	.word	0x200015df
    61bc:	20000788 	.word	0x20000788

000061c0 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    61c0:	b508      	push	{r3, lr}
    61c2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    61c4:	4a01      	ldr	r2, [pc, #4]	; (61cc <switch_to_main_thread+0xc>)
    61c6:	4802      	ldr	r0, [pc, #8]	; (61d0 <switch_to_main_thread+0x10>)
    61c8:	f7fc fc92 	bl	2af0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    61cc:	00006189 	.word	0x00006189
    61d0:	20000788 	.word	0x20000788

000061d4 <z_bss_zero>:
{
    61d4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    61d6:	4803      	ldr	r0, [pc, #12]	; (61e4 <z_bss_zero+0x10>)
    61d8:	4a03      	ldr	r2, [pc, #12]	; (61e8 <z_bss_zero+0x14>)
    61da:	1a12      	subs	r2, r2, r0
    61dc:	2100      	movs	r1, #0
    61de:	f003 f807 	bl	91f0 <z_early_memset>
}
    61e2:	bd08      	pop	{r3, pc}
    61e4:	200001d0 	.word	0x200001d0
    61e8:	200015e0 	.word	0x200015e0

000061ec <z_init_cpu>:
{
    61ec:	b510      	push	{r4, lr}
    61ee:	4604      	mov	r4, r0
	init_idle_thread(id);
    61f0:	f7ff ff9a 	bl	6128 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    61f4:	490b      	ldr	r1, [pc, #44]	; (6224 <z_init_cpu+0x38>)
    61f6:	23b0      	movs	r3, #176	; 0xb0
    61f8:	fb03 1104 	mla	r1, r3, r4, r1
    61fc:	4a0a      	ldr	r2, [pc, #40]	; (6228 <z_init_cpu+0x3c>)
    61fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    6202:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6206:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    6208:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    620a:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    620e:	4b07      	ldr	r3, [pc, #28]	; (622c <z_init_cpu+0x40>)
    6210:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    6214:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    6218:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    621c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    6220:	6063      	str	r3, [r4, #4]
}
    6222:	bd10      	pop	{r4, pc}
    6224:	200006d8 	.word	0x200006d8
    6228:	200013b8 	.word	0x200013b8
    622c:	20001e80 	.word	0x20001e80

00006230 <prepare_multithreading>:
{
    6230:	b570      	push	{r4, r5, r6, lr}
    6232:	b086      	sub	sp, #24
	z_sched_init();
    6234:	f000 fdf0 	bl	6e18 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    6238:	4d10      	ldr	r5, [pc, #64]	; (627c <prepare_multithreading+0x4c>)
    623a:	4b11      	ldr	r3, [pc, #68]	; (6280 <prepare_multithreading+0x50>)
    623c:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    623e:	4b11      	ldr	r3, [pc, #68]	; (6284 <prepare_multithreading+0x54>)
    6240:	9305      	str	r3, [sp, #20]
    6242:	2301      	movs	r3, #1
    6244:	9304      	str	r3, [sp, #16]
    6246:	2400      	movs	r4, #0
    6248:	9403      	str	r4, [sp, #12]
    624a:	9402      	str	r4, [sp, #8]
    624c:	9401      	str	r4, [sp, #4]
    624e:	9400      	str	r4, [sp, #0]
    6250:	4b0d      	ldr	r3, [pc, #52]	; (6288 <prepare_multithreading+0x58>)
    6252:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6256:	490d      	ldr	r1, [pc, #52]	; (628c <prepare_multithreading+0x5c>)
    6258:	4628      	mov	r0, r5
    625a:	f000 f8e5 	bl	6428 <z_setup_new_thread>
    625e:	4606      	mov	r6, r0
    6260:	7b6b      	ldrb	r3, [r5, #13]
    6262:	f023 0304 	bic.w	r3, r3, #4
    6266:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    6268:	4628      	mov	r0, r5
    626a:	f003 f8ea 	bl	9442 <z_ready_thread>
	z_init_cpu(0);
    626e:	4620      	mov	r0, r4
    6270:	f7ff ffbc 	bl	61ec <z_init_cpu>
}
    6274:	4630      	mov	r0, r6
    6276:	b006      	add	sp, #24
    6278:	bd70      	pop	{r4, r5, r6, pc}
    627a:	bf00      	nop
    627c:	20000788 	.word	0x20000788
    6280:	200013b8 	.word	0x200013b8
    6284:	0000a474 	.word	0x0000a474
    6288:	00006189 	.word	0x00006189
    628c:	20001900 	.word	0x20001900

00006290 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6290:	b500      	push	{lr}
    6292:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6294:	4b1e      	ldr	r3, [pc, #120]	; (6310 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6296:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    629a:	4c1e      	ldr	r4, [pc, #120]	; (6314 <z_cstart+0x84>)
    629c:	6963      	ldr	r3, [r4, #20]
    629e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    62a2:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    62a4:	23e0      	movs	r3, #224	; 0xe0
    62a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    62aa:	2500      	movs	r5, #0
    62ac:	77e5      	strb	r5, [r4, #31]
    62ae:	7625      	strb	r5, [r4, #24]
    62b0:	7665      	strb	r5, [r4, #25]
    62b2:	76a5      	strb	r5, [r4, #26]
    62b4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    62b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    62ba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    62be:	6263      	str	r3, [r4, #36]	; 0x24
    62c0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    62c4:	f7fd fb3c 	bl	3940 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    62c8:	f7fc f9d4 	bl	2674 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    62cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62d0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    62d2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    62d4:	f7fd fd0c 	bl	3cf0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    62d8:	f7fd fbe0 	bl	3a9c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    62dc:	f7fb fb2c 	bl	1938 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    62e0:	2401      	movs	r4, #1
    62e2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    62e6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    62ea:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    62ec:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    62ee:	9529      	str	r5, [sp, #164]	; 0xa4
#endif

	_current_cpu->current = dummy_thread;
    62f0:	4b09      	ldr	r3, [pc, #36]	; (6318 <z_cstart+0x88>)
    62f2:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    62f6:	f7ff fd93 	bl	5e20 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    62fa:	4628      	mov	r0, r5
    62fc:	f7ff fd9c 	bl	5e38 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6300:	4620      	mov	r0, r4
    6302:	f7ff fd99 	bl	5e38 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    6306:	f7ff ff93 	bl	6230 <prepare_multithreading>
    630a:	f7ff ff59 	bl	61c0 <switch_to_main_thread>
    630e:	bf00      	nop
    6310:	200026a0 	.word	0x200026a0
    6314:	e000ed00 	.word	0xe000ed00
    6318:	200013b8 	.word	0x200013b8

0000631c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    631c:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    631e:	4c06      	ldr	r4, [pc, #24]	; (6338 <init_mem_slab_module+0x1c>)
	int rc = 0;
    6320:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6322:	e000      	b.n	6326 <init_mem_slab_module+0xa>
    6324:	3420      	adds	r4, #32
    6326:	4b05      	ldr	r3, [pc, #20]	; (633c <init_mem_slab_module+0x20>)
    6328:	429c      	cmp	r4, r3
    632a:	d204      	bcs.n	6336 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    632c:	4620      	mov	r0, r4
    632e:	f002 ff67 	bl	9200 <create_free_list>
		if (rc < 0) {
    6332:	2800      	cmp	r0, #0
    6334:	daf6      	bge.n	6324 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    6336:	bd10      	pop	{r4, pc}
    6338:	20000158 	.word	0x20000158
    633c:	20000158 	.word	0x20000158

00006340 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6340:	b530      	push	{r4, r5, lr}
    6342:	b083      	sub	sp, #12
    6344:	460d      	mov	r5, r1
	__asm__ volatile(
    6346:	f04f 0420 	mov.w	r4, #32
    634a:	f3ef 8111 	mrs	r1, BASEPRI
    634e:	f384 8812 	msr	BASEPRI_MAX, r4
    6352:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6356:	6984      	ldr	r4, [r0, #24]
    6358:	b16c      	cbz	r4, 6376 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    635a:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    635c:	6983      	ldr	r3, [r0, #24]
    635e:	681b      	ldr	r3, [r3, #0]
    6360:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    6362:	69c3      	ldr	r3, [r0, #28]
    6364:	3301      	adds	r3, #1
    6366:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6368:	2000      	movs	r0, #0
	__asm__ volatile(
    636a:	f381 8811 	msr	BASEPRI, r1
    636e:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    6372:	b003      	add	sp, #12
    6374:	bd30      	pop	{r4, r5, pc}
    6376:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    637a:	ea53 0402 	orrs.w	r4, r3, r2
    637e:	d104      	bne.n	638a <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    6380:	2300      	movs	r3, #0
    6382:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    6384:	f06f 000b 	mvn.w	r0, #11
    6388:	e7ef      	b.n	636a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    638a:	9200      	str	r2, [sp, #0]
    638c:	9301      	str	r3, [sp, #4]
    638e:	4602      	mov	r2, r0
    6390:	4660      	mov	r0, ip
    6392:	f000 fc15 	bl	6bc0 <z_pend_curr>
		if (result == 0) {
    6396:	2800      	cmp	r0, #0
    6398:	d1eb      	bne.n	6372 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    639a:	4b02      	ldr	r3, [pc, #8]	; (63a4 <k_mem_slab_alloc+0x64>)
    639c:	689b      	ldr	r3, [r3, #8]
    639e:	695b      	ldr	r3, [r3, #20]
    63a0:	602b      	str	r3, [r5, #0]
		return result;
    63a2:	e7e6      	b.n	6372 <k_mem_slab_alloc+0x32>
    63a4:	200013b8 	.word	0x200013b8

000063a8 <z_thread_monitor_exit>:
	__asm__ volatile(
    63a8:	f04f 0320 	mov.w	r3, #32
    63ac:	f3ef 8111 	mrs	r1, BASEPRI
    63b0:	f383 8812 	msr	BASEPRI_MAX, r3
    63b4:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    63b8:	4b0a      	ldr	r3, [pc, #40]	; (63e4 <z_thread_monitor_exit+0x3c>)
    63ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63bc:	4283      	cmp	r3, r0
    63be:	d104      	bne.n	63ca <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    63c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    63c2:	4b08      	ldr	r3, [pc, #32]	; (63e4 <z_thread_monitor_exit+0x3c>)
    63c4:	629a      	str	r2, [r3, #40]	; 0x28
    63c6:	e007      	b.n	63d8 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    63c8:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    63ca:	b113      	cbz	r3, 63d2 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    63cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    63ce:	4282      	cmp	r2, r0
    63d0:	d1fa      	bne.n	63c8 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    63d2:	b10b      	cbz	r3, 63d8 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    63d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
    63d6:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    63d8:	f381 8811 	msr	BASEPRI, r1
    63dc:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    63e0:	4770      	bx	lr
    63e2:	bf00      	nop
    63e4:	200013b8 	.word	0x200013b8

000063e8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    63e8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    63ea:	4604      	mov	r4, r0
    63ec:	b140      	cbz	r0, 6400 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    63ee:	221f      	movs	r2, #31
    63f0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    63f4:	f002 f933 	bl	865e <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    63f8:	2000      	movs	r0, #0
    63fa:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    63fe:	bd10      	pop	{r4, pc}
		thread = _current;
    6400:	4b01      	ldr	r3, [pc, #4]	; (6408 <z_impl_k_thread_name_set+0x20>)
    6402:	689c      	ldr	r4, [r3, #8]
    6404:	e7f3      	b.n	63ee <z_impl_k_thread_name_set+0x6>
    6406:	bf00      	nop
    6408:	200013b8 	.word	0x200013b8

0000640c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    640c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    640e:	ea53 0102 	orrs.w	r1, r3, r2
    6412:	d102      	bne.n	641a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    6414:	f002 ff60 	bl	92d8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    6418:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    641a:	4902      	ldr	r1, [pc, #8]	; (6424 <schedule_new_thread+0x18>)
    641c:	3018      	adds	r0, #24
    641e:	f000 fe53 	bl	70c8 <z_add_timeout>
    6422:	e7f9      	b.n	6418 <schedule_new_thread+0xc>
    6424:	0000947b 	.word	0x0000947b

00006428 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    642c:	b085      	sub	sp, #20
    642e:	4604      	mov	r4, r0
    6430:	460f      	mov	r7, r1
    6432:	4615      	mov	r5, r2
    6434:	461e      	mov	r6, r3
    6436:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    643a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    643e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    6442:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6446:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    644a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    644c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    644e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6450:	2204      	movs	r2, #4
    6452:	9911      	ldr	r1, [sp, #68]	; 0x44
    6454:	f002 ff44 	bl	92e0 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    6458:	462a      	mov	r2, r5
    645a:	4639      	mov	r1, r7
    645c:	4620      	mov	r0, r4
    645e:	f002 ff21 	bl	92a4 <setup_thread_stack>
    6462:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6464:	f8cd 8008 	str.w	r8, [sp, #8]
    6468:	f8cd 9004 	str.w	r9, [sp, #4]
    646c:	f8cd a000 	str.w	sl, [sp]
    6470:	4633      	mov	r3, r6
    6472:	4602      	mov	r2, r0
    6474:	4639      	mov	r1, r7
    6476:	4620      	mov	r0, r4
    6478:	f7fc faf0 	bl	2a5c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    647c:	2300      	movs	r3, #0
    647e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    6480:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    6482:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    6486:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    648a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    648e:	f04f 0320 	mov.w	r3, #32
    6492:	f3ef 8211 	mrs	r2, BASEPRI
    6496:	f383 8812 	msr	BASEPRI_MAX, r3
    649a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    649e:	4b13      	ldr	r3, [pc, #76]	; (64ec <z_setup_new_thread+0xc4>)
    64a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    64a2:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    64a4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    64a6:	f382 8811 	msr	BASEPRI, r2
    64aa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    64ae:	f1bb 0f00 	cmp.w	fp, #0
    64b2:	d013      	beq.n	64dc <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    64b4:	221f      	movs	r2, #31
    64b6:	4659      	mov	r1, fp
    64b8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    64bc:	f002 f8cf 	bl	865e <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    64c0:	2300      	movs	r3, #0
    64c2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    64c6:	4b09      	ldr	r3, [pc, #36]	; (64ec <z_setup_new_thread+0xc4>)
    64c8:	689b      	ldr	r3, [r3, #8]
    64ca:	b15b      	cbz	r3, 64e4 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    64cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    64d0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    64d4:	4628      	mov	r0, r5
    64d6:	b005      	add	sp, #20
    64d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    64dc:	2300      	movs	r3, #0
    64de:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    64e2:	e7f0      	b.n	64c6 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    64e4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    64e8:	e7f4      	b.n	64d4 <z_setup_new_thread+0xac>
    64ea:	bf00      	nop
    64ec:	200013b8 	.word	0x200013b8

000064f0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    64f0:	b530      	push	{r4, r5, lr}
    64f2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    64f4:	4c21      	ldr	r4, [pc, #132]	; (657c <z_init_static_threads+0x8c>)
    64f6:	e014      	b.n	6522 <z_init_static_threads+0x32>
		z_setup_new_thread(
    64f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    64fa:	9305      	str	r3, [sp, #20]
    64fc:	6a23      	ldr	r3, [r4, #32]
    64fe:	9304      	str	r3, [sp, #16]
    6500:	69e3      	ldr	r3, [r4, #28]
    6502:	9303      	str	r3, [sp, #12]
    6504:	69a3      	ldr	r3, [r4, #24]
    6506:	9302      	str	r3, [sp, #8]
    6508:	6963      	ldr	r3, [r4, #20]
    650a:	9301      	str	r3, [sp, #4]
    650c:	6923      	ldr	r3, [r4, #16]
    650e:	9300      	str	r3, [sp, #0]
    6510:	68e3      	ldr	r3, [r4, #12]
    6512:	68a2      	ldr	r2, [r4, #8]
    6514:	6861      	ldr	r1, [r4, #4]
    6516:	6820      	ldr	r0, [r4, #0]
    6518:	f7ff ff86 	bl	6428 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    651c:	6823      	ldr	r3, [r4, #0]
    651e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    6520:	3430      	adds	r4, #48	; 0x30
    6522:	4b17      	ldr	r3, [pc, #92]	; (6580 <z_init_static_threads+0x90>)
    6524:	429c      	cmp	r4, r3
    6526:	d3e7      	bcc.n	64f8 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    6528:	f000 f9de 	bl	68e8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    652c:	4c13      	ldr	r4, [pc, #76]	; (657c <z_init_static_threads+0x8c>)
    652e:	e000      	b.n	6532 <z_init_static_threads+0x42>
    6530:	3430      	adds	r4, #48	; 0x30
    6532:	4b13      	ldr	r3, [pc, #76]	; (6580 <z_init_static_threads+0x90>)
    6534:	429c      	cmp	r4, r3
    6536:	d21c      	bcs.n	6572 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6538:	6a60      	ldr	r0, [r4, #36]	; 0x24
    653a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    653e:	d0f7      	beq.n	6530 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    6540:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    6542:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6546:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    6548:	03c9      	lsls	r1, r1, #15
    654a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    654e:	03c0      	lsls	r0, r0, #15
    6550:	f240 33e7 	movw	r3, #999	; 0x3e7
    6554:	18c0      	adds	r0, r0, r3
    6556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    655a:	f04f 0300 	mov.w	r3, #0
    655e:	f141 0100 	adc.w	r1, r1, #0
    6562:	f7f9 fdcd 	bl	100 <__aeabi_uldivmod>
    6566:	4602      	mov	r2, r0
    6568:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    656a:	4628      	mov	r0, r5
    656c:	f7ff ff4e 	bl	640c <schedule_new_thread>
    6570:	e7de      	b.n	6530 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    6572:	f000 fbdb 	bl	6d2c <k_sched_unlock>
}
    6576:	b007      	add	sp, #28
    6578:	bd30      	pop	{r4, r5, pc}
    657a:	bf00      	nop
    657c:	20000158 	.word	0x20000158
    6580:	20000158 	.word	0x20000158

00006584 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    6584:	b508      	push	{r3, lr}
    6586:	e001      	b.n	658c <idle+0x8>
	arch_cpu_idle();
    6588:	f7fc f87a 	bl	2680 <arch_cpu_idle>
	__asm__ volatile(
    658c:	f04f 0220 	mov.w	r2, #32
    6590:	f3ef 8311 	mrs	r3, BASEPRI
    6594:	f382 8812 	msr	BASEPRI_MAX, r2
    6598:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    659c:	f003 f87c 	bl	9698 <z_get_next_timeout_expiry>
    65a0:	4b05      	ldr	r3, [pc, #20]	; (65b8 <idle+0x34>)
    65a2:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    65a4:	4b05      	ldr	r3, [pc, #20]	; (65bc <idle+0x38>)
    65a6:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    65a8:	2b00      	cmp	r3, #0
    65aa:	d0ed      	beq.n	6588 <idle+0x4>
    65ac:	f7fb fe6e 	bl	228c <pm_system_suspend>
    65b0:	2800      	cmp	r0, #0
    65b2:	d1eb      	bne.n	658c <idle+0x8>
    65b4:	e7e8      	b.n	6588 <idle+0x4>
    65b6:	bf00      	nop
    65b8:	200013b8 	.word	0x200013b8
    65bc:	200015df 	.word	0x200015df

000065c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    65c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65c4:	b083      	sub	sp, #12
    65c6:	4604      	mov	r4, r0
    65c8:	461d      	mov	r5, r3
    65ca:	f04f 0320 	mov.w	r3, #32
    65ce:	f3ef 8711 	mrs	r7, BASEPRI
    65d2:	f383 8812 	msr	BASEPRI_MAX, r3
    65d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    65da:	68c1      	ldr	r1, [r0, #12]
    65dc:	b999      	cbnz	r1, 6606 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    65de:	2900      	cmp	r1, #0
    65e0:	d14f      	bne.n	6682 <z_impl_k_mutex_lock+0xc2>
    65e2:	4b3a      	ldr	r3, [pc, #232]	; (66cc <z_impl_k_mutex_lock+0x10c>)
    65e4:	689b      	ldr	r3, [r3, #8]
    65e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    65ea:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    65ec:	3101      	adds	r1, #1
    65ee:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    65f0:	4b36      	ldr	r3, [pc, #216]	; (66cc <z_impl_k_mutex_lock+0x10c>)
    65f2:	689b      	ldr	r3, [r3, #8]
    65f4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    65f6:	f387 8811 	msr	BASEPRI, r7
    65fa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    65fe:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6600:	b003      	add	sp, #12
    6602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6606:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6608:	6882      	ldr	r2, [r0, #8]
    660a:	4b30      	ldr	r3, [pc, #192]	; (66cc <z_impl_k_mutex_lock+0x10c>)
    660c:	689b      	ldr	r3, [r3, #8]
    660e:	429a      	cmp	r2, r3
    6610:	d0e5      	beq.n	65de <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6612:	ea55 0106 	orrs.w	r1, r5, r6
    6616:	bf0c      	ite	eq
    6618:	f04f 0801 	moveq.w	r8, #1
    661c:	f04f 0800 	movne.w	r8, #0
    6620:	d031      	beq.n	6686 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    6622:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6626:	4649      	mov	r1, r9
    6628:	f993 000e 	ldrsb.w	r0, [r3, #14]
    662c:	f002 fe8b 	bl	9346 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6630:	4581      	cmp	r9, r0
    6632:	dc2f      	bgt.n	6694 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    6634:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6638:	9600      	str	r6, [sp, #0]
    663a:	9501      	str	r5, [sp, #4]
    663c:	4622      	mov	r2, r4
    663e:	4639      	mov	r1, r7
    6640:	4823      	ldr	r0, [pc, #140]	; (66d0 <z_impl_k_mutex_lock+0x110>)
    6642:	f000 fabd 	bl	6bc0 <z_pend_curr>
	if (got_mutex == 0) {
    6646:	2800      	cmp	r0, #0
    6648:	d0da      	beq.n	6600 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    664a:	f04f 0320 	mov.w	r3, #32
    664e:	f3ef 8511 	mrs	r5, BASEPRI
    6652:	f383 8812 	msr	BASEPRI_MAX, r3
    6656:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    665a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    665c:	429c      	cmp	r4, r3
    665e:	d01f      	beq.n	66a0 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6660:	b1f3      	cbz	r3, 66a0 <z_impl_k_mutex_lock+0xe0>
    6662:	6921      	ldr	r1, [r4, #16]
    6664:	f993 000e 	ldrsb.w	r0, [r3, #14]
    6668:	f002 fe6d 	bl	9346 <new_prio_for_inheritance>
    666c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    666e:	4620      	mov	r0, r4
    6670:	f002 fe74 	bl	935c <adjust_owner_prio>
    6674:	b9b0      	cbnz	r0, 66a4 <z_impl_k_mutex_lock+0xe4>
    6676:	f1b9 0f00 	cmp.w	r9, #0
    667a:	d015      	beq.n	66a8 <z_impl_k_mutex_lock+0xe8>
    667c:	f04f 0801 	mov.w	r8, #1
    6680:	e012      	b.n	66a8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    6682:	6923      	ldr	r3, [r4, #16]
    6684:	e7b1      	b.n	65ea <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    6686:	f387 8811 	msr	BASEPRI, r7
    668a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    668e:	f06f 000f 	mvn.w	r0, #15
    6692:	e7b5      	b.n	6600 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    6694:	4601      	mov	r1, r0
    6696:	4620      	mov	r0, r4
    6698:	f002 fe60 	bl	935c <adjust_owner_prio>
    669c:	4681      	mov	r9, r0
    669e:	e7cb      	b.n	6638 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    66a0:	6921      	ldr	r1, [r4, #16]
    66a2:	e7e4      	b.n	666e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    66a4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    66a8:	f1b8 0f00 	cmp.w	r8, #0
    66ac:	d106      	bne.n	66bc <z_impl_k_mutex_lock+0xfc>
    66ae:	f385 8811 	msr	BASEPRI, r5
    66b2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    66b6:	f06f 000a 	mvn.w	r0, #10
    66ba:	e7a1      	b.n	6600 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    66bc:	4629      	mov	r1, r5
    66be:	4804      	ldr	r0, [pc, #16]	; (66d0 <z_impl_k_mutex_lock+0x110>)
    66c0:	f000 f8f6 	bl	68b0 <z_reschedule>
	return -EAGAIN;
    66c4:	f06f 000a 	mvn.w	r0, #10
    66c8:	e79a      	b.n	6600 <z_impl_k_mutex_lock+0x40>
    66ca:	bf00      	nop
    66cc:	200013b8 	.word	0x200013b8
    66d0:	200013e4 	.word	0x200013e4

000066d4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    66d4:	6882      	ldr	r2, [r0, #8]
    66d6:	2a00      	cmp	r2, #0
    66d8:	d035      	beq.n	6746 <z_impl_k_mutex_unlock+0x72>
{
    66da:	b538      	push	{r3, r4, r5, lr}
    66dc:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    66de:	4b1d      	ldr	r3, [pc, #116]	; (6754 <z_impl_k_mutex_unlock+0x80>)
    66e0:	689b      	ldr	r3, [r3, #8]
    66e2:	429a      	cmp	r2, r3
    66e4:	d132      	bne.n	674c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    66e6:	7bda      	ldrb	r2, [r3, #15]
    66e8:	3a01      	subs	r2, #1
    66ea:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    66ec:	68c3      	ldr	r3, [r0, #12]
    66ee:	2b01      	cmp	r3, #1
    66f0:	d905      	bls.n	66fe <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    66f2:	3b01      	subs	r3, #1
    66f4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    66f6:	f000 fb19 	bl	6d2c <k_sched_unlock>

	return 0;
    66fa:	2000      	movs	r0, #0
}
    66fc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    66fe:	f04f 0320 	mov.w	r3, #32
    6702:	f3ef 8511 	mrs	r5, BASEPRI
    6706:	f383 8812 	msr	BASEPRI_MAX, r3
    670a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    670e:	6901      	ldr	r1, [r0, #16]
    6710:	f002 fe24 	bl	935c <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6714:	4620      	mov	r0, r4
    6716:	f002 ff5b 	bl	95d0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    671a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    671c:	b160      	cbz	r0, 6738 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    671e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6722:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6724:	2300      	movs	r3, #0
    6726:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    672a:	f002 fe8a 	bl	9442 <z_ready_thread>
		z_reschedule(&lock, key);
    672e:	4629      	mov	r1, r5
    6730:	4809      	ldr	r0, [pc, #36]	; (6758 <z_impl_k_mutex_unlock+0x84>)
    6732:	f000 f8bd 	bl	68b0 <z_reschedule>
    6736:	e7de      	b.n	66f6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    6738:	2300      	movs	r3, #0
    673a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    673c:	f385 8811 	msr	BASEPRI, r5
    6740:	f3bf 8f6f 	isb	sy
    6744:	e7d7      	b.n	66f6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    6746:	f06f 0015 	mvn.w	r0, #21
}
    674a:	4770      	bx	lr
		return -EPERM;
    674c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6750:	e7d4      	b.n	66fc <z_impl_k_mutex_unlock+0x28>
    6752:	bf00      	nop
    6754:	200013b8 	.word	0x200013b8
    6758:	200013e4 	.word	0x200013e4

0000675c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    675c:	b538      	push	{r3, r4, r5, lr}
    675e:	4604      	mov	r4, r0
	__asm__ volatile(
    6760:	f04f 0320 	mov.w	r3, #32
    6764:	f3ef 8511 	mrs	r5, BASEPRI
    6768:	f383 8812 	msr	BASEPRI_MAX, r3
    676c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6770:	f002 ff2e 	bl	95d0 <z_unpend_first_thread>

	if (thread != NULL) {
    6774:	b148      	cbz	r0, 678a <z_impl_k_sem_give+0x2e>
    6776:	2200      	movs	r2, #0
    6778:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    677c:	f002 fe61 	bl	9442 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6780:	4629      	mov	r1, r5
    6782:	4807      	ldr	r0, [pc, #28]	; (67a0 <z_impl_k_sem_give+0x44>)
    6784:	f000 f894 	bl	68b0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6788:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    678a:	68a3      	ldr	r3, [r4, #8]
    678c:	68e2      	ldr	r2, [r4, #12]
    678e:	4293      	cmp	r3, r2
    6790:	d003      	beq.n	679a <z_impl_k_sem_give+0x3e>
    6792:	2201      	movs	r2, #1
    6794:	4413      	add	r3, r2
    6796:	60a3      	str	r3, [r4, #8]
}
    6798:	e7f2      	b.n	6780 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    679a:	2200      	movs	r2, #0
    679c:	e7fa      	b.n	6794 <z_impl_k_sem_give+0x38>
    679e:	bf00      	nop
    67a0:	200013e8 	.word	0x200013e8

000067a4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    67a4:	b510      	push	{r4, lr}
    67a6:	b082      	sub	sp, #8
    67a8:	f04f 0420 	mov.w	r4, #32
    67ac:	f3ef 8111 	mrs	r1, BASEPRI
    67b0:	f384 8812 	msr	BASEPRI_MAX, r4
    67b4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    67b8:	6884      	ldr	r4, [r0, #8]
    67ba:	b144      	cbz	r4, 67ce <z_impl_k_sem_take+0x2a>
		sem->count--;
    67bc:	3c01      	subs	r4, #1
    67be:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    67c0:	f381 8811 	msr	BASEPRI, r1
    67c4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    67c8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    67ca:	b002      	add	sp, #8
    67cc:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    67ce:	ea53 0402 	orrs.w	r4, r3, r2
    67d2:	d006      	beq.n	67e2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    67d4:	9200      	str	r2, [sp, #0]
    67d6:	9301      	str	r3, [sp, #4]
    67d8:	4602      	mov	r2, r0
    67da:	4805      	ldr	r0, [pc, #20]	; (67f0 <z_impl_k_sem_take+0x4c>)
    67dc:	f000 f9f0 	bl	6bc0 <z_pend_curr>
	return ret;
    67e0:	e7f3      	b.n	67ca <z_impl_k_sem_take+0x26>
    67e2:	f381 8811 	msr	BASEPRI, r1
    67e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    67ea:	f06f 000f 	mvn.w	r0, #15
    67ee:	e7ec      	b.n	67ca <z_impl_k_sem_take+0x26>
    67f0:	200013e8 	.word	0x200013e8

000067f4 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    67f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    67f8:	bf08      	it	eq
    67fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    67fe:	d100      	bne.n	6802 <add_thread_timeout+0xe>
    6800:	4770      	bx	lr
{
    6802:	b508      	push	{r3, lr}
    6804:	4902      	ldr	r1, [pc, #8]	; (6810 <add_thread_timeout+0x1c>)
    6806:	3018      	adds	r0, #24
    6808:	f000 fc5e 	bl	70c8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    680c:	bd08      	pop	{r3, pc}
    680e:	bf00      	nop
    6810:	0000947b 	.word	0x0000947b

00006814 <z_reset_time_slice>:
{
    6814:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    6816:	4b07      	ldr	r3, [pc, #28]	; (6834 <z_reset_time_slice+0x20>)
    6818:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    681a:	b904      	cbnz	r4, 681e <z_reset_time_slice+0xa>
}
    681c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    681e:	f7fe f935 	bl	4a8c <sys_clock_elapsed>
    6822:	4404      	add	r4, r0
    6824:	4b04      	ldr	r3, [pc, #16]	; (6838 <z_reset_time_slice+0x24>)
    6826:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6828:	2100      	movs	r1, #0
    682a:	4b02      	ldr	r3, [pc, #8]	; (6834 <z_reset_time_slice+0x20>)
    682c:	6818      	ldr	r0, [r3, #0]
    682e:	f002 ff4a 	bl	96c6 <z_set_timeout_expiry>
}
    6832:	e7f3      	b.n	681c <z_reset_time_slice+0x8>
    6834:	200013f8 	.word	0x200013f8
    6838:	200013b8 	.word	0x200013b8

0000683c <k_sched_time_slice_set>:
{
    683c:	b570      	push	{r4, r5, r6, lr}
    683e:	4604      	mov	r4, r0
    6840:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    6842:	2300      	movs	r3, #0
	__asm__ volatile(
    6844:	f04f 0220 	mov.w	r2, #32
    6848:	f3ef 8611 	mrs	r6, BASEPRI
    684c:	f382 8812 	msr	BASEPRI_MAX, r2
    6850:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    6854:	e00e      	b.n	6874 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    6856:	2802      	cmp	r0, #2
    6858:	bfb8      	it	lt
    685a:	2002      	movlt	r0, #2
    685c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    685e:	4b11      	ldr	r3, [pc, #68]	; (68a4 <k_sched_time_slice_set+0x68>)
    6860:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    6862:	4b11      	ldr	r3, [pc, #68]	; (68a8 <k_sched_time_slice_set+0x6c>)
    6864:	6898      	ldr	r0, [r3, #8]
    6866:	f7ff ffd5 	bl	6814 <z_reset_time_slice>
	__asm__ volatile(
    686a:	f386 8811 	msr	BASEPRI, r6
    686e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6872:	2301      	movs	r3, #1
    6874:	b9a3      	cbnz	r3, 68a0 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    6876:	4b0c      	ldr	r3, [pc, #48]	; (68a8 <k_sched_time_slice_set+0x6c>)
    6878:	2200      	movs	r2, #0
    687a:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    687c:	0c61      	lsrs	r1, r4, #17
    687e:	03e3      	lsls	r3, r4, #15
    6880:	f240 30e7 	movw	r0, #999	; 0x3e7
    6884:	1818      	adds	r0, r3, r0
    6886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    688a:	f04f 0300 	mov.w	r3, #0
    688e:	f141 0100 	adc.w	r1, r1, #0
    6892:	f7f9 fc35 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    6896:	4b05      	ldr	r3, [pc, #20]	; (68ac <k_sched_time_slice_set+0x70>)
    6898:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    689a:	2c00      	cmp	r4, #0
    689c:	dcdb      	bgt.n	6856 <k_sched_time_slice_set+0x1a>
    689e:	e7de      	b.n	685e <k_sched_time_slice_set+0x22>
}
    68a0:	bd70      	pop	{r4, r5, r6, pc}
    68a2:	bf00      	nop
    68a4:	200013f4 	.word	0x200013f4
    68a8:	200013b8 	.word	0x200013b8
    68ac:	200013f8 	.word	0x200013f8

000068b0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    68b0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    68b2:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    68b4:	b921      	cbnz	r1, 68c0 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    68b6:	f3ef 8305 	mrs	r3, IPSR
    68ba:	b913      	cbnz	r3, 68c2 <z_reschedule+0x12>
    68bc:	2101      	movs	r1, #1
    68be:	e000      	b.n	68c2 <z_reschedule+0x12>
    68c0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    68c2:	f011 0f01 	tst.w	r1, #1
    68c6:	d007      	beq.n	68d8 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    68c8:	4b06      	ldr	r3, [pc, #24]	; (68e4 <z_reschedule+0x34>)
    68ca:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    68cc:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    68ce:	429a      	cmp	r2, r3
    68d0:	d002      	beq.n	68d8 <z_reschedule+0x28>
	ret = arch_swap(key);
    68d2:	f7fc f86b 	bl	29ac <arch_swap>
		z_swap(lock, key);
    68d6:	e003      	b.n	68e0 <z_reschedule+0x30>
    68d8:	f380 8811 	msr	BASEPRI, r0
    68dc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    68e0:	bd08      	pop	{r3, pc}
    68e2:	bf00      	nop
    68e4:	200013b8 	.word	0x200013b8

000068e8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    68e8:	2300      	movs	r3, #0
	__asm__ volatile(
    68ea:	f04f 0220 	mov.w	r2, #32
    68ee:	f3ef 8111 	mrs	r1, BASEPRI
    68f2:	f382 8812 	msr	BASEPRI_MAX, r2
    68f6:	f3bf 8f6f 	isb	sy
    68fa:	e009      	b.n	6910 <k_sched_lock+0x28>
    68fc:	4b06      	ldr	r3, [pc, #24]	; (6918 <k_sched_lock+0x30>)
    68fe:	689a      	ldr	r2, [r3, #8]
    6900:	7bd3      	ldrb	r3, [r2, #15]
    6902:	3b01      	subs	r3, #1
    6904:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    6906:	f381 8811 	msr	BASEPRI, r1
    690a:	f3bf 8f6f 	isb	sy
    690e:	2301      	movs	r3, #1
    6910:	2b00      	cmp	r3, #0
    6912:	d0f3      	beq.n	68fc <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6914:	4770      	bx	lr
    6916:	bf00      	nop
    6918:	200013b8 	.word	0x200013b8

0000691c <update_cache>:
{
    691c:	b538      	push	{r3, r4, r5, lr}
    691e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    6920:	4810      	ldr	r0, [pc, #64]	; (6964 <update_cache+0x48>)
    6922:	f002 fd87 	bl	9434 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6926:	4605      	mov	r5, r0
    6928:	b170      	cbz	r0, 6948 <update_cache+0x2c>
	if (preempt_ok != 0) {
    692a:	b984      	cbnz	r4, 694e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    692c:	4b0e      	ldr	r3, [pc, #56]	; (6968 <update_cache+0x4c>)
    692e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    6930:	7b5a      	ldrb	r2, [r3, #13]
    6932:	f012 0f1f 	tst.w	r2, #31
    6936:	d10a      	bne.n	694e <update_cache+0x32>
	return node->next != NULL;
    6938:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    693a:	b942      	cbnz	r2, 694e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    693c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    693e:	2a7f      	cmp	r2, #127	; 0x7f
    6940:	d905      	bls.n	694e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    6942:	4a09      	ldr	r2, [pc, #36]	; (6968 <update_cache+0x4c>)
    6944:	61d3      	str	r3, [r2, #28]
    6946:	e00b      	b.n	6960 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6948:	4b07      	ldr	r3, [pc, #28]	; (6968 <update_cache+0x4c>)
    694a:	68dd      	ldr	r5, [r3, #12]
    694c:	e7ed      	b.n	692a <update_cache+0xe>
		if (thread != _current) {
    694e:	4b06      	ldr	r3, [pc, #24]	; (6968 <update_cache+0x4c>)
    6950:	689b      	ldr	r3, [r3, #8]
    6952:	42ab      	cmp	r3, r5
    6954:	d002      	beq.n	695c <update_cache+0x40>
			z_reset_time_slice(thread);
    6956:	4628      	mov	r0, r5
    6958:	f7ff ff5c 	bl	6814 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    695c:	4b02      	ldr	r3, [pc, #8]	; (6968 <update_cache+0x4c>)
    695e:	61dd      	str	r5, [r3, #28]
}
    6960:	bd38      	pop	{r3, r4, r5, pc}
    6962:	bf00      	nop
    6964:	200013d8 	.word	0x200013d8
    6968:	200013b8 	.word	0x200013b8

0000696c <move_thread_to_end_of_prio_q>:
{
    696c:	b538      	push	{r3, r4, r5, lr}
    696e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    6970:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6972:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6976:	2b00      	cmp	r3, #0
    6978:	db28      	blt.n	69cc <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    697a:	7b6b      	ldrb	r3, [r5, #13]
    697c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6980:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    6982:	4b1a      	ldr	r3, [pc, #104]	; (69ec <move_thread_to_end_of_prio_q+0x80>)
    6984:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6988:	429c      	cmp	r4, r3
    698a:	d02d      	beq.n	69e8 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    698c:	b16c      	cbz	r4, 69aa <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    698e:	4621      	mov	r1, r4
    6990:	4628      	mov	r0, r5
    6992:	f002 fd08 	bl	93a6 <z_sched_prio_cmp>
    6996:	2800      	cmp	r0, #0
    6998:	dc20      	bgt.n	69dc <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    699a:	b134      	cbz	r4, 69aa <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    699c:	4b13      	ldr	r3, [pc, #76]	; (69ec <move_thread_to_end_of_prio_q+0x80>)
    699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69a0:	429c      	cmp	r4, r3
    69a2:	d002      	beq.n	69aa <move_thread_to_end_of_prio_q+0x3e>
    69a4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    69a6:	2c00      	cmp	r4, #0
    69a8:	d1f0      	bne.n	698c <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    69aa:	4b10      	ldr	r3, [pc, #64]	; (69ec <move_thread_to_end_of_prio_q+0x80>)
    69ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    69ae:	f103 0120 	add.w	r1, r3, #32
    69b2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    69b4:	606a      	str	r2, [r5, #4]

	tail->next = node;
    69b6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    69b8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    69ba:	4b0c      	ldr	r3, [pc, #48]	; (69ec <move_thread_to_end_of_prio_q+0x80>)
    69bc:	6898      	ldr	r0, [r3, #8]
    69be:	42a8      	cmp	r0, r5
    69c0:	bf14      	ite	ne
    69c2:	2000      	movne	r0, #0
    69c4:	2001      	moveq	r0, #1
    69c6:	f7ff ffa9 	bl	691c <update_cache>
}
    69ca:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    69cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    69d0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    69d2:	4601      	mov	r1, r0
    69d4:	4806      	ldr	r0, [pc, #24]	; (69f0 <move_thread_to_end_of_prio_q+0x84>)
    69d6:	f002 fd25 	bl	9424 <z_priq_dumb_remove>
}
    69da:	e7ce      	b.n	697a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    69dc:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    69de:	606b      	str	r3, [r5, #4]
	node->next = successor;
    69e0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    69e2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    69e4:	6065      	str	r5, [r4, #4]
}
    69e6:	e7e8      	b.n	69ba <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    69e8:	2400      	movs	r4, #0
    69ea:	e7cf      	b.n	698c <move_thread_to_end_of_prio_q+0x20>
    69ec:	200013b8 	.word	0x200013b8
    69f0:	200013d8 	.word	0x200013d8

000069f4 <slice_expired_locked>:
{
    69f4:	b538      	push	{r3, r4, r5, lr}
    69f6:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    69f8:	4b07      	ldr	r3, [pc, #28]	; (6a18 <slice_expired_locked+0x24>)
    69fa:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    69fc:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    69fe:	f013 0f1f 	tst.w	r3, #31
    6a02:	d004      	beq.n	6a0e <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    6a04:	4628      	mov	r0, r5
    6a06:	f7ff ff05 	bl	6814 <z_reset_time_slice>
}
    6a0a:	4620      	mov	r0, r4
    6a0c:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    6a0e:	4628      	mov	r0, r5
    6a10:	f7ff ffac 	bl	696c <move_thread_to_end_of_prio_q>
    6a14:	e7f6      	b.n	6a04 <slice_expired_locked+0x10>
    6a16:	bf00      	nop
    6a18:	200013b8 	.word	0x200013b8

00006a1c <z_time_slice>:
{
    6a1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6a1e:	f04f 0320 	mov.w	r3, #32
    6a22:	f3ef 8411 	mrs	r4, BASEPRI
    6a26:	f383 8812 	msr	BASEPRI_MAX, r3
    6a2a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    6a2e:	4b22      	ldr	r3, [pc, #136]	; (6ab8 <z_time_slice+0x9c>)
    6a30:	689b      	ldr	r3, [r3, #8]
    6a32:	4a22      	ldr	r2, [pc, #136]	; (6abc <z_time_slice+0xa0>)
    6a34:	6812      	ldr	r2, [r2, #0]
    6a36:	4293      	cmp	r3, r2
    6a38:	d018      	beq.n	6a6c <z_time_slice+0x50>
    6a3a:	4621      	mov	r1, r4
	pending_current = NULL;
    6a3c:	4a1f      	ldr	r2, [pc, #124]	; (6abc <z_time_slice+0xa0>)
    6a3e:	2500      	movs	r5, #0
    6a40:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
    6a42:	4a1f      	ldr	r2, [pc, #124]	; (6ac0 <z_time_slice+0xa4>)
    6a44:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
    6a46:	b372      	cbz	r2, 6aa6 <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6a48:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    6a4a:	2a7f      	cmp	r2, #127	; 0x7f
    6a4c:	d816      	bhi.n	6a7c <z_time_slice+0x60>
    6a4e:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    6a50:	f012 0f1f 	tst.w	r2, #31
    6a54:	d11c      	bne.n	6a90 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6a56:	f993 500e 	ldrsb.w	r5, [r3, #14]
    6a5a:	4a1a      	ldr	r2, [pc, #104]	; (6ac4 <z_time_slice+0xa8>)
    6a5c:	6812      	ldr	r2, [r2, #0]
    6a5e:	4295      	cmp	r5, r2
    6a60:	db18      	blt.n	6a94 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
    6a62:	4a19      	ldr	r2, [pc, #100]	; (6ac8 <z_time_slice+0xac>)
    6a64:	4293      	cmp	r3, r2
    6a66:	d017      	beq.n	6a98 <z_time_slice+0x7c>
    6a68:	2301      	movs	r3, #1
    6a6a:	e008      	b.n	6a7e <z_time_slice+0x62>
		z_reset_time_slice(_current);
    6a6c:	4618      	mov	r0, r3
    6a6e:	f7ff fed1 	bl	6814 <z_reset_time_slice>
	__asm__ volatile(
    6a72:	f384 8811 	msr	BASEPRI, r4
    6a76:	f3bf 8f6f 	isb	sy
		return;
    6a7a:	e01b      	b.n	6ab4 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    6a7c:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
    6a7e:	b193      	cbz	r3, 6aa6 <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
    6a80:	4b0d      	ldr	r3, [pc, #52]	; (6ab8 <z_time_slice+0x9c>)
    6a82:	691b      	ldr	r3, [r3, #16]
    6a84:	4283      	cmp	r3, r0
    6a86:	dd09      	ble.n	6a9c <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
    6a88:	1a18      	subs	r0, r3, r0
    6a8a:	4b0b      	ldr	r3, [pc, #44]	; (6ab8 <z_time_slice+0x9c>)
    6a8c:	6118      	str	r0, [r3, #16]
    6a8e:	e00d      	b.n	6aac <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    6a90:	2300      	movs	r3, #0
    6a92:	e7f4      	b.n	6a7e <z_time_slice+0x62>
    6a94:	2300      	movs	r3, #0
    6a96:	e7f2      	b.n	6a7e <z_time_slice+0x62>
    6a98:	2300      	movs	r3, #0
    6a9a:	e7f0      	b.n	6a7e <z_time_slice+0x62>
			key = slice_expired_locked(key);
    6a9c:	4620      	mov	r0, r4
    6a9e:	f7ff ffa9 	bl	69f4 <slice_expired_locked>
    6aa2:	4601      	mov	r1, r0
    6aa4:	e002      	b.n	6aac <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
    6aa6:	4b04      	ldr	r3, [pc, #16]	; (6ab8 <z_time_slice+0x9c>)
    6aa8:	2200      	movs	r2, #0
    6aaa:	611a      	str	r2, [r3, #16]
    6aac:	f381 8811 	msr	BASEPRI, r1
    6ab0:	f3bf 8f6f 	isb	sy
}
    6ab4:	bd38      	pop	{r3, r4, r5, pc}
    6ab6:	bf00      	nop
    6ab8:	200013b8 	.word	0x200013b8
    6abc:	200013ec 	.word	0x200013ec
    6ac0:	200013f8 	.word	0x200013f8
    6ac4:	200013f4 	.word	0x200013f4
    6ac8:	200006d8 	.word	0x200006d8

00006acc <ready_thread>:
{
    6acc:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    6ace:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6ad0:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6ad4:	2a00      	cmp	r2, #0
    6ad6:	db2d      	blt.n	6b34 <ready_thread+0x68>
    6ad8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6ada:	f013 0f1f 	tst.w	r3, #31
    6ade:	d105      	bne.n	6aec <ready_thread+0x20>
	return node->next != NULL;
    6ae0:	6982      	ldr	r2, [r0, #24]
    6ae2:	b10a      	cbz	r2, 6ae8 <ready_thread+0x1c>
    6ae4:	2200      	movs	r2, #0
    6ae6:	e002      	b.n	6aee <ready_thread+0x22>
    6ae8:	2201      	movs	r2, #1
    6aea:	e000      	b.n	6aee <ready_thread+0x22>
    6aec:	2200      	movs	r2, #0
    6aee:	b30a      	cbz	r2, 6b34 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    6af0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6af4:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    6af6:	4b14      	ldr	r3, [pc, #80]	; (6b48 <ready_thread+0x7c>)
    6af8:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6afc:	429d      	cmp	r5, r3
    6afe:	d020      	beq.n	6b42 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b00:	b16d      	cbz	r5, 6b1e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6b02:	4629      	mov	r1, r5
    6b04:	4620      	mov	r0, r4
    6b06:	f002 fc4e 	bl	93a6 <z_sched_prio_cmp>
    6b0a:	2800      	cmp	r0, #0
    6b0c:	dc13      	bgt.n	6b36 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6b0e:	b135      	cbz	r5, 6b1e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    6b10:	4b0d      	ldr	r3, [pc, #52]	; (6b48 <ready_thread+0x7c>)
    6b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b14:	429d      	cmp	r5, r3
    6b16:	d002      	beq.n	6b1e <ready_thread+0x52>
    6b18:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b1a:	2d00      	cmp	r5, #0
    6b1c:	d1f0      	bne.n	6b00 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    6b1e:	4b0a      	ldr	r3, [pc, #40]	; (6b48 <ready_thread+0x7c>)
    6b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6b22:	f103 0120 	add.w	r1, r3, #32
    6b26:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6b28:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6b2a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6b2c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    6b2e:	2000      	movs	r0, #0
    6b30:	f7ff fef4 	bl	691c <update_cache>
}
    6b34:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    6b36:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6b38:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6b3a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6b3c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6b3e:	606c      	str	r4, [r5, #4]
}
    6b40:	e7f5      	b.n	6b2e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b42:	2500      	movs	r5, #0
    6b44:	e7dc      	b.n	6b00 <ready_thread+0x34>
    6b46:	bf00      	nop
    6b48:	200013b8 	.word	0x200013b8

00006b4c <z_sched_start>:
{
    6b4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    6b4e:	f04f 0320 	mov.w	r3, #32
    6b52:	f3ef 8411 	mrs	r4, BASEPRI
    6b56:	f383 8812 	msr	BASEPRI_MAX, r3
    6b5a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6b5e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    6b60:	f013 0f04 	tst.w	r3, #4
    6b64:	d104      	bne.n	6b70 <z_sched_start+0x24>
	__asm__ volatile(
    6b66:	f384 8811 	msr	BASEPRI, r4
    6b6a:	f3bf 8f6f 	isb	sy
}
    6b6e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6b70:	f023 0304 	bic.w	r3, r3, #4
    6b74:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    6b76:	f7ff ffa9 	bl	6acc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6b7a:	4621      	mov	r1, r4
    6b7c:	4801      	ldr	r0, [pc, #4]	; (6b84 <z_sched_start+0x38>)
    6b7e:	f7ff fe97 	bl	68b0 <z_reschedule>
    6b82:	e7f4      	b.n	6b6e <z_sched_start+0x22>
    6b84:	200013f0 	.word	0x200013f0

00006b88 <unready_thread>:
{
    6b88:	b510      	push	{r4, lr}
    6b8a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    6b8c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6b8e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6b92:	2b00      	cmp	r3, #0
    6b94:	db08      	blt.n	6ba8 <unready_thread+0x20>
	update_cache(thread == _current);
    6b96:	4b08      	ldr	r3, [pc, #32]	; (6bb8 <unready_thread+0x30>)
    6b98:	6898      	ldr	r0, [r3, #8]
    6b9a:	42a0      	cmp	r0, r4
    6b9c:	bf14      	ite	ne
    6b9e:	2000      	movne	r0, #0
    6ba0:	2001      	moveq	r0, #1
    6ba2:	f7ff febb 	bl	691c <update_cache>
}
    6ba6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6bac:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6bae:	4601      	mov	r1, r0
    6bb0:	4802      	ldr	r0, [pc, #8]	; (6bbc <unready_thread+0x34>)
    6bb2:	f002 fc37 	bl	9424 <z_priq_dumb_remove>
}
    6bb6:	e7ee      	b.n	6b96 <unready_thread+0xe>
    6bb8:	200013b8 	.word	0x200013b8
    6bbc:	200013d8 	.word	0x200013d8

00006bc0 <z_pend_curr>:
{
    6bc0:	b510      	push	{r4, lr}
    6bc2:	460c      	mov	r4, r1
    6bc4:	4611      	mov	r1, r2
	pending_current = _current;
    6bc6:	4b06      	ldr	r3, [pc, #24]	; (6be0 <z_pend_curr+0x20>)
    6bc8:	6898      	ldr	r0, [r3, #8]
    6bca:	4b06      	ldr	r3, [pc, #24]	; (6be4 <z_pend_curr+0x24>)
    6bcc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    6bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6bd2:	f002 fcb4 	bl	953e <pend>
    6bd6:	4620      	mov	r0, r4
    6bd8:	f7fb fee8 	bl	29ac <arch_swap>
}
    6bdc:	bd10      	pop	{r4, pc}
    6bde:	bf00      	nop
    6be0:	200013b8 	.word	0x200013b8
    6be4:	200013ec 	.word	0x200013ec

00006be8 <z_set_prio>:
{
    6be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6bec:	4604      	mov	r4, r0
    6bee:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    6bf0:	2300      	movs	r3, #0
	__asm__ volatile(
    6bf2:	f04f 0220 	mov.w	r2, #32
    6bf6:	f3ef 8811 	mrs	r8, BASEPRI
    6bfa:	f382 8812 	msr	BASEPRI_MAX, r2
    6bfe:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    6c02:	461f      	mov	r7, r3
    6c04:	e008      	b.n	6c18 <z_set_prio+0x30>
		if (need_sched) {
    6c06:	f012 0701 	ands.w	r7, r2, #1
    6c0a:	d111      	bne.n	6c30 <z_set_prio+0x48>
			thread->base.prio = prio;
    6c0c:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
    6c0e:	f388 8811 	msr	BASEPRI, r8
    6c12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6c16:	2301      	movs	r3, #1
    6c18:	461a      	mov	r2, r3
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d13d      	bne.n	6c9a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    6c1e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6c20:	f013 0f1f 	tst.w	r3, #31
    6c24:	d1ef      	bne.n	6c06 <z_set_prio+0x1e>
	return node->next != NULL;
    6c26:	69a1      	ldr	r1, [r4, #24]
    6c28:	2900      	cmp	r1, #0
    6c2a:	d1ec      	bne.n	6c06 <z_set_prio+0x1e>
    6c2c:	2201      	movs	r2, #1
    6c2e:	e7ea      	b.n	6c06 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6c34:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6c36:	f8df 9068 	ldr.w	r9, [pc, #104]	; 6ca0 <z_set_prio+0xb8>
    6c3a:	4621      	mov	r1, r4
    6c3c:	4648      	mov	r0, r9
    6c3e:	f002 fbf1 	bl	9424 <z_priq_dumb_remove>
				thread->base.prio = prio;
    6c42:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6c44:	7b63      	ldrb	r3, [r4, #13]
    6c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6c4a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    6c4c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c50:	454d      	cmp	r5, r9
    6c52:	d020      	beq.n	6c96 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c54:	b16d      	cbz	r5, 6c72 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c56:	4629      	mov	r1, r5
    6c58:	4620      	mov	r0, r4
    6c5a:	f002 fba4 	bl	93a6 <z_sched_prio_cmp>
    6c5e:	2800      	cmp	r0, #0
    6c60:	dc13      	bgt.n	6c8a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6c62:	b135      	cbz	r5, 6c72 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    6c64:	4b0f      	ldr	r3, [pc, #60]	; (6ca4 <z_set_prio+0xbc>)
    6c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c68:	429d      	cmp	r5, r3
    6c6a:	d002      	beq.n	6c72 <z_set_prio+0x8a>
    6c6c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c6e:	2d00      	cmp	r5, #0
    6c70:	d1f0      	bne.n	6c54 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    6c72:	4b0c      	ldr	r3, [pc, #48]	; (6ca4 <z_set_prio+0xbc>)
    6c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6c76:	f103 0120 	add.w	r1, r3, #32
    6c7a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6c7c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6c7e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6c80:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    6c82:	2001      	movs	r0, #1
    6c84:	f7ff fe4a 	bl	691c <update_cache>
    6c88:	e7c1      	b.n	6c0e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    6c8a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6c8c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6c8e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6c90:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6c92:	606c      	str	r4, [r5, #4]
}
    6c94:	e7f5      	b.n	6c82 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c96:	2500      	movs	r5, #0
    6c98:	e7dc      	b.n	6c54 <z_set_prio+0x6c>
}
    6c9a:	4638      	mov	r0, r7
    6c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6ca0:	200013d8 	.word	0x200013d8
    6ca4:	200013b8 	.word	0x200013b8

00006ca8 <z_impl_k_thread_suspend>:
{
    6ca8:	b538      	push	{r3, r4, r5, lr}
    6caa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6cac:	3018      	adds	r0, #24
    6cae:	f002 fcd5 	bl	965c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    6cb2:	2300      	movs	r3, #0
	__asm__ volatile(
    6cb4:	f04f 0220 	mov.w	r2, #32
    6cb8:	f3ef 8511 	mrs	r5, BASEPRI
    6cbc:	f382 8812 	msr	BASEPRI_MAX, r2
    6cc0:	f3bf 8f6f 	isb	sy
    6cc4:	e010      	b.n	6ce8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6cc6:	7b63      	ldrb	r3, [r4, #13]
    6cc8:	f043 0310 	orr.w	r3, r3, #16
    6ccc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    6cce:	4b15      	ldr	r3, [pc, #84]	; (6d24 <z_impl_k_thread_suspend+0x7c>)
    6cd0:	6898      	ldr	r0, [r3, #8]
    6cd2:	42a0      	cmp	r0, r4
    6cd4:	bf14      	ite	ne
    6cd6:	2000      	movne	r0, #0
    6cd8:	2001      	moveq	r0, #1
    6cda:	f7ff fe1f 	bl	691c <update_cache>
	__asm__ volatile(
    6cde:	f385 8811 	msr	BASEPRI, r5
    6ce2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6ce6:	2301      	movs	r3, #1
    6ce8:	b963      	cbnz	r3, 6d04 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    6cea:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    6cec:	f994 300d 	ldrsb.w	r3, [r4, #13]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	dae8      	bge.n	6cc6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6cf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6cf8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6cfa:	4621      	mov	r1, r4
    6cfc:	480a      	ldr	r0, [pc, #40]	; (6d28 <z_impl_k_thread_suspend+0x80>)
    6cfe:	f002 fb91 	bl	9424 <z_priq_dumb_remove>
}
    6d02:	e7e0      	b.n	6cc6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    6d04:	4b07      	ldr	r3, [pc, #28]	; (6d24 <z_impl_k_thread_suspend+0x7c>)
    6d06:	689b      	ldr	r3, [r3, #8]
    6d08:	42a3      	cmp	r3, r4
    6d0a:	d000      	beq.n	6d0e <z_impl_k_thread_suspend+0x66>
}
    6d0c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6d0e:	f04f 0320 	mov.w	r3, #32
    6d12:	f3ef 8011 	mrs	r0, BASEPRI
    6d16:	f383 8812 	msr	BASEPRI_MAX, r3
    6d1a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6d1e:	f002 fb6c 	bl	93fa <z_reschedule_irqlock>
    6d22:	e7f3      	b.n	6d0c <z_impl_k_thread_suspend+0x64>
    6d24:	200013b8 	.word	0x200013b8
    6d28:	200013d8 	.word	0x200013d8

00006d2c <k_sched_unlock>:

void k_sched_unlock(void)
{
    6d2c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    6d2e:	2300      	movs	r3, #0
    6d30:	f04f 0220 	mov.w	r2, #32
    6d34:	f3ef 8411 	mrs	r4, BASEPRI
    6d38:	f382 8812 	msr	BASEPRI_MAX, r2
    6d3c:	f3bf 8f6f 	isb	sy
    6d40:	e00c      	b.n	6d5c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    6d42:	4b0d      	ldr	r3, [pc, #52]	; (6d78 <k_sched_unlock+0x4c>)
    6d44:	689a      	ldr	r2, [r3, #8]
    6d46:	7bd3      	ldrb	r3, [r2, #15]
    6d48:	3301      	adds	r3, #1
    6d4a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6d4c:	2000      	movs	r0, #0
    6d4e:	f7ff fde5 	bl	691c <update_cache>
	__asm__ volatile(
    6d52:	f384 8811 	msr	BASEPRI, r4
    6d56:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6d5a:	2301      	movs	r3, #1
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d0f0      	beq.n	6d42 <k_sched_unlock+0x16>
	__asm__ volatile(
    6d60:	f04f 0320 	mov.w	r3, #32
    6d64:	f3ef 8011 	mrs	r0, BASEPRI
    6d68:	f383 8812 	msr	BASEPRI_MAX, r3
    6d6c:	f3bf 8f6f 	isb	sy
    6d70:	f002 fb43 	bl	93fa <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    6d74:	bd10      	pop	{r4, pc}
    6d76:	bf00      	nop
    6d78:	200013b8 	.word	0x200013b8

00006d7c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    6d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    6d7e:	7b43      	ldrb	r3, [r0, #13]
    6d80:	f013 0f08 	tst.w	r3, #8
    6d84:	d145      	bne.n	6e12 <end_thread+0x96>
    6d86:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    6d88:	f043 0308 	orr.w	r3, r3, #8
    6d8c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6d8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6d92:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    6d94:	f013 0f80 	tst.w	r3, #128	; 0x80
    6d98:	d12d      	bne.n	6df6 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    6d9a:	68ab      	ldr	r3, [r5, #8]
    6d9c:	b15b      	cbz	r3, 6db6 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6d9e:	4628      	mov	r0, r5
    6da0:	f002 faff 	bl	93a2 <pended_on_thread>
    6da4:	4629      	mov	r1, r5
    6da6:	f002 fb3d 	bl	9424 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6daa:	7b6b      	ldrb	r3, [r5, #13]
    6dac:	f023 0302 	bic.w	r3, r3, #2
    6db0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    6db2:	2300      	movs	r3, #0
    6db4:	60ab      	str	r3, [r5, #8]
    6db6:	f105 0018 	add.w	r0, r5, #24
    6dba:	f002 fc4f 	bl	965c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    6dbe:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    6dc2:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6dc4:	42bc      	cmp	r4, r7
    6dc6:	d01e      	beq.n	6e06 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6dc8:	b1ec      	cbz	r4, 6e06 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6dca:	4620      	mov	r0, r4
    6dcc:	f002 fae9 	bl	93a2 <pended_on_thread>
    6dd0:	4621      	mov	r1, r4
    6dd2:	f002 fb27 	bl	9424 <z_priq_dumb_remove>
    6dd6:	7b63      	ldrb	r3, [r4, #13]
    6dd8:	f023 0302 	bic.w	r3, r3, #2
    6ddc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6dde:	2600      	movs	r6, #0
    6de0:	60a6      	str	r6, [r4, #8]
    6de2:	f104 0018 	add.w	r0, r4, #24
    6de6:	f002 fc39 	bl	965c <z_abort_timeout>
    6dea:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    6dee:	4620      	mov	r0, r4
    6df0:	f7ff fe6c 	bl	6acc <ready_thread>
    6df4:	e7e5      	b.n	6dc2 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6dfa:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6dfc:	4601      	mov	r1, r0
    6dfe:	4805      	ldr	r0, [pc, #20]	; (6e14 <end_thread+0x98>)
    6e00:	f002 fb10 	bl	9424 <z_priq_dumb_remove>
}
    6e04:	e7c9      	b.n	6d9a <end_thread+0x1e>
		update_cache(1);
    6e06:	2001      	movs	r0, #1
    6e08:	f7ff fd88 	bl	691c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    6e0c:	4628      	mov	r0, r5
    6e0e:	f7ff facb 	bl	63a8 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    6e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e14:	200013d8 	.word	0x200013d8

00006e18 <z_sched_init>:
{
    6e18:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    6e1a:	4804      	ldr	r0, [pc, #16]	; (6e2c <z_sched_init+0x14>)
    6e1c:	f002 fc03 	bl	9626 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6e20:	2100      	movs	r1, #0
    6e22:	4608      	mov	r0, r1
    6e24:	f7ff fd0a 	bl	683c <k_sched_time_slice_set>
}
    6e28:	bd08      	pop	{r3, pc}
    6e2a:	bf00      	nop
    6e2c:	200013d4 	.word	0x200013d4

00006e30 <z_impl_k_yield>:
{
    6e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e32:	f04f 0320 	mov.w	r3, #32
    6e36:	f3ef 8611 	mrs	r6, BASEPRI
    6e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    6e3e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    6e42:	4c1c      	ldr	r4, [pc, #112]	; (6eb4 <z_impl_k_yield+0x84>)
    6e44:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e46:	7b4b      	ldrb	r3, [r1, #13]
    6e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6e4c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6e4e:	f104 0720 	add.w	r7, r4, #32
    6e52:	4638      	mov	r0, r7
    6e54:	f002 fae6 	bl	9424 <z_priq_dumb_remove>
	queue_thread(_current);
    6e58:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6e5a:	7b6b      	ldrb	r3, [r5, #13]
    6e5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6e60:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    6e62:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e64:	42bc      	cmp	r4, r7
    6e66:	d023      	beq.n	6eb0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e68:	b16c      	cbz	r4, 6e86 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6e6a:	4621      	mov	r1, r4
    6e6c:	4628      	mov	r0, r5
    6e6e:	f002 fa9a 	bl	93a6 <z_sched_prio_cmp>
    6e72:	2800      	cmp	r0, #0
    6e74:	dc16      	bgt.n	6ea4 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6e76:	b134      	cbz	r4, 6e86 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    6e78:	4b0e      	ldr	r3, [pc, #56]	; (6eb4 <z_impl_k_yield+0x84>)
    6e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e7c:	429c      	cmp	r4, r3
    6e7e:	d002      	beq.n	6e86 <z_impl_k_yield+0x56>
    6e80:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e82:	2c00      	cmp	r4, #0
    6e84:	d1f0      	bne.n	6e68 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    6e86:	4b0b      	ldr	r3, [pc, #44]	; (6eb4 <z_impl_k_yield+0x84>)
    6e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6e8a:	f103 0120 	add.w	r1, r3, #32
    6e8e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6e90:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6e92:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6e94:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    6e96:	2001      	movs	r0, #1
    6e98:	f7ff fd40 	bl	691c <update_cache>
    6e9c:	4630      	mov	r0, r6
    6e9e:	f7fb fd85 	bl	29ac <arch_swap>
}
    6ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    6ea4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6ea6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6ea8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6eaa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6eac:	6065      	str	r5, [r4, #4]
}
    6eae:	e7f2      	b.n	6e96 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6eb0:	2400      	movs	r4, #0
    6eb2:	e7d9      	b.n	6e68 <z_impl_k_yield+0x38>
    6eb4:	200013b8 	.word	0x200013b8

00006eb8 <z_tick_sleep>:
{
    6eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    6ebc:	ea50 0301 	orrs.w	r3, r0, r1
    6ec0:	d038      	beq.n	6f34 <z_tick_sleep+0x7c>
    6ec2:	4604      	mov	r4, r0
    6ec4:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    6ec6:	f06f 0301 	mvn.w	r3, #1
    6eca:	1a1b      	subs	r3, r3, r0
    6ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6ed0:	eb62 0201 	sbc.w	r2, r2, r1
    6ed4:	2b01      	cmp	r3, #1
    6ed6:	f172 0300 	sbcs.w	r3, r2, #0
    6eda:	db2f      	blt.n	6f3c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6edc:	f06f 0501 	mvn.w	r5, #1
    6ee0:	1a2d      	subs	r5, r5, r0
    6ee2:	f04f 0320 	mov.w	r3, #32
    6ee6:	f3ef 8811 	mrs	r8, BASEPRI
    6eea:	f383 8812 	msr	BASEPRI_MAX, r3
    6eee:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    6ef2:	4f14      	ldr	r7, [pc, #80]	; (6f44 <z_tick_sleep+0x8c>)
    6ef4:	68b8      	ldr	r0, [r7, #8]
    6ef6:	4b14      	ldr	r3, [pc, #80]	; (6f48 <z_tick_sleep+0x90>)
    6ef8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6efa:	f7ff fe45 	bl	6b88 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6efe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6f00:	4622      	mov	r2, r4
    6f02:	4633      	mov	r3, r6
    6f04:	4911      	ldr	r1, [pc, #68]	; (6f4c <z_tick_sleep+0x94>)
    6f06:	3018      	adds	r0, #24
    6f08:	f000 f8de 	bl	70c8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6f0c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6f0e:	7b53      	ldrb	r3, [r2, #13]
    6f10:	f043 0310 	orr.w	r3, r3, #16
    6f14:	7353      	strb	r3, [r2, #13]
    6f16:	4640      	mov	r0, r8
    6f18:	f7fb fd48 	bl	29ac <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6f1c:	f002 fbfe 	bl	971c <sys_clock_tick_get_32>
    6f20:	1a28      	subs	r0, r5, r0
    6f22:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    6f26:	2801      	cmp	r0, #1
    6f28:	f173 0300 	sbcs.w	r3, r3, #0
    6f2c:	da00      	bge.n	6f30 <z_tick_sleep+0x78>
	return 0;
    6f2e:	2000      	movs	r0, #0
}
    6f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    6f34:	f7ff ff7c 	bl	6e30 <z_impl_k_yield>
		return 0;
    6f38:	2000      	movs	r0, #0
    6f3a:	e7f9      	b.n	6f30 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6f3c:	f002 fbee 	bl	971c <sys_clock_tick_get_32>
    6f40:	1905      	adds	r5, r0, r4
    6f42:	e7ce      	b.n	6ee2 <z_tick_sleep+0x2a>
    6f44:	200013b8 	.word	0x200013b8
    6f48:	200013ec 	.word	0x200013ec
    6f4c:	0000947b 	.word	0x0000947b

00006f50 <z_impl_k_sleep>:
{
    6f50:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6f52:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    6f56:	bf08      	it	eq
    6f58:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    6f5c:	d01a      	beq.n	6f94 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    6f5e:	f7ff ffab 	bl	6eb8 <z_tick_sleep>
    6f62:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    6f64:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    6f66:	0151      	lsls	r1, r2, #5
    6f68:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    6f6c:	0143      	lsls	r3, r0, #5
    6f6e:	1a1b      	subs	r3, r3, r0
    6f70:	eb61 0102 	sbc.w	r1, r1, r2
    6f74:	0088      	lsls	r0, r1, #2
    6f76:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    6f7a:	009b      	lsls	r3, r3, #2
    6f7c:	eb13 030c 	adds.w	r3, r3, ip
    6f80:	eb42 0000 	adc.w	r0, r2, r0
    6f84:	00c0      	lsls	r0, r0, #3
    6f86:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    6f8a:	f3c3 3310 	ubfx	r3, r3, #12, #17
    6f8e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    6f92:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    6f94:	4b03      	ldr	r3, [pc, #12]	; (6fa4 <z_impl_k_sleep+0x54>)
    6f96:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6f98:	f7ff fe86 	bl	6ca8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    6f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6fa0:	e7f7      	b.n	6f92 <z_impl_k_sleep+0x42>
    6fa2:	bf00      	nop
    6fa4:	200013b8 	.word	0x200013b8

00006fa8 <z_impl_z_current_get>:
}
    6fa8:	4b01      	ldr	r3, [pc, #4]	; (6fb0 <z_impl_z_current_get+0x8>)
    6faa:	6898      	ldr	r0, [r3, #8]
    6fac:	4770      	bx	lr
    6fae:	bf00      	nop
    6fb0:	200013b8 	.word	0x200013b8

00006fb4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    6fb4:	b538      	push	{r3, r4, r5, lr}
    6fb6:	f04f 0320 	mov.w	r3, #32
    6fba:	f3ef 8511 	mrs	r5, BASEPRI
    6fbe:	f383 8812 	msr	BASEPRI_MAX, r3
    6fc2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6fc6:	7b43      	ldrb	r3, [r0, #13]
    6fc8:	f013 0f08 	tst.w	r3, #8
    6fcc:	d004      	beq.n	6fd8 <z_thread_abort+0x24>
	__asm__ volatile(
    6fce:	f385 8811 	msr	BASEPRI, r5
    6fd2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6fd6:	bd38      	pop	{r3, r4, r5, pc}
    6fd8:	4604      	mov	r4, r0
	end_thread(thread);
    6fda:	f7ff fecf 	bl	6d7c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    6fde:	4b08      	ldr	r3, [pc, #32]	; (7000 <z_thread_abort+0x4c>)
    6fe0:	689b      	ldr	r3, [r3, #8]
    6fe2:	42a3      	cmp	r3, r4
    6fe4:	d004      	beq.n	6ff0 <z_thread_abort+0x3c>
    6fe6:	f385 8811 	msr	BASEPRI, r5
    6fea:	f3bf 8f6f 	isb	sy
    6fee:	e7f2      	b.n	6fd6 <z_thread_abort+0x22>
    6ff0:	f3ef 8305 	mrs	r3, IPSR
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d1f6      	bne.n	6fe6 <z_thread_abort+0x32>
    6ff8:	4628      	mov	r0, r5
    6ffa:	f7fb fcd7 	bl	29ac <arch_swap>
	return ret;
    6ffe:	e7f2      	b.n	6fe6 <z_thread_abort+0x32>
    7000:	200013b8 	.word	0x200013b8

00007004 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7004:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    7006:	4806      	ldr	r0, [pc, #24]	; (7020 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7008:	4a06      	ldr	r2, [pc, #24]	; (7024 <z_data_copy+0x20>)
    700a:	1a12      	subs	r2, r2, r0
    700c:	4906      	ldr	r1, [pc, #24]	; (7028 <z_data_copy+0x24>)
    700e:	f002 f8f3 	bl	91f8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7012:	4a06      	ldr	r2, [pc, #24]	; (702c <z_data_copy+0x28>)
    7014:	4906      	ldr	r1, [pc, #24]	; (7030 <z_data_copy+0x2c>)
    7016:	4807      	ldr	r0, [pc, #28]	; (7034 <z_data_copy+0x30>)
    7018:	f002 f8ee 	bl	91f8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    701c:	bd08      	pop	{r3, pc}
    701e:	bf00      	nop
    7020:	20000000 	.word	0x20000000
    7024:	200001cc 	.word	0x200001cc
    7028:	0000a540 	.word	0x0000a540
    702c:	00000000 	.word	0x00000000
    7030:	0000a540 	.word	0x0000a540
    7034:	20000000 	.word	0x20000000

00007038 <first>:
	return list->head == list;
    7038:	4b03      	ldr	r3, [pc, #12]	; (7048 <first+0x10>)
    703a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    703c:	4298      	cmp	r0, r3
    703e:	d000      	beq.n	7042 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    7040:	4770      	bx	lr
    7042:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    7044:	e7fc      	b.n	7040 <first+0x8>
    7046:	bf00      	nop
    7048:	200000dc 	.word	0x200000dc

0000704c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    704c:	b130      	cbz	r0, 705c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    704e:	4a04      	ldr	r2, [pc, #16]	; (7060 <next+0x14>)
    7050:	6852      	ldr	r2, [r2, #4]
    7052:	4290      	cmp	r0, r2
    7054:	d001      	beq.n	705a <next+0xe>
    7056:	6800      	ldr	r0, [r0, #0]
    7058:	4770      	bx	lr
    705a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    705c:	4770      	bx	lr
    705e:	bf00      	nop
    7060:	200000dc 	.word	0x200000dc

00007064 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    7064:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7066:	4b04      	ldr	r3, [pc, #16]	; (7078 <elapsed+0x14>)
    7068:	681b      	ldr	r3, [r3, #0]
    706a:	b10b      	cbz	r3, 7070 <elapsed+0xc>
    706c:	2000      	movs	r0, #0
}
    706e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7070:	f7fd fd0c 	bl	4a8c <sys_clock_elapsed>
    7074:	e7fb      	b.n	706e <elapsed+0xa>
    7076:	bf00      	nop
    7078:	200013fc 	.word	0x200013fc

0000707c <next_timeout>:

static int32_t next_timeout(void)
{
    707c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    707e:	f7ff ffdb 	bl	7038 <first>
    7082:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    7084:	f7ff ffee 	bl	7064 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    7088:	b17c      	cbz	r4, 70aa <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    708a:	6923      	ldr	r3, [r4, #16]
    708c:	6962      	ldr	r2, [r4, #20]
    708e:	1a1b      	subs	r3, r3, r0
    7090:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    7094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7098:	f170 0200 	sbcs.w	r2, r0, #0
    709c:	da08      	bge.n	70b0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    709e:	2800      	cmp	r0, #0
    70a0:	db01      	blt.n	70a6 <next_timeout+0x2a>
    70a2:	4618      	mov	r0, r3
    70a4:	e006      	b.n	70b4 <next_timeout+0x38>
    70a6:	2300      	movs	r3, #0
    70a8:	e7fb      	b.n	70a2 <next_timeout+0x26>
		ret = MAX_WAIT;
    70aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    70ae:	e001      	b.n	70b4 <next_timeout+0x38>
    70b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    70b4:	4b03      	ldr	r3, [pc, #12]	; (70c4 <next_timeout+0x48>)
    70b6:	691b      	ldr	r3, [r3, #16]
    70b8:	b113      	cbz	r3, 70c0 <next_timeout+0x44>
    70ba:	4283      	cmp	r3, r0
    70bc:	da00      	bge.n	70c0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    70be:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    70c0:	bd10      	pop	{r4, pc}
    70c2:	bf00      	nop
    70c4:	200013b8 	.word	0x200013b8

000070c8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    70c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    70cc:	bf08      	it	eq
    70ce:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    70d2:	d07d      	beq.n	71d0 <z_add_timeout+0x108>
{
    70d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70d8:	4604      	mov	r4, r0
    70da:	4692      	mov	sl, r2
    70dc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    70de:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    70e0:	2300      	movs	r3, #0
	__asm__ volatile(
    70e2:	f04f 0220 	mov.w	r2, #32
    70e6:	f3ef 8711 	mrs	r7, BASEPRI
    70ea:	f382 8812 	msr	BASEPRI_MAX, r2
    70ee:	f3bf 8f6f 	isb	sy
    70f2:	e021      	b.n	7138 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    70f4:	f11a 0801 	adds.w	r8, sl, #1
    70f8:	f145 0900 	adc.w	r9, r5, #0
    70fc:	f7ff ffb2 	bl	7064 <elapsed>
    7100:	eb18 0300 	adds.w	r3, r8, r0
    7104:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    7108:	6123      	str	r3, [r4, #16]
    710a:	6160      	str	r0, [r4, #20]
    710c:	e036      	b.n	717c <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    710e:	1a51      	subs	r1, r2, r1
    7110:	eb66 0303 	sbc.w	r3, r6, r3
    7114:	6101      	str	r1, [r0, #16]
    7116:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    7118:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    711a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    711c:	6020      	str	r0, [r4, #0]
	prev->next = node;
    711e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7120:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    7122:	2800      	cmp	r0, #0
    7124:	d03e      	beq.n	71a4 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7126:	f7ff ff87 	bl	7038 <first>
    712a:	4284      	cmp	r4, r0
    712c:	d041      	beq.n	71b2 <z_add_timeout+0xea>
	__asm__ volatile(
    712e:	f387 8811 	msr	BASEPRI, r7
    7132:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7136:	2301      	movs	r3, #1
    7138:	2b00      	cmp	r3, #0
    713a:	d147      	bne.n	71cc <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    713c:	4653      	mov	r3, sl
    713e:	f06f 0101 	mvn.w	r1, #1
    7142:	ebb1 010a 	subs.w	r1, r1, sl
    7146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    714a:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    714e:	2a00      	cmp	r2, #0
    7150:	dbd0      	blt.n	70f4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7152:	4a20      	ldr	r2, [pc, #128]	; (71d4 <z_add_timeout+0x10c>)
    7154:	6811      	ldr	r1, [r2, #0]
    7156:	6852      	ldr	r2, [r2, #4]
    7158:	185b      	adds	r3, r3, r1
    715a:	eb42 0205 	adc.w	r2, r2, r5
    715e:	f06f 0101 	mvn.w	r1, #1
    7162:	1acb      	subs	r3, r1, r3
    7164:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    7168:	4618      	mov	r0, r3
    716a:	4611      	mov	r1, r2
    716c:	2b01      	cmp	r3, #1
    716e:	f172 0300 	sbcs.w	r3, r2, #0
    7172:	da01      	bge.n	7178 <z_add_timeout+0xb0>
    7174:	2001      	movs	r0, #1
    7176:	2100      	movs	r1, #0
    7178:	6120      	str	r0, [r4, #16]
    717a:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    717c:	f7ff ff5c 	bl	7038 <first>
    7180:	2800      	cmp	r0, #0
    7182:	d0ce      	beq.n	7122 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
    7184:	6902      	ldr	r2, [r0, #16]
    7186:	6946      	ldr	r6, [r0, #20]
    7188:	6921      	ldr	r1, [r4, #16]
    718a:	6963      	ldr	r3, [r4, #20]
    718c:	4291      	cmp	r1, r2
    718e:	eb73 0c06 	sbcs.w	ip, r3, r6
    7192:	dbbc      	blt.n	710e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    7194:	1a89      	subs	r1, r1, r2
    7196:	eb63 0306 	sbc.w	r3, r3, r6
    719a:	6121      	str	r1, [r4, #16]
    719c:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    719e:	f7ff ff55 	bl	704c <next>
    71a2:	e7ed      	b.n	7180 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
    71a4:	4b0c      	ldr	r3, [pc, #48]	; (71d8 <z_add_timeout+0x110>)
    71a6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    71a8:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    71aa:	6062      	str	r2, [r4, #4]
	tail->next = node;
    71ac:	6014      	str	r4, [r2, #0]
	list->tail = node;
    71ae:	605c      	str	r4, [r3, #4]
}
    71b0:	e7b9      	b.n	7126 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    71b2:	f7ff ff63 	bl	707c <next_timeout>

			if (next_time == 0 ||
    71b6:	4603      	mov	r3, r0
    71b8:	b118      	cbz	r0, 71c2 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
    71ba:	4a08      	ldr	r2, [pc, #32]	; (71dc <z_add_timeout+0x114>)
    71bc:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    71be:	4282      	cmp	r2, r0
    71c0:	d0b5      	beq.n	712e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
    71c2:	2100      	movs	r1, #0
    71c4:	4618      	mov	r0, r3
    71c6:	f7fd fc2f 	bl	4a28 <sys_clock_set_timeout>
    71ca:	e7b0      	b.n	712e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    71cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71d0:	4770      	bx	lr
    71d2:	bf00      	nop
    71d4:	20000838 	.word	0x20000838
    71d8:	200000dc 	.word	0x200000dc
    71dc:	200013b8 	.word	0x200013b8

000071e0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    71e0:	b570      	push	{r4, r5, r6, lr}
    71e2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    71e4:	f7ff fc1a 	bl	6a1c <z_time_slice>
	__asm__ volatile(
    71e8:	f04f 0320 	mov.w	r3, #32
    71ec:	f3ef 8511 	mrs	r5, BASEPRI
    71f0:	f383 8812 	msr	BASEPRI_MAX, r3
    71f4:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    71f8:	4b28      	ldr	r3, [pc, #160]	; (729c <sys_clock_announce+0xbc>)
    71fa:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    71fc:	e020      	b.n	7240 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    71fe:	4828      	ldr	r0, [pc, #160]	; (72a0 <sys_clock_announce+0xc0>)
    7200:	6801      	ldr	r1, [r0, #0]
    7202:	6846      	ldr	r6, [r0, #4]
    7204:	1889      	adds	r1, r1, r2
    7206:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    720a:	6001      	str	r1, [r0, #0]
    720c:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    720e:	1a9b      	subs	r3, r3, r2
    7210:	4a22      	ldr	r2, [pc, #136]	; (729c <sys_clock_announce+0xbc>)
    7212:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    7214:	2200      	movs	r2, #0
    7216:	2300      	movs	r3, #0
    7218:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    721c:	4620      	mov	r0, r4
    721e:	f002 fa06 	bl	962e <remove_timeout>
	__asm__ volatile(
    7222:	f385 8811 	msr	BASEPRI, r5
    7226:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    722a:	68a3      	ldr	r3, [r4, #8]
    722c:	4620      	mov	r0, r4
    722e:	4798      	blx	r3
	__asm__ volatile(
    7230:	f04f 0320 	mov.w	r3, #32
    7234:	f3ef 8511 	mrs	r5, BASEPRI
    7238:	f383 8812 	msr	BASEPRI_MAX, r3
    723c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7240:	f7ff fefa 	bl	7038 <first>
    7244:	4604      	mov	r4, r0
    7246:	b140      	cbz	r0, 725a <sys_clock_announce+0x7a>
    7248:	6902      	ldr	r2, [r0, #16]
    724a:	6941      	ldr	r1, [r0, #20]
    724c:	4b13      	ldr	r3, [pc, #76]	; (729c <sys_clock_announce+0xbc>)
    724e:	681b      	ldr	r3, [r3, #0]
    7250:	17d8      	asrs	r0, r3, #31
    7252:	4293      	cmp	r3, r2
    7254:	eb70 0101 	sbcs.w	r1, r0, r1
    7258:	dad1      	bge.n	71fe <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    725a:	b144      	cbz	r4, 726e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    725c:	4b0f      	ldr	r3, [pc, #60]	; (729c <sys_clock_announce+0xbc>)
    725e:	6819      	ldr	r1, [r3, #0]
    7260:	6923      	ldr	r3, [r4, #16]
    7262:	6962      	ldr	r2, [r4, #20]
    7264:	1a5b      	subs	r3, r3, r1
    7266:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    726a:	6123      	str	r3, [r4, #16]
    726c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    726e:	4a0c      	ldr	r2, [pc, #48]	; (72a0 <sys_clock_announce+0xc0>)
    7270:	4e0a      	ldr	r6, [pc, #40]	; (729c <sys_clock_announce+0xbc>)
    7272:	6830      	ldr	r0, [r6, #0]
    7274:	6813      	ldr	r3, [r2, #0]
    7276:	6851      	ldr	r1, [r2, #4]
    7278:	181b      	adds	r3, r3, r0
    727a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    727e:	6013      	str	r3, [r2, #0]
    7280:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    7282:	2400      	movs	r4, #0
    7284:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7286:	f7ff fef9 	bl	707c <next_timeout>
    728a:	4621      	mov	r1, r4
    728c:	f7fd fbcc 	bl	4a28 <sys_clock_set_timeout>
	__asm__ volatile(
    7290:	f385 8811 	msr	BASEPRI, r5
    7294:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7298:	bd70      	pop	{r4, r5, r6, pc}
    729a:	bf00      	nop
    729c:	200013fc 	.word	0x200013fc
    72a0:	20000838 	.word	0x20000838

000072a4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    72a4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    72a6:	2300      	movs	r3, #0
	__asm__ volatile(
    72a8:	f04f 0220 	mov.w	r2, #32
    72ac:	f3ef 8411 	mrs	r4, BASEPRI
    72b0:	f382 8812 	msr	BASEPRI_MAX, r2
    72b4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    72b8:	4618      	mov	r0, r3
    72ba:	4619      	mov	r1, r3
    72bc:	e00c      	b.n	72d8 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
    72be:	f7fd fbe5 	bl	4a8c <sys_clock_elapsed>
    72c2:	4a07      	ldr	r2, [pc, #28]	; (72e0 <sys_clock_tick_get+0x3c>)
    72c4:	6813      	ldr	r3, [r2, #0]
    72c6:	6851      	ldr	r1, [r2, #4]
    72c8:	18c0      	adds	r0, r0, r3
    72ca:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    72ce:	f384 8811 	msr	BASEPRI, r4
    72d2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    72d6:	2301      	movs	r3, #1
    72d8:	2b00      	cmp	r3, #0
    72da:	d0f0      	beq.n	72be <sys_clock_tick_get+0x1a>
	}
	return t;
}
    72dc:	bd10      	pop	{r4, pc}
    72de:	bf00      	nop
    72e0:	20000838 	.word	0x20000838

000072e4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    72e4:	b570      	push	{r4, r5, r6, lr}
    72e6:	4604      	mov	r4, r0
	__asm__ volatile(
    72e8:	f04f 0320 	mov.w	r3, #32
    72ec:	f3ef 8611 	mrs	r6, BASEPRI
    72f0:	f383 8812 	msr	BASEPRI_MAX, r3
    72f4:	f3bf 8f6f 	isb	sy
    72f8:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    72fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
    72fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    72fe:	ea52 0103 	orrs.w	r1, r2, r3
    7302:	d005      	beq.n	7310 <z_timer_expiration_handler+0x2c>
    7304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7308:	bf08      	it	eq
    730a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    730e:	d127      	bne.n	7360 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    7310:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7312:	3301      	adds	r3, #1
    7314:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    7316:	6a23      	ldr	r3, [r4, #32]
    7318:	b173      	cbz	r3, 7338 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    731a:	f386 8811 	msr	BASEPRI, r6
    731e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    7322:	6a23      	ldr	r3, [r4, #32]
    7324:	4620      	mov	r0, r4
    7326:	4798      	blx	r3
	__asm__ volatile(
    7328:	f04f 0320 	mov.w	r3, #32
    732c:	f3ef 8511 	mrs	r5, BASEPRI
    7330:	f383 8812 	msr	BASEPRI_MAX, r3
    7334:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    7338:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    733c:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    733e:	42a3      	cmp	r3, r4
    7340:	d014      	beq.n	736c <z_timer_expiration_handler+0x88>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    7342:	b19c      	cbz	r4, 736c <z_timer_expiration_handler+0x88>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    7344:	4620      	mov	r0, r4
    7346:	f002 f838 	bl	93ba <z_unpend_thread_no_timeout>
    734a:	2300      	movs	r3, #0
    734c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    7350:	f385 8811 	msr	BASEPRI, r5
    7354:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    7358:	4620      	mov	r0, r4
    735a:	f002 f872 	bl	9442 <z_ready_thread>
}
    735e:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7360:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    7364:	4904      	ldr	r1, [pc, #16]	; (7378 <z_timer_expiration_handler+0x94>)
    7366:	f7ff feaf 	bl	70c8 <z_add_timeout>
    736a:	e7d1      	b.n	7310 <z_timer_expiration_handler+0x2c>
    736c:	f385 8811 	msr	BASEPRI, r5
    7370:	f3bf 8f6f 	isb	sy
		return;
    7374:	e7f3      	b.n	735e <z_timer_expiration_handler+0x7a>
    7376:	bf00      	nop
    7378:	000072e5 	.word	0x000072e5

0000737c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7380:	9f06      	ldr	r7, [sp, #24]
    7382:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    738a:	bf08      	it	eq
    738c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    7390:	d02f      	beq.n	73f2 <z_impl_k_timer_start+0x76>
    7392:	4605      	mov	r5, r0
    7394:	4614      	mov	r4, r2
    7396:	461e      	mov	r6, r3
    7398:	4611      	mov	r1, r2
    739a:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    739c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    73a0:	bf08      	it	eq
    73a2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    73a6:	d00d      	beq.n	73c4 <z_impl_k_timer_start+0x48>
    73a8:	ea57 0c08 	orrs.w	ip, r7, r8
    73ac:	d00a      	beq.n	73c4 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    73ae:	f06f 0c01 	mvn.w	ip, #1
    73b2:	ebbc 0c07 	subs.w	ip, ip, r7
    73b6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    73ba:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    73be:	f1bc 0f00 	cmp.w	ip, #0
    73c2:	db18      	blt.n	73f6 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    73c4:	f06f 0301 	mvn.w	r3, #1
    73c8:	1a5b      	subs	r3, r3, r1
    73ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    73ce:	eb63 0300 	sbc.w	r3, r3, r0
    73d2:	2b00      	cmp	r3, #0
    73d4:	db1a      	blt.n	740c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    73d6:	4628      	mov	r0, r5
    73d8:	f002 f940 	bl	965c <z_abort_timeout>
	timer->period = period;
    73dc:	62af      	str	r7, [r5, #40]	; 0x28
    73de:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    73e2:	2300      	movs	r3, #0
    73e4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    73e6:	4622      	mov	r2, r4
    73e8:	4633      	mov	r3, r6
    73ea:	490e      	ldr	r1, [pc, #56]	; (7424 <z_impl_k_timer_start+0xa8>)
    73ec:	4628      	mov	r0, r5
    73ee:	f7ff fe6b 	bl	70c8 <z_add_timeout>
		     duration);
}
    73f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    73f6:	2f02      	cmp	r7, #2
    73f8:	f178 0300 	sbcs.w	r3, r8, #0
    73fc:	da02      	bge.n	7404 <z_impl_k_timer_start+0x88>
    73fe:	2702      	movs	r7, #2
    7400:	f04f 0800 	mov.w	r8, #0
    7404:	3f01      	subs	r7, #1
    7406:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    740a:	e7db      	b.n	73c4 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    740c:	460c      	mov	r4, r1
    740e:	4606      	mov	r6, r0
    7410:	2901      	cmp	r1, #1
    7412:	f170 0300 	sbcs.w	r3, r0, #0
    7416:	da01      	bge.n	741c <z_impl_k_timer_start+0xa0>
    7418:	2401      	movs	r4, #1
    741a:	2600      	movs	r6, #0
    741c:	3c01      	subs	r4, #1
    741e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    7422:	e7d8      	b.n	73d6 <z_impl_k_timer_start+0x5a>
    7424:	000072e5 	.word	0x000072e5

00007428 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    7428:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    742a:	4a03      	ldr	r2, [pc, #12]	; (7438 <boot_banner+0x10>)
    742c:	4903      	ldr	r1, [pc, #12]	; (743c <boot_banner+0x14>)
    742e:	4804      	ldr	r0, [pc, #16]	; (7440 <boot_banner+0x18>)
    7430:	f000 fa96 	bl	7960 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    7434:	bd08      	pop	{r3, pc}
    7436:	bf00      	nop
    7438:	00009b2c 	.word	0x00009b2c
    743c:	0000a480 	.word	0x0000a480
    7440:	0000a490 	.word	0x0000a490

00007444 <nrf_cc3xx_platform_init_no_rng>:
    7444:	b510      	push	{r4, lr}
    7446:	4c0a      	ldr	r4, [pc, #40]	; (7470 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    7448:	6823      	ldr	r3, [r4, #0]
    744a:	b11b      	cbz	r3, 7454 <nrf_cc3xx_platform_init_no_rng+0x10>
    744c:	2301      	movs	r3, #1
    744e:	6023      	str	r3, [r4, #0]
    7450:	2000      	movs	r0, #0
    7452:	bd10      	pop	{r4, pc}
    7454:	f000 f8ce 	bl	75f4 <CC_LibInitNoRng>
    7458:	2800      	cmp	r0, #0
    745a:	d0f7      	beq.n	744c <nrf_cc3xx_platform_init_no_rng+0x8>
    745c:	3801      	subs	r0, #1
    745e:	2806      	cmp	r0, #6
    7460:	d803      	bhi.n	746a <nrf_cc3xx_platform_init_no_rng+0x26>
    7462:	4b04      	ldr	r3, [pc, #16]	; (7474 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7464:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7468:	bd10      	pop	{r4, pc}
    746a:	4803      	ldr	r0, [pc, #12]	; (7478 <nrf_cc3xx_platform_init_no_rng+0x34>)
    746c:	bd10      	pop	{r4, pc}
    746e:	bf00      	nop
    7470:	20001400 	.word	0x20001400
    7474:	0000a4b8 	.word	0x0000a4b8
    7478:	ffff8ffe 	.word	0xffff8ffe

0000747c <nrf_cc3xx_platform_abort>:
    747c:	f3bf 8f4f 	dsb	sy
    7480:	4905      	ldr	r1, [pc, #20]	; (7498 <nrf_cc3xx_platform_abort+0x1c>)
    7482:	4b06      	ldr	r3, [pc, #24]	; (749c <nrf_cc3xx_platform_abort+0x20>)
    7484:	68ca      	ldr	r2, [r1, #12]
    7486:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    748a:	4313      	orrs	r3, r2
    748c:	60cb      	str	r3, [r1, #12]
    748e:	f3bf 8f4f 	dsb	sy
    7492:	bf00      	nop
    7494:	e7fd      	b.n	7492 <nrf_cc3xx_platform_abort+0x16>
    7496:	bf00      	nop
    7498:	e000ed00 	.word	0xe000ed00
    749c:	05fa0004 	.word	0x05fa0004

000074a0 <CC_PalAbort>:
    74a0:	b410      	push	{r4}
    74a2:	4b09      	ldr	r3, [pc, #36]	; (74c8 <CC_PalAbort+0x28>)
    74a4:	4909      	ldr	r1, [pc, #36]	; (74cc <CC_PalAbort+0x2c>)
    74a6:	4c0a      	ldr	r4, [pc, #40]	; (74d0 <CC_PalAbort+0x30>)
    74a8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    74ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    74b0:	6849      	ldr	r1, [r1, #4]
    74b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    74b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    74ba:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    74be:	2300      	movs	r3, #0
    74c0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    74c4:	bc10      	pop	{r4}
    74c6:	4708      	bx	r1
    74c8:	5002b000 	.word	0x5002b000
    74cc:	200000e4 	.word	0x200000e4
    74d0:	5002a000 	.word	0x5002a000

000074d4 <nrf_cc3xx_platform_set_abort>:
    74d4:	e9d0 1200 	ldrd	r1, r2, [r0]
    74d8:	4b01      	ldr	r3, [pc, #4]	; (74e0 <nrf_cc3xx_platform_set_abort+0xc>)
    74da:	e9c3 1200 	strd	r1, r2, [r3]
    74de:	4770      	bx	lr
    74e0:	200000e4 	.word	0x200000e4

000074e4 <mutex_free>:
    74e4:	b510      	push	{r4, lr}
    74e6:	4604      	mov	r4, r0
    74e8:	b130      	cbz	r0, 74f8 <mutex_free+0x14>
    74ea:	6863      	ldr	r3, [r4, #4]
    74ec:	06db      	lsls	r3, r3, #27
    74ee:	d502      	bpl.n	74f6 <mutex_free+0x12>
    74f0:	2300      	movs	r3, #0
    74f2:	6023      	str	r3, [r4, #0]
    74f4:	6063      	str	r3, [r4, #4]
    74f6:	bd10      	pop	{r4, pc}
    74f8:	4b02      	ldr	r3, [pc, #8]	; (7504 <mutex_free+0x20>)
    74fa:	4803      	ldr	r0, [pc, #12]	; (7508 <mutex_free+0x24>)
    74fc:	685b      	ldr	r3, [r3, #4]
    74fe:	4798      	blx	r3
    7500:	e7f3      	b.n	74ea <mutex_free+0x6>
    7502:	bf00      	nop
    7504:	200000e4 	.word	0x200000e4
    7508:	0000a4d4 	.word	0x0000a4d4

0000750c <mutex_lock>:
    750c:	b1b0      	cbz	r0, 753c <mutex_lock+0x30>
    750e:	6843      	ldr	r3, [r0, #4]
    7510:	b193      	cbz	r3, 7538 <mutex_lock+0x2c>
    7512:	06db      	lsls	r3, r3, #27
    7514:	d50e      	bpl.n	7534 <mutex_lock+0x28>
    7516:	2301      	movs	r3, #1
    7518:	e850 2f00 	ldrex	r2, [r0]
    751c:	4619      	mov	r1, r3
    751e:	e840 1c00 	strex	ip, r1, [r0]
    7522:	f09c 0f00 	teq	ip, #0
    7526:	d1f7      	bne.n	7518 <mutex_lock+0xc>
    7528:	2a01      	cmp	r2, #1
    752a:	d0f5      	beq.n	7518 <mutex_lock+0xc>
    752c:	f3bf 8f5f 	dmb	sy
    7530:	2000      	movs	r0, #0
    7532:	4770      	bx	lr
    7534:	4803      	ldr	r0, [pc, #12]	; (7544 <mutex_lock+0x38>)
    7536:	4770      	bx	lr
    7538:	4803      	ldr	r0, [pc, #12]	; (7548 <mutex_lock+0x3c>)
    753a:	4770      	bx	lr
    753c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7540:	4770      	bx	lr
    7542:	bf00      	nop
    7544:	ffff8fe9 	.word	0xffff8fe9
    7548:	ffff8fea 	.word	0xffff8fea

0000754c <mutex_unlock>:
    754c:	b168      	cbz	r0, 756a <mutex_unlock+0x1e>
    754e:	6843      	ldr	r3, [r0, #4]
    7550:	b13b      	cbz	r3, 7562 <mutex_unlock+0x16>
    7552:	06db      	lsls	r3, r3, #27
    7554:	d507      	bpl.n	7566 <mutex_unlock+0x1a>
    7556:	f3bf 8f5f 	dmb	sy
    755a:	2300      	movs	r3, #0
    755c:	6003      	str	r3, [r0, #0]
    755e:	4618      	mov	r0, r3
    7560:	4770      	bx	lr
    7562:	4803      	ldr	r0, [pc, #12]	; (7570 <mutex_unlock+0x24>)
    7564:	4770      	bx	lr
    7566:	4803      	ldr	r0, [pc, #12]	; (7574 <mutex_unlock+0x28>)
    7568:	4770      	bx	lr
    756a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    756e:	4770      	bx	lr
    7570:	ffff8fea 	.word	0xffff8fea
    7574:	ffff8fe9 	.word	0xffff8fe9

00007578 <mutex_init>:
    7578:	b510      	push	{r4, lr}
    757a:	4604      	mov	r4, r0
    757c:	b120      	cbz	r0, 7588 <mutex_init+0x10>
    757e:	2200      	movs	r2, #0
    7580:	2311      	movs	r3, #17
    7582:	6022      	str	r2, [r4, #0]
    7584:	6063      	str	r3, [r4, #4]
    7586:	bd10      	pop	{r4, pc}
    7588:	4801      	ldr	r0, [pc, #4]	; (7590 <mutex_init+0x18>)
    758a:	f7ff ff89 	bl	74a0 <CC_PalAbort>
    758e:	e7f6      	b.n	757e <mutex_init+0x6>
    7590:	0000a4fc 	.word	0x0000a4fc

00007594 <nrf_cc3xx_platform_set_mutexes>:
    7594:	b570      	push	{r4, r5, r6, lr}
    7596:	e9d0 2300 	ldrd	r2, r3, [r0]
    759a:	4c13      	ldr	r4, [pc, #76]	; (75e8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    759c:	4d13      	ldr	r5, [pc, #76]	; (75ec <nrf_cc3xx_platform_set_mutexes+0x58>)
    759e:	6063      	str	r3, [r4, #4]
    75a0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    75a4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    75a8:	6022      	str	r2, [r4, #0]
    75aa:	4b11      	ldr	r3, [pc, #68]	; (75f0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    75ac:	6808      	ldr	r0, [r1, #0]
    75ae:	6018      	str	r0, [r3, #0]
    75b0:	6848      	ldr	r0, [r1, #4]
    75b2:	6058      	str	r0, [r3, #4]
    75b4:	6888      	ldr	r0, [r1, #8]
    75b6:	6098      	str	r0, [r3, #8]
    75b8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    75bc:	60d8      	str	r0, [r3, #12]
    75be:	6119      	str	r1, [r3, #16]
    75c0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    75c4:	06db      	lsls	r3, r3, #27
    75c6:	d50d      	bpl.n	75e4 <nrf_cc3xx_platform_set_mutexes+0x50>
    75c8:	2300      	movs	r3, #0
    75ca:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    75ce:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    75d2:	f505 708a 	add.w	r0, r5, #276	; 0x114
    75d6:	4790      	blx	r2
    75d8:	6823      	ldr	r3, [r4, #0]
    75da:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    75de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    75e2:	4718      	bx	r3
    75e4:	bd70      	pop	{r4, r5, r6, pc}
    75e6:	bf00      	nop
    75e8:	200000f4 	.word	0x200000f4
    75ec:	20001418 	.word	0x20001418
    75f0:	20000104 	.word	0x20000104

000075f4 <CC_LibInitNoRng>:
    75f4:	b538      	push	{r3, r4, r5, lr}
    75f6:	f000 f82f 	bl	7658 <CC_HalInit>
    75fa:	b120      	cbz	r0, 7606 <CC_LibInitNoRng+0x12>
    75fc:	2403      	movs	r4, #3
    75fe:	f000 f863 	bl	76c8 <CC_PalTerminate>
    7602:	4620      	mov	r0, r4
    7604:	bd38      	pop	{r3, r4, r5, pc}
    7606:	f000 f831 	bl	766c <CC_PalInit>
    760a:	b998      	cbnz	r0, 7634 <CC_LibInitNoRng+0x40>
    760c:	f000 f8ac 	bl	7768 <CC_PalPowerSaveModeSelect>
    7610:	b998      	cbnz	r0, 763a <CC_LibInitNoRng+0x46>
    7612:	4d0f      	ldr	r5, [pc, #60]	; (7650 <CC_LibInitNoRng+0x5c>)
    7614:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    7618:	0e1b      	lsrs	r3, r3, #24
    761a:	2bf0      	cmp	r3, #240	; 0xf0
    761c:	d108      	bne.n	7630 <CC_LibInitNoRng+0x3c>
    761e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    7622:	4b0c      	ldr	r3, [pc, #48]	; (7654 <CC_LibInitNoRng+0x60>)
    7624:	429a      	cmp	r2, r3
    7626:	d00a      	beq.n	763e <CC_LibInitNoRng+0x4a>
    7628:	2407      	movs	r4, #7
    762a:	f000 f817 	bl	765c <CC_HalTerminate>
    762e:	e7e6      	b.n	75fe <CC_LibInitNoRng+0xa>
    7630:	2406      	movs	r4, #6
    7632:	e7fa      	b.n	762a <CC_LibInitNoRng+0x36>
    7634:	2404      	movs	r4, #4
    7636:	4620      	mov	r0, r4
    7638:	bd38      	pop	{r3, r4, r5, pc}
    763a:	2400      	movs	r4, #0
    763c:	e7f5      	b.n	762a <CC_LibInitNoRng+0x36>
    763e:	2001      	movs	r0, #1
    7640:	f000 f892 	bl	7768 <CC_PalPowerSaveModeSelect>
    7644:	4604      	mov	r4, r0
    7646:	2800      	cmp	r0, #0
    7648:	d1f7      	bne.n	763a <CC_LibInitNoRng+0x46>
    764a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    764e:	e7d8      	b.n	7602 <CC_LibInitNoRng+0xe>
    7650:	5002b000 	.word	0x5002b000
    7654:	20e00000 	.word	0x20e00000

00007658 <CC_HalInit>:
    7658:	2000      	movs	r0, #0
    765a:	4770      	bx	lr

0000765c <CC_HalTerminate>:
    765c:	2000      	movs	r0, #0
    765e:	4770      	bx	lr

00007660 <CC_HalMaskInterrupt>:
    7660:	4b01      	ldr	r3, [pc, #4]	; (7668 <CC_HalMaskInterrupt+0x8>)
    7662:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    7666:	4770      	bx	lr
    7668:	5002b000 	.word	0x5002b000

0000766c <CC_PalInit>:
    766c:	b510      	push	{r4, lr}
    766e:	4811      	ldr	r0, [pc, #68]	; (76b4 <CC_PalInit+0x48>)
    7670:	f000 f848 	bl	7704 <CC_PalMutexCreate>
    7674:	b100      	cbz	r0, 7678 <CC_PalInit+0xc>
    7676:	bd10      	pop	{r4, pc}
    7678:	480f      	ldr	r0, [pc, #60]	; (76b8 <CC_PalInit+0x4c>)
    767a:	f000 f843 	bl	7704 <CC_PalMutexCreate>
    767e:	2800      	cmp	r0, #0
    7680:	d1f9      	bne.n	7676 <CC_PalInit+0xa>
    7682:	4c0e      	ldr	r4, [pc, #56]	; (76bc <CC_PalInit+0x50>)
    7684:	4620      	mov	r0, r4
    7686:	f000 f83d 	bl	7704 <CC_PalMutexCreate>
    768a:	2800      	cmp	r0, #0
    768c:	d1f3      	bne.n	7676 <CC_PalInit+0xa>
    768e:	4b0c      	ldr	r3, [pc, #48]	; (76c0 <CC_PalInit+0x54>)
    7690:	480c      	ldr	r0, [pc, #48]	; (76c4 <CC_PalInit+0x58>)
    7692:	601c      	str	r4, [r3, #0]
    7694:	f000 f836 	bl	7704 <CC_PalMutexCreate>
    7698:	4601      	mov	r1, r0
    769a:	2800      	cmp	r0, #0
    769c:	d1eb      	bne.n	7676 <CC_PalInit+0xa>
    769e:	f000 f82d 	bl	76fc <CC_PalDmaInit>
    76a2:	4604      	mov	r4, r0
    76a4:	b108      	cbz	r0, 76aa <CC_PalInit+0x3e>
    76a6:	4620      	mov	r0, r4
    76a8:	bd10      	pop	{r4, pc}
    76aa:	f000 f83f 	bl	772c <CC_PalPowerSaveModeInit>
    76ae:	4620      	mov	r0, r4
    76b0:	e7fa      	b.n	76a8 <CC_PalInit+0x3c>
    76b2:	bf00      	nop
    76b4:	2000013c 	.word	0x2000013c
    76b8:	20000130 	.word	0x20000130
    76bc:	20000138 	.word	0x20000138
    76c0:	20000140 	.word	0x20000140
    76c4:	20000134 	.word	0x20000134

000076c8 <CC_PalTerminate>:
    76c8:	b508      	push	{r3, lr}
    76ca:	4808      	ldr	r0, [pc, #32]	; (76ec <CC_PalTerminate+0x24>)
    76cc:	f000 f824 	bl	7718 <CC_PalMutexDestroy>
    76d0:	4807      	ldr	r0, [pc, #28]	; (76f0 <CC_PalTerminate+0x28>)
    76d2:	f000 f821 	bl	7718 <CC_PalMutexDestroy>
    76d6:	4807      	ldr	r0, [pc, #28]	; (76f4 <CC_PalTerminate+0x2c>)
    76d8:	f000 f81e 	bl	7718 <CC_PalMutexDestroy>
    76dc:	4806      	ldr	r0, [pc, #24]	; (76f8 <CC_PalTerminate+0x30>)
    76de:	f000 f81b 	bl	7718 <CC_PalMutexDestroy>
    76e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    76e6:	f000 b80b 	b.w	7700 <CC_PalDmaTerminate>
    76ea:	bf00      	nop
    76ec:	2000013c 	.word	0x2000013c
    76f0:	20000130 	.word	0x20000130
    76f4:	20000138 	.word	0x20000138
    76f8:	20000134 	.word	0x20000134

000076fc <CC_PalDmaInit>:
    76fc:	2000      	movs	r0, #0
    76fe:	4770      	bx	lr

00007700 <CC_PalDmaTerminate>:
    7700:	4770      	bx	lr
    7702:	bf00      	nop

00007704 <CC_PalMutexCreate>:
    7704:	b508      	push	{r3, lr}
    7706:	4b03      	ldr	r3, [pc, #12]	; (7714 <CC_PalMutexCreate+0x10>)
    7708:	6802      	ldr	r2, [r0, #0]
    770a:	681b      	ldr	r3, [r3, #0]
    770c:	6810      	ldr	r0, [r2, #0]
    770e:	4798      	blx	r3
    7710:	2000      	movs	r0, #0
    7712:	bd08      	pop	{r3, pc}
    7714:	200000f4 	.word	0x200000f4

00007718 <CC_PalMutexDestroy>:
    7718:	b508      	push	{r3, lr}
    771a:	4b03      	ldr	r3, [pc, #12]	; (7728 <CC_PalMutexDestroy+0x10>)
    771c:	6802      	ldr	r2, [r0, #0]
    771e:	685b      	ldr	r3, [r3, #4]
    7720:	6810      	ldr	r0, [r2, #0]
    7722:	4798      	blx	r3
    7724:	2000      	movs	r0, #0
    7726:	bd08      	pop	{r3, pc}
    7728:	200000f4 	.word	0x200000f4

0000772c <CC_PalPowerSaveModeInit>:
    772c:	b570      	push	{r4, r5, r6, lr}
    772e:	4c09      	ldr	r4, [pc, #36]	; (7754 <CC_PalPowerSaveModeInit+0x28>)
    7730:	4d09      	ldr	r5, [pc, #36]	; (7758 <CC_PalPowerSaveModeInit+0x2c>)
    7732:	6920      	ldr	r0, [r4, #16]
    7734:	68ab      	ldr	r3, [r5, #8]
    7736:	4798      	blx	r3
    7738:	b118      	cbz	r0, 7742 <CC_PalPowerSaveModeInit+0x16>
    773a:	4b08      	ldr	r3, [pc, #32]	; (775c <CC_PalPowerSaveModeInit+0x30>)
    773c:	4808      	ldr	r0, [pc, #32]	; (7760 <CC_PalPowerSaveModeInit+0x34>)
    773e:	685b      	ldr	r3, [r3, #4]
    7740:	4798      	blx	r3
    7742:	4a08      	ldr	r2, [pc, #32]	; (7764 <CC_PalPowerSaveModeInit+0x38>)
    7744:	68eb      	ldr	r3, [r5, #12]
    7746:	6920      	ldr	r0, [r4, #16]
    7748:	2100      	movs	r1, #0
    774a:	6011      	str	r1, [r2, #0]
    774c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7750:	4718      	bx	r3
    7752:	bf00      	nop
    7754:	20000104 	.word	0x20000104
    7758:	200000f4 	.word	0x200000f4
    775c:	200000e4 	.word	0x200000e4
    7760:	0000a520 	.word	0x0000a520
    7764:	20001414 	.word	0x20001414

00007768 <CC_PalPowerSaveModeSelect>:
    7768:	b570      	push	{r4, r5, r6, lr}
    776a:	4d1b      	ldr	r5, [pc, #108]	; (77d8 <CC_PalPowerSaveModeSelect+0x70>)
    776c:	4e1b      	ldr	r6, [pc, #108]	; (77dc <CC_PalPowerSaveModeSelect+0x74>)
    776e:	4604      	mov	r4, r0
    7770:	68b2      	ldr	r2, [r6, #8]
    7772:	6928      	ldr	r0, [r5, #16]
    7774:	4790      	blx	r2
    7776:	b9f8      	cbnz	r0, 77b8 <CC_PalPowerSaveModeSelect+0x50>
    7778:	b15c      	cbz	r4, 7792 <CC_PalPowerSaveModeSelect+0x2a>
    777a:	4c19      	ldr	r4, [pc, #100]	; (77e0 <CC_PalPowerSaveModeSelect+0x78>)
    777c:	6823      	ldr	r3, [r4, #0]
    777e:	b1b3      	cbz	r3, 77ae <CC_PalPowerSaveModeSelect+0x46>
    7780:	2b01      	cmp	r3, #1
    7782:	d01b      	beq.n	77bc <CC_PalPowerSaveModeSelect+0x54>
    7784:	3b01      	subs	r3, #1
    7786:	6023      	str	r3, [r4, #0]
    7788:	6928      	ldr	r0, [r5, #16]
    778a:	68f3      	ldr	r3, [r6, #12]
    778c:	4798      	blx	r3
    778e:	2000      	movs	r0, #0
    7790:	bd70      	pop	{r4, r5, r6, pc}
    7792:	4c13      	ldr	r4, [pc, #76]	; (77e0 <CC_PalPowerSaveModeSelect+0x78>)
    7794:	6821      	ldr	r1, [r4, #0]
    7796:	b941      	cbnz	r1, 77aa <CC_PalPowerSaveModeSelect+0x42>
    7798:	4b12      	ldr	r3, [pc, #72]	; (77e4 <CC_PalPowerSaveModeSelect+0x7c>)
    779a:	2201      	movs	r2, #1
    779c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    77a0:	4a11      	ldr	r2, [pc, #68]	; (77e8 <CC_PalPowerSaveModeSelect+0x80>)
    77a2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    77a6:	2b00      	cmp	r3, #0
    77a8:	d1fb      	bne.n	77a2 <CC_PalPowerSaveModeSelect+0x3a>
    77aa:	3101      	adds	r1, #1
    77ac:	6021      	str	r1, [r4, #0]
    77ae:	68f3      	ldr	r3, [r6, #12]
    77b0:	6928      	ldr	r0, [r5, #16]
    77b2:	4798      	blx	r3
    77b4:	2000      	movs	r0, #0
    77b6:	bd70      	pop	{r4, r5, r6, pc}
    77b8:	480c      	ldr	r0, [pc, #48]	; (77ec <CC_PalPowerSaveModeSelect+0x84>)
    77ba:	bd70      	pop	{r4, r5, r6, pc}
    77bc:	4a0a      	ldr	r2, [pc, #40]	; (77e8 <CC_PalPowerSaveModeSelect+0x80>)
    77be:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    77c2:	2b00      	cmp	r3, #0
    77c4:	d1fb      	bne.n	77be <CC_PalPowerSaveModeSelect+0x56>
    77c6:	4a07      	ldr	r2, [pc, #28]	; (77e4 <CC_PalPowerSaveModeSelect+0x7c>)
    77c8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    77cc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    77d0:	f7ff ff46 	bl	7660 <CC_HalMaskInterrupt>
    77d4:	6823      	ldr	r3, [r4, #0]
    77d6:	e7d5      	b.n	7784 <CC_PalPowerSaveModeSelect+0x1c>
    77d8:	20000104 	.word	0x20000104
    77dc:	200000f4 	.word	0x200000f4
    77e0:	20001414 	.word	0x20001414
    77e4:	5002a000 	.word	0x5002a000
    77e8:	5002b000 	.word	0x5002b000
    77ec:	ffff8fe9 	.word	0xffff8fe9

000077f0 <squareIt>:
int squareIt(int i) {
    return i * i;
    77f0:	fb00 f000 	mul.w	r0, r0, r0
    77f4:	4770      	bx	lr

000077f6 <cbprintf_via_va_list>:
{
    77f6:	b510      	push	{r4, lr}
    77f8:	460c      	mov	r4, r1
    77fa:	4611      	mov	r1, r2
    77fc:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    77fe:	9b02      	ldr	r3, [sp, #8]
    7800:	47a0      	blx	r4
}
    7802:	bd10      	pop	{r4, pc}

00007804 <z_strncpy>:
	for (size_t i = 0; i < num; i++) {
    7804:	2300      	movs	r3, #0
    7806:	4293      	cmp	r3, r2
    7808:	d20d      	bcs.n	7826 <z_strncpy+0x22>
{
    780a:	b410      	push	{r4}
		dst[i] = src[i];
    780c:	5ccc      	ldrb	r4, [r1, r3]
    780e:	54c4      	strb	r4, [r0, r3]
		if (src[i] == '\0') {
    7810:	5ccc      	ldrb	r4, [r1, r3]
    7812:	b12c      	cbz	r4, 7820 <z_strncpy+0x1c>
	for (size_t i = 0; i < num; i++) {
    7814:	3301      	adds	r3, #1
    7816:	4293      	cmp	r3, r2
    7818:	d3f8      	bcc.n	780c <z_strncpy+0x8>
	return -ENOSPC;
    781a:	f06f 001b 	mvn.w	r0, #27
    781e:	e000      	b.n	7822 <z_strncpy+0x1e>
			return i + 1;
    7820:	1c58      	adds	r0, r3, #1
}
    7822:	bc10      	pop	{r4}
    7824:	4770      	bx	lr
	return -ENOSPC;
    7826:	f06f 001b 	mvn.w	r0, #27
}
    782a:	4770      	bx	lr

0000782c <get_package_len>:
{
    782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    782e:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
    7830:	7800      	ldrb	r0, [r0, #0]
	s_nbr     = buf[1];
    7832:	7875      	ldrb	r5, [r6, #1]
	ros_nbr   = buf[2];
    7834:	78b4      	ldrb	r4, [r6, #2]
	buf += ros_nbr;
    7836:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    783a:	4434      	add	r4, r6
	for (int i = 0; i < s_nbr; i++) {
    783c:	2700      	movs	r7, #0
    783e:	e006      	b.n	784e <get_package_len+0x22>
		buf++;
    7840:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
    7842:	4620      	mov	r0, r4
    7844:	f000 ff25 	bl	8692 <strlen>
    7848:	3001      	adds	r0, #1
    784a:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
    784c:	3701      	adds	r7, #1
    784e:	42af      	cmp	r7, r5
    7850:	d3f6      	bcc.n	7840 <get_package_len+0x14>
}
    7852:	1ba0      	subs	r0, r4, r6
    7854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007856 <append_string>:
{
    7856:	b510      	push	{r4, lr}
    7858:	468c      	mov	ip, r1
    785a:	4611      	mov	r1, r2
	if (dst == NULL) {
    785c:	b128      	cbz	r0, 786a <append_string+0x14>
    785e:	461c      	mov	r4, r3
	if (strl) {
    7860:	b944      	cbnz	r4, 7874 <append_string+0x1e>
	return z_strncpy(buf, str, max);
    7862:	4662      	mov	r2, ip
    7864:	f7ff ffce 	bl	7804 <z_strncpy>
}
    7868:	bd10      	pop	{r4, pc}
		return 1 + strlen(str);
    786a:	4610      	mov	r0, r2
    786c:	f000 ff11 	bl	8692 <strlen>
    7870:	3001      	adds	r0, #1
    7872:	e7f9      	b.n	7868 <append_string+0x12>
		memcpy(dst, str, strl);
    7874:	4622      	mov	r2, r4
    7876:	f000 ff1f 	bl	86b8 <memcpy>
		return strl;
    787a:	4620      	mov	r0, r4
    787c:	e7f4      	b.n	7868 <append_string+0x12>

0000787e <cbpprintf_external>:
	if (buf == NULL) {
    787e:	b353      	cbz	r3, 78d6 <cbpprintf_external+0x58>
{
    7880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7884:	b082      	sub	sp, #8
    7886:	4607      	mov	r7, r0
    7888:	4688      	mov	r8, r1
    788a:	4691      	mov	r9, r2
    788c:	461d      	mov	r5, r3
	args_size = buf[0] * sizeof(int);
    788e:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    7890:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    7892:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    7894:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    7896:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    789a:	441c      	add	r4, r3
    789c:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    789e:	f04f 0a00 	mov.w	sl, #0
    78a2:	e00a      	b.n	78ba <cbpprintf_external+0x3c>
		s_idx = *(uint8_t *)s++;
    78a4:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    78a8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    78ac:	4620      	mov	r0, r4
    78ae:	f000 fef0 	bl	8692 <strlen>
    78b2:	3001      	adds	r0, #1
    78b4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    78b6:	f10a 0a01 	add.w	sl, sl, #1
    78ba:	45b2      	cmp	sl, r6
    78bc:	d3f2      	bcc.n	78a4 <cbpprintf_external+0x26>
	buf += sizeof(char *) * 2;
    78be:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    78c2:	9300      	str	r3, [sp, #0]
    78c4:	686b      	ldr	r3, [r5, #4]
    78c6:	464a      	mov	r2, r9
    78c8:	4641      	mov	r1, r8
    78ca:	4638      	mov	r0, r7
    78cc:	f7ff ff93 	bl	77f6 <cbprintf_via_va_list>
}
    78d0:	b002      	add	sp, #8
    78d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    78d6:	f06f 0015 	mvn.w	r0, #21
}
    78da:	4770      	bx	lr

000078dc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    78dc:	4602      	mov	r2, r0
    78de:	b158      	cbz	r0, 78f8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    78e0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    78e2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    78e6:	2b01      	cmp	r3, #1
    78e8:	d003      	beq.n	78f2 <sys_notify_validate+0x16>
    78ea:	2b03      	cmp	r3, #3
    78ec:	d107      	bne.n	78fe <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    78ee:	6803      	ldr	r3, [r0, #0]
    78f0:	b143      	cbz	r3, 7904 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    78f2:	2000      	movs	r0, #0
    78f4:	6090      	str	r0, [r2, #8]
    78f6:	4770      	bx	lr
		return -EINVAL;
    78f8:	f06f 0015 	mvn.w	r0, #21
    78fc:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    78fe:	f06f 0015 	mvn.w	r0, #21
    7902:	4770      	bx	lr
			rv = -EINVAL;
    7904:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7908:	4770      	bx	lr

0000790a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    790a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    790c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    790e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7912:	6081      	str	r1, [r0, #8]
	switch (method) {
    7914:	2a03      	cmp	r2, #3
    7916:	d103      	bne.n	7920 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7918:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    791a:	2200      	movs	r2, #0
    791c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    791e:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    7920:	2000      	movs	r0, #0
    7922:	e7fa      	b.n	791a <sys_notify_finalize+0x10>

00007924 <arch_printk_char_out>:
}
    7924:	2000      	movs	r0, #0
    7926:	4770      	bx	lr

00007928 <str_out>:
{
    7928:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    792a:	680c      	ldr	r4, [r1, #0]
    792c:	b154      	cbz	r4, 7944 <str_out+0x1c>
    792e:	688a      	ldr	r2, [r1, #8]
    7930:	684b      	ldr	r3, [r1, #4]
    7932:	429a      	cmp	r2, r3
    7934:	da06      	bge.n	7944 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    7936:	3b01      	subs	r3, #1
    7938:	429a      	cmp	r2, r3
    793a:	d008      	beq.n	794e <str_out+0x26>
		ctx->str[ctx->count++] = c;
    793c:	1c53      	adds	r3, r2, #1
    793e:	608b      	str	r3, [r1, #8]
    7940:	54a0      	strb	r0, [r4, r2]
    7942:	e002      	b.n	794a <str_out+0x22>
		ctx->count++;
    7944:	688b      	ldr	r3, [r1, #8]
    7946:	3301      	adds	r3, #1
    7948:	608b      	str	r3, [r1, #8]
}
    794a:	bc10      	pop	{r4}
    794c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    794e:	1c53      	adds	r3, r2, #1
    7950:	608b      	str	r3, [r1, #8]
    7952:	2300      	movs	r3, #0
    7954:	54a3      	strb	r3, [r4, r2]
    7956:	e7f8      	b.n	794a <str_out+0x22>

00007958 <vprintk>:
{
    7958:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
    795a:	f000 fcb6 	bl	82ca <z_log_vprintk>
}
    795e:	bd08      	pop	{r3, pc}

00007960 <printk>:
{
    7960:	b40f      	push	{r0, r1, r2, r3}
    7962:	b500      	push	{lr}
    7964:	b083      	sub	sp, #12
    7966:	a904      	add	r1, sp, #16
    7968:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    796c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    796e:	f7ff fff3 	bl	7958 <vprintk>
}
    7972:	b003      	add	sp, #12
    7974:	f85d eb04 	ldr.w	lr, [sp], #4
    7978:	b004      	add	sp, #16
    797a:	4770      	bx	lr

0000797c <snprintk>:
{
    797c:	b40c      	push	{r2, r3}
    797e:	b500      	push	{lr}
    7980:	b083      	sub	sp, #12
    7982:	ab04      	add	r3, sp, #16
    7984:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    7988:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    798a:	f7f9 f981 	bl	c90 <vsnprintk>
}
    798e:	b003      	add	sp, #12
    7990:	f85d eb04 	ldr.w	lr, [sp], #4
    7994:	b002      	add	sp, #8
    7996:	4770      	bx	lr

00007998 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    7998:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    799c:	8b81      	ldrh	r1, [r0, #28]
    799e:	f021 0107 	bic.w	r1, r1, #7
    79a2:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    79a4:	8381      	strh	r1, [r0, #28]
}
    79a6:	4770      	bx	lr

000079a8 <notify_monitors>:
{
    79a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79ac:	4606      	mov	r6, r0
    79ae:	460f      	mov	r7, r1
    79b0:	4690      	mov	r8, r2
	return list->head;
    79b2:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    79b4:	b119      	cbz	r1, 79be <notify_monitors+0x16>
    79b6:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    79b8:	b131      	cbz	r1, 79c8 <notify_monitors+0x20>
	return node->next;
    79ba:	680c      	ldr	r4, [r1, #0]
    79bc:	e004      	b.n	79c8 <notify_monitors+0x20>
    79be:	460c      	mov	r4, r1
    79c0:	e002      	b.n	79c8 <notify_monitors+0x20>
    79c2:	4623      	mov	r3, r4
    79c4:	4621      	mov	r1, r4
    79c6:	461c      	mov	r4, r3
    79c8:	b159      	cbz	r1, 79e2 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    79ca:	684d      	ldr	r5, [r1, #4]
    79cc:	4643      	mov	r3, r8
    79ce:	463a      	mov	r2, r7
    79d0:	4630      	mov	r0, r6
    79d2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    79d4:	2c00      	cmp	r4, #0
    79d6:	d0f4      	beq.n	79c2 <notify_monitors+0x1a>
    79d8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    79da:	2c00      	cmp	r4, #0
    79dc:	d0f2      	beq.n	79c4 <notify_monitors+0x1c>
	return node->next;
    79de:	6823      	ldr	r3, [r4, #0]
    79e0:	e7f0      	b.n	79c4 <notify_monitors+0x1c>
}
    79e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000079e6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    79e6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    79e8:	f013 0307 	ands.w	r3, r3, #7
    79ec:	d103      	bne.n	79f6 <process_recheck+0x10>
	return list->head;
    79ee:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    79f0:	b10a      	cbz	r2, 79f6 <process_recheck+0x10>
		evt = EVT_START;
    79f2:	2003      	movs	r0, #3
    79f4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    79f6:	2b02      	cmp	r3, #2
    79f8:	d003      	beq.n	7a02 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    79fa:	2b01      	cmp	r3, #1
    79fc:	d006      	beq.n	7a0c <process_recheck+0x26>
	int evt = EVT_NOP;
    79fe:	2000      	movs	r0, #0
    7a00:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    7a02:	8bc2      	ldrh	r2, [r0, #30]
    7a04:	2a00      	cmp	r2, #0
    7a06:	d1f8      	bne.n	79fa <process_recheck+0x14>
		evt = EVT_STOP;
    7a08:	2004      	movs	r0, #4
    7a0a:	4770      	bx	lr
    7a0c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    7a0e:	b10b      	cbz	r3, 7a14 <process_recheck+0x2e>
		evt = EVT_RESET;
    7a10:	2005      	movs	r0, #5
}
    7a12:	4770      	bx	lr
	int evt = EVT_NOP;
    7a14:	2000      	movs	r0, #0
    7a16:	4770      	bx	lr

00007a18 <process_complete>:
{
    7a18:	b510      	push	{r4, lr}
    7a1a:	4604      	mov	r4, r0
    7a1c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7a1e:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
    7a20:	2a00      	cmp	r2, #0
    7a22:	db07      	blt.n	7a34 <process_complete+0x1c>
    7a24:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    7a28:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    7a2a:	2a01      	cmp	r2, #1
    7a2c:	d90e      	bls.n	7a4c <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    7a2e:	2b04      	cmp	r3, #4
    7a30:	d033      	beq.n	7a9a <process_complete+0x82>
}
    7a32:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    7a34:	e9d0 0100 	ldrd	r0, r1, [r0]
    7a38:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    7a3c:	2300      	movs	r3, #0
    7a3e:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    7a40:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    7a42:	2101      	movs	r1, #1
    7a44:	4620      	mov	r0, r4
    7a46:	f7ff ffa7 	bl	7998 <set_state>
    7a4a:	e7f2      	b.n	7a32 <process_complete+0x1a>
		*clients = mgr->clients;
    7a4c:	e9d0 0100 	ldrd	r0, r1, [r0]
    7a50:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    7a54:	2200      	movs	r2, #0
    7a56:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    7a58:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    7a5a:	2b06      	cmp	r3, #6
    7a5c:	d118      	bne.n	7a90 <process_complete+0x78>
	return list->head;
    7a5e:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    7a62:	b13b      	cbz	r3, 7a74 <process_complete+0x5c>
				mgr->refs += 1U;
    7a64:	8be2      	ldrh	r2, [r4, #30]
    7a66:	3201      	adds	r2, #1
    7a68:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
    7a6a:	2b00      	cmp	r3, #0
    7a6c:	d0f9      	beq.n	7a62 <process_complete+0x4a>
	return node->next;
    7a6e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    7a70:	2b00      	cmp	r3, #0
    7a72:	d1f6      	bne.n	7a62 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    7a74:	2102      	movs	r1, #2
    7a76:	4620      	mov	r0, r4
    7a78:	f7ff ff8e 	bl	7998 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    7a7c:	4620      	mov	r0, r4
    7a7e:	f7ff ffb2 	bl	79e6 <process_recheck>
    7a82:	2800      	cmp	r0, #0
    7a84:	d0d5      	beq.n	7a32 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7a86:	8ba3      	ldrh	r3, [r4, #28]
    7a88:	f043 0320 	orr.w	r3, r3, #32
    7a8c:	83a3      	strh	r3, [r4, #28]
    7a8e:	e7d0      	b.n	7a32 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    7a90:	2100      	movs	r1, #0
    7a92:	4620      	mov	r0, r4
    7a94:	f7ff ff80 	bl	7998 <set_state>
    7a98:	e7f0      	b.n	7a7c <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    7a9a:	2100      	movs	r1, #0
    7a9c:	f7ff ff7c 	bl	7998 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    7aa0:	4620      	mov	r0, r4
    7aa2:	f7ff ffa0 	bl	79e6 <process_recheck>
    7aa6:	2800      	cmp	r0, #0
    7aa8:	d0c3      	beq.n	7a32 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7aaa:	8ba3      	ldrh	r3, [r4, #28]
    7aac:	f043 0320 	orr.w	r3, r3, #32
    7ab0:	83a3      	strh	r3, [r4, #28]
}
    7ab2:	e7be      	b.n	7a32 <process_complete+0x1a>

00007ab4 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    7ab4:	b158      	cbz	r0, 7ace <validate_args+0x1a>
{
    7ab6:	b510      	push	{r4, lr}
    7ab8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7aba:	b159      	cbz	r1, 7ad4 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    7abc:	1d08      	adds	r0, r1, #4
    7abe:	f7ff ff0d 	bl	78dc <sys_notify_validate>
	if ((rv == 0)
    7ac2:	b918      	cbnz	r0, 7acc <validate_args+0x18>
	    && ((cli->notify.flags
    7ac4:	68a3      	ldr	r3, [r4, #8]
    7ac6:	f033 0303 	bics.w	r3, r3, #3
    7aca:	d106      	bne.n	7ada <validate_args+0x26>
}
    7acc:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7ace:	f06f 0015 	mvn.w	r0, #21
}
    7ad2:	4770      	bx	lr
		return -EINVAL;
    7ad4:	f06f 0015 	mvn.w	r0, #21
    7ad8:	e7f8      	b.n	7acc <validate_args+0x18>
		rv = -EINVAL;
    7ada:	f06f 0015 	mvn.w	r0, #21
    7ade:	e7f5      	b.n	7acc <validate_args+0x18>

00007ae0 <notify_one>:
{
    7ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ae4:	4607      	mov	r7, r0
    7ae6:	460c      	mov	r4, r1
    7ae8:	4616      	mov	r6, r2
    7aea:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7aec:	4619      	mov	r1, r3
    7aee:	1d20      	adds	r0, r4, #4
    7af0:	f7ff ff0b 	bl	790a <sys_notify_finalize>
	if (cb) {
    7af4:	b128      	cbz	r0, 7b02 <notify_one+0x22>
    7af6:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    7af8:	462b      	mov	r3, r5
    7afa:	4632      	mov	r2, r6
    7afc:	4621      	mov	r1, r4
    7afe:	4638      	mov	r0, r7
    7b00:	47c0      	blx	r8
}
    7b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007b06 <notify_all>:
{
    7b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b0a:	4680      	mov	r8, r0
    7b0c:	460c      	mov	r4, r1
    7b0e:	4617      	mov	r7, r2
    7b10:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    7b12:	e004      	b.n	7b1e <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    7b14:	4633      	mov	r3, r6
    7b16:	463a      	mov	r2, r7
    7b18:	4640      	mov	r0, r8
    7b1a:	f7ff ffe1 	bl	7ae0 <notify_one>
	return list->head;
    7b1e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    7b20:	b131      	cbz	r1, 7b30 <notify_all+0x2a>
	return node->next;
    7b22:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    7b24:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7b26:	6863      	ldr	r3, [r4, #4]
    7b28:	428b      	cmp	r3, r1
    7b2a:	d1f3      	bne.n	7b14 <notify_all+0xe>
	list->tail = node;
    7b2c:	6065      	str	r5, [r4, #4]
}
    7b2e:	e7f1      	b.n	7b14 <notify_all+0xe>
}
    7b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007b34 <transition_complete>:
{
    7b34:	b508      	push	{r3, lr}
	__asm__ volatile(
    7b36:	f04f 0c20 	mov.w	ip, #32
    7b3a:	f3ef 8211 	mrs	r2, BASEPRI
    7b3e:	f38c 8812 	msr	BASEPRI_MAX, ip
    7b42:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7b46:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
    7b48:	2101      	movs	r1, #1
    7b4a:	f7f9 f8b7 	bl	cbc <process_event>
}
    7b4e:	bd08      	pop	{r3, pc}

00007b50 <onoff_manager_init>:
	if ((mgr == NULL)
    7b50:	b170      	cbz	r0, 7b70 <onoff_manager_init+0x20>
{
    7b52:	b538      	push	{r3, r4, r5, lr}
    7b54:	460c      	mov	r4, r1
    7b56:	4605      	mov	r5, r0
	    || (transitions == NULL)
    7b58:	b169      	cbz	r1, 7b76 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    7b5a:	680b      	ldr	r3, [r1, #0]
    7b5c:	b173      	cbz	r3, 7b7c <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    7b5e:	684b      	ldr	r3, [r1, #4]
    7b60:	b17b      	cbz	r3, 7b82 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7b62:	2220      	movs	r2, #32
    7b64:	2100      	movs	r1, #0
    7b66:	f000 fdd6 	bl	8716 <memset>
    7b6a:	612c      	str	r4, [r5, #16]
	return 0;
    7b6c:	2000      	movs	r0, #0
}
    7b6e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7b70:	f06f 0015 	mvn.w	r0, #21
}
    7b74:	4770      	bx	lr
		return -EINVAL;
    7b76:	f06f 0015 	mvn.w	r0, #21
    7b7a:	e7f8      	b.n	7b6e <onoff_manager_init+0x1e>
    7b7c:	f06f 0015 	mvn.w	r0, #21
    7b80:	e7f5      	b.n	7b6e <onoff_manager_init+0x1e>
    7b82:	f06f 0015 	mvn.w	r0, #21
    7b86:	e7f2      	b.n	7b6e <onoff_manager_init+0x1e>

00007b88 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b8a:	4604      	mov	r4, r0
    7b8c:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7b8e:	f7ff ff91 	bl	7ab4 <validate_args>

	if (rv < 0) {
    7b92:	1e06      	subs	r6, r0, #0
    7b94:	db37      	blt.n	7c06 <onoff_request+0x7e>
    7b96:	f04f 0320 	mov.w	r3, #32
    7b9a:	f3ef 8211 	mrs	r2, BASEPRI
    7b9e:	f383 8812 	msr	BASEPRI_MAX, r3
    7ba2:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7ba6:	8ba5      	ldrh	r5, [r4, #28]
    7ba8:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7bac:	8be3      	ldrh	r3, [r4, #30]
    7bae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7bb2:	428b      	cmp	r3, r1
    7bb4:	d02f      	beq.n	7c16 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    7bb6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    7bb8:	2d02      	cmp	r5, #2
    7bba:	d00c      	beq.n	7bd6 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    7bbc:	b18d      	cbz	r5, 7be2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    7bbe:	2d04      	cmp	r5, #4
    7bc0:	d00f      	beq.n	7be2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    7bc2:	2d06      	cmp	r5, #6
    7bc4:	d00d      	beq.n	7be2 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    7bc6:	2d05      	cmp	r5, #5
    7bc8:	d01f      	beq.n	7c0a <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    7bca:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    7bce:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    7bd0:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7bd2:	4608      	mov	r0, r1
    7bd4:	e00a      	b.n	7bec <onoff_request+0x64>
		mgr->refs += 1U;
    7bd6:	3301      	adds	r3, #1
    7bd8:	83e3      	strh	r3, [r4, #30]
		notify = true;
    7bda:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    7bdc:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    7bde:	4618      	mov	r0, r3
    7be0:	e004      	b.n	7bec <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    7be2:	fab5 f385 	clz	r3, r5
    7be6:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    7be8:	2100      	movs	r1, #0
		add_client = true;
    7bea:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    7bec:	b128      	cbz	r0, 7bfa <onoff_request+0x72>
	parent->next = child;
    7bee:	2000      	movs	r0, #0
    7bf0:	6038      	str	r0, [r7, #0]
	return list->tail;
    7bf2:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    7bf4:	b1a8      	cbz	r0, 7c22 <onoff_request+0x9a>
	parent->next = child;
    7bf6:	6007      	str	r7, [r0, #0]
	list->tail = node;
    7bf8:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    7bfa:	b9ab      	cbnz	r3, 7c28 <onoff_request+0xa0>
	__asm__ volatile(
    7bfc:	f382 8811 	msr	BASEPRI, r2
    7c00:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    7c04:	b9a9      	cbnz	r1, 7c32 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7c06:	4630      	mov	r0, r6
    7c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    7c0a:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    7c0e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    7c10:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7c12:	4608      	mov	r0, r1
    7c14:	e7ea      	b.n	7bec <onoff_request+0x64>
		rv = -EAGAIN;
    7c16:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    7c1a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    7c1c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7c1e:	4608      	mov	r0, r1
    7c20:	e7e4      	b.n	7bec <onoff_request+0x64>
    7c22:	6067      	str	r7, [r4, #4]
	list->head = node;
    7c24:	6027      	str	r7, [r4, #0]
}
    7c26:	e7e8      	b.n	7bfa <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    7c28:	2102      	movs	r1, #2
    7c2a:	4620      	mov	r0, r4
    7c2c:	f7f9 f846 	bl	cbc <process_event>
    7c30:	e7e9      	b.n	7c06 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    7c32:	2300      	movs	r3, #0
    7c34:	462a      	mov	r2, r5
    7c36:	4639      	mov	r1, r7
    7c38:	4620      	mov	r0, r4
    7c3a:	f7ff ff51 	bl	7ae0 <notify_one>
    7c3e:	e7e2      	b.n	7c06 <onoff_request+0x7e>

00007c40 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7c40:	b508      	push	{r3, lr}
    7c42:	4604      	mov	r4, r0
    7c44:	4608      	mov	r0, r1
    7c46:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7c48:	461a      	mov	r2, r3
    7c4a:	47a0      	blx	r4
	return z_impl_z_current_get();
    7c4c:	f7ff f9ac 	bl	6fa8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7c50:	f7fb ff0a 	bl	3a68 <z_impl_k_thread_abort>

00007c54 <extract_decimal>:
{
    7c54:	4684      	mov	ip, r0
	const char *sp = *str;
    7c56:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    7c58:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    7c5a:	e005      	b.n	7c68 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    7c5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7c60:	3201      	adds	r2, #1
    7c62:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    7c66:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    7c68:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    7c6a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    7c6e:	2909      	cmp	r1, #9
    7c70:	d9f4      	bls.n	7c5c <extract_decimal+0x8>
	*str = sp;
    7c72:	f8cc 2000 	str.w	r2, [ip]
}
    7c76:	4770      	bx	lr

00007c78 <encode_uint>:
{
    7c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c7c:	b083      	sub	sp, #12
    7c7e:	4604      	mov	r4, r0
    7c80:	460d      	mov	r5, r1
    7c82:	9201      	str	r2, [sp, #4]
    7c84:	469a      	mov	sl, r3
    7c86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    7c88:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7c8a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7c8e:	2b6f      	cmp	r3, #111	; 0x6f
    7c90:	d00f      	beq.n	7cb2 <encode_uint+0x3a>
    7c92:	d906      	bls.n	7ca2 <encode_uint+0x2a>
    7c94:	2b70      	cmp	r3, #112	; 0x70
    7c96:	d00f      	beq.n	7cb8 <encode_uint+0x40>
    7c98:	2b78      	cmp	r3, #120	; 0x78
    7c9a:	d110      	bne.n	7cbe <encode_uint+0x46>
		return 16;
    7c9c:	f04f 0910 	mov.w	r9, #16
    7ca0:	e026      	b.n	7cf0 <encode_uint+0x78>
	switch (specifier) {
    7ca2:	2b58      	cmp	r3, #88	; 0x58
    7ca4:	d002      	beq.n	7cac <encode_uint+0x34>
    7ca6:	f04f 090a 	mov.w	r9, #10
    7caa:	e021      	b.n	7cf0 <encode_uint+0x78>
		return 16;
    7cac:	f04f 0910 	mov.w	r9, #16
    7cb0:	e01e      	b.n	7cf0 <encode_uint+0x78>
		return 8;
    7cb2:	f04f 0908 	mov.w	r9, #8
    7cb6:	e01b      	b.n	7cf0 <encode_uint+0x78>
		return 16;
    7cb8:	f04f 0910 	mov.w	r9, #16
    7cbc:	e018      	b.n	7cf0 <encode_uint+0x78>
	switch (specifier) {
    7cbe:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    7cc2:	e015      	b.n	7cf0 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7cc4:	f1bb 0f19 	cmp.w	fp, #25
    7cc8:	d821      	bhi.n	7d0e <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    7cca:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7ccc:	3237      	adds	r2, #55	; 0x37
    7cce:	b2d2      	uxtb	r2, r2
    7cd0:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    7cd4:	463a      	mov	r2, r7
    7cd6:	4643      	mov	r3, r8
    7cd8:	4620      	mov	r0, r4
    7cda:	4629      	mov	r1, r5
    7cdc:	f7f8 fa10 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    7ce0:	42bc      	cmp	r4, r7
    7ce2:	f175 0300 	sbcs.w	r3, r5, #0
    7ce6:	d316      	bcc.n	7d16 <encode_uint+0x9e>
    7ce8:	4556      	cmp	r6, sl
    7cea:	d914      	bls.n	7d16 <encode_uint+0x9e>
		value /= radix;
    7cec:	4604      	mov	r4, r0
    7cee:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    7cf0:	f04f 0800 	mov.w	r8, #0
    7cf4:	464f      	mov	r7, r9
    7cf6:	464a      	mov	r2, r9
    7cf8:	4643      	mov	r3, r8
    7cfa:	4620      	mov	r0, r4
    7cfc:	4629      	mov	r1, r5
    7cfe:	f7f8 f9ff 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7d02:	2a09      	cmp	r2, #9
    7d04:	d8de      	bhi.n	7cc4 <encode_uint+0x4c>
    7d06:	b2d2      	uxtb	r2, r2
    7d08:	3230      	adds	r2, #48	; 0x30
    7d0a:	b2d2      	uxtb	r2, r2
    7d0c:	e7e0      	b.n	7cd0 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    7d0e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7d10:	3257      	adds	r2, #87	; 0x57
    7d12:	b2d2      	uxtb	r2, r2
    7d14:	e7dc      	b.n	7cd0 <encode_uint+0x58>
	if (conv->flag_hash) {
    7d16:	9b01      	ldr	r3, [sp, #4]
    7d18:	781b      	ldrb	r3, [r3, #0]
    7d1a:	f013 0f20 	tst.w	r3, #32
    7d1e:	d005      	beq.n	7d2c <encode_uint+0xb4>
		if (radix == 8) {
    7d20:	f1b9 0f08 	cmp.w	r9, #8
    7d24:	d006      	beq.n	7d34 <encode_uint+0xbc>
		} else if (radix == 16) {
    7d26:	f1b9 0f10 	cmp.w	r9, #16
    7d2a:	d009      	beq.n	7d40 <encode_uint+0xc8>
}
    7d2c:	4630      	mov	r0, r6
    7d2e:	b003      	add	sp, #12
    7d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    7d34:	9a01      	ldr	r2, [sp, #4]
    7d36:	7893      	ldrb	r3, [r2, #2]
    7d38:	f043 0308 	orr.w	r3, r3, #8
    7d3c:	7093      	strb	r3, [r2, #2]
    7d3e:	e7f5      	b.n	7d2c <encode_uint+0xb4>
			conv->altform_0c = true;
    7d40:	9a01      	ldr	r2, [sp, #4]
    7d42:	7893      	ldrb	r3, [r2, #2]
    7d44:	f043 0310 	orr.w	r3, r3, #16
    7d48:	7093      	strb	r3, [r2, #2]
    7d4a:	e7ef      	b.n	7d2c <encode_uint+0xb4>

00007d4c <outs>:
{
    7d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d50:	4607      	mov	r7, r0
    7d52:	460e      	mov	r6, r1
    7d54:	4614      	mov	r4, r2
    7d56:	4698      	mov	r8, r3
	size_t count = 0;
    7d58:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7d5a:	e006      	b.n	7d6a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    7d5c:	4631      	mov	r1, r6
    7d5e:	f814 0b01 	ldrb.w	r0, [r4], #1
    7d62:	47b8      	blx	r7
		if (rc < 0) {
    7d64:	2800      	cmp	r0, #0
    7d66:	db09      	blt.n	7d7c <outs+0x30>
		++count;
    7d68:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7d6a:	4544      	cmp	r4, r8
    7d6c:	d3f6      	bcc.n	7d5c <outs+0x10>
    7d6e:	f1b8 0f00 	cmp.w	r8, #0
    7d72:	d102      	bne.n	7d7a <outs+0x2e>
    7d74:	7823      	ldrb	r3, [r4, #0]
    7d76:	2b00      	cmp	r3, #0
    7d78:	d1f0      	bne.n	7d5c <outs+0x10>
	return (int)count;
    7d7a:	4628      	mov	r0, r5
}
    7d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007d80 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    7d80:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
    7d82:	2300      	movs	r3, #0
    7d84:	f36f 0300 	bfc	r3, #0, #1
    7d88:	f043 0302 	orr.w	r3, r3, #2
    7d8c:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    7d90:	6a02      	ldr	r2, [r0, #32]
    7d92:	6804      	ldr	r4, [r0, #0]
    7d94:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    7d98:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
    7d9a:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7d9c:	6902      	ldr	r2, [r0, #16]
    7d9e:	f012 0201 	ands.w	r2, r2, #1
    7da2:	d104      	bne.n	7dae <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
    7da4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    7da6:	42a3      	cmp	r3, r4
    7da8:	d304      	bcc.n	7db4 <add_skip_item+0x34>
    7daa:	1b1b      	subs	r3, r3, r4
    7dac:	e002      	b.n	7db4 <add_skip_item+0x34>
		return i & (buffer->size - 1);
    7dae:	6a44      	ldr	r4, [r0, #36]	; 0x24
    7db0:	3c01      	subs	r4, #1
    7db2:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    7db4:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    7db6:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    7db8:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7dba:	b922      	cbnz	r2, 7dc6 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
    7dbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7dbe:	4299      	cmp	r1, r3
    7dc0:	d304      	bcc.n	7dcc <add_skip_item+0x4c>
    7dc2:	1ac9      	subs	r1, r1, r3
    7dc4:	e002      	b.n	7dcc <add_skip_item+0x4c>
		return i & (buffer->size - 1);
    7dc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7dc8:	3b01      	subs	r3, #1
    7dca:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    7dcc:	6041      	str	r1, [r0, #4]
}
    7dce:	bc10      	pop	{r4}
    7dd0:	4770      	bx	lr

00007dd2 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    7dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dd6:	b083      	sub	sp, #12
    7dd8:	4604      	mov	r4, r0
    7dda:	9101      	str	r1, [sp, #4]
    7ddc:	4615      	mov	r5, r2
    7dde:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    7de0:	2300      	movs	r3, #0
    7de2:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    7de4:	f8d0 8020 	ldr.w	r8, [r0, #32]
    7de8:	f8d0 900c 	ldr.w	r9, [r0, #12]
    7dec:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    7df0:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
    7df4:	f003 0303 	and.w	r3, r3, #3
    7df8:	2b02      	cmp	r3, #2
    7dfa:	d012      	beq.n	7e22 <drop_item_locked+0x50>
	return 0;
    7dfc:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    7e00:	69e3      	ldr	r3, [r4, #28]
    7e02:	4650      	mov	r0, sl
    7e04:	4798      	blx	r3
    7e06:	4607      	mov	r7, r0
	if (skip_wlen) {
    7e08:	f1bb 0f00 	cmp.w	fp, #0
    7e0c:	d151      	bne.n	7eb2 <drop_item_locked+0xe0>
		allow_drop = true;
	} else if (allow_drop) {
    7e0e:	2d00      	cmp	r5, #0
    7e10:	d05c      	beq.n	7ecc <drop_item_locked+0xfa>
		if (item->hdr.busy) {
    7e12:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
    7e16:	f013 0f02 	tst.w	r3, #2
    7e1a:	d109      	bne.n	7e30 <drop_item_locked+0x5e>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
    7e1c:	2301      	movs	r3, #1
    7e1e:	7033      	strb	r3, [r6, #0]
    7e20:	e048      	b.n	7eb4 <drop_item_locked+0xe2>
		return item->skip.len;
    7e22:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    7e26:	ea5f 0b93 	movs.w	fp, r3, lsr #2
    7e2a:	d0e9      	beq.n	7e00 <drop_item_locked+0x2e>
		return item->skip.len;
    7e2c:	465f      	mov	r7, fp
    7e2e:	e7eb      	b.n	7e08 <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
    7e30:	9901      	ldr	r1, [sp, #4]
    7e32:	3101      	adds	r1, #1
    7e34:	4620      	mov	r0, r4
    7e36:	f7ff ffa3 	bl	7d80 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    7e3a:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    7e3c:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7e3e:	6922      	ldr	r2, [r4, #16]
    7e40:	f012 0201 	ands.w	r2, r2, #1
    7e44:	d104      	bne.n	7e50 <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
    7e46:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e48:	428b      	cmp	r3, r1
    7e4a:	d304      	bcc.n	7e56 <drop_item_locked+0x84>
    7e4c:	1a5b      	subs	r3, r3, r1
    7e4e:	e002      	b.n	7e56 <drop_item_locked+0x84>
		return i & (buffer->size - 1);
    7e50:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e52:	3901      	subs	r1, #1
    7e54:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    7e56:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    7e58:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
    7e5a:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7e5c:	b922      	cbnz	r2, 7e68 <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
    7e5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e60:	428b      	cmp	r3, r1
    7e62:	d304      	bcc.n	7e6e <drop_item_locked+0x9c>
    7e64:	1a5b      	subs	r3, r3, r1
    7e66:	e002      	b.n	7e6e <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
    7e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e6a:	3901      	subs	r1, #1
    7e6c:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    7e6e:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    7e70:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    7e72:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7e74:	b922      	cbnz	r2, 7e80 <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
    7e76:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7e78:	4293      	cmp	r3, r2
    7e7a:	d304      	bcc.n	7e86 <drop_item_locked+0xb4>
    7e7c:	1a9b      	subs	r3, r3, r2
    7e7e:	e002      	b.n	7e86 <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
    7e80:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7e82:	3a01      	subs	r2, #1
    7e84:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    7e86:	6a21      	ldr	r1, [r4, #32]
    7e88:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    7e8c:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
    7e90:	f002 0203 	and.w	r2, r2, #3
    7e94:	2a02      	cmp	r2, #2
    7e96:	d006      	beq.n	7ea6 <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
    7e98:	69e3      	ldr	r3, [r4, #28]
    7e9a:	4650      	mov	r0, sl
    7e9c:	4798      	blx	r3
    7e9e:	4407      	add	r7, r0
				*user_packet = true;
    7ea0:	2301      	movs	r3, #1
    7ea2:	7033      	strb	r3, [r6, #0]
    7ea4:	e006      	b.n	7eb4 <drop_item_locked+0xe2>
		return item->skip.len;
    7ea6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
    7eaa:	089b      	lsrs	r3, r3, #2
    7eac:	d0f4      	beq.n	7e98 <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
    7eae:	441f      	add	r7, r3
    7eb0:	e000      	b.n	7eb4 <drop_item_locked+0xe2>
		allow_drop = true;
    7eb2:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
    7eb4:	b195      	cbz	r5, 7edc <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    7eb6:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
    7eb8:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7eba:	6923      	ldr	r3, [r4, #16]
    7ebc:	f013 0f01 	tst.w	r3, #1
    7ec0:	d107      	bne.n	7ed2 <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
    7ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7ec4:	429f      	cmp	r7, r3
    7ec6:	d307      	bcc.n	7ed8 <drop_item_locked+0x106>
    7ec8:	1aff      	subs	r7, r7, r3
    7eca:	e005      	b.n	7ed8 <drop_item_locked+0x106>
		item = NULL;
    7ecc:	f04f 0a00 	mov.w	sl, #0
    7ed0:	e7f0      	b.n	7eb4 <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
    7ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7ed4:	3b01      	subs	r3, #1
    7ed6:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    7ed8:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
    7eda:	60a7      	str	r7, [r4, #8]
	}

	return item;
}
    7edc:	4650      	mov	r0, sl
    7ede:	b003      	add	sp, #12
    7ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007ee4 <mpsc_pbuf_init>:
{
    7ee4:	b538      	push	{r3, r4, r5, lr}
    7ee6:	4604      	mov	r4, r0
    7ee8:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    7eea:	2220      	movs	r2, #32
    7eec:	2100      	movs	r1, #0
    7eee:	f000 fc12 	bl	8716 <memset>
	buffer->get_wlen = cfg->get_wlen;
    7ef2:	68eb      	ldr	r3, [r5, #12]
    7ef4:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    7ef6:	68ab      	ldr	r3, [r5, #8]
    7ef8:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    7efa:	682b      	ldr	r3, [r5, #0]
    7efc:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    7efe:	686b      	ldr	r3, [r5, #4]
    7f00:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
    7f02:	2200      	movs	r2, #0
    7f04:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
    7f06:	692a      	ldr	r2, [r5, #16]
    7f08:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    7f0a:	b123      	cbz	r3, 7f16 <mpsc_pbuf_init+0x32>
    7f0c:	1e59      	subs	r1, r3, #1
    7f0e:	420b      	tst	r3, r1
    7f10:	d00d      	beq.n	7f2e <mpsc_pbuf_init+0x4a>
    7f12:	2300      	movs	r3, #0
    7f14:	e000      	b.n	7f18 <mpsc_pbuf_init+0x34>
    7f16:	2300      	movs	r3, #0
	if (is_power_of_two(buffer->size)) {
    7f18:	b113      	cbz	r3, 7f20 <mpsc_pbuf_init+0x3c>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    7f1a:	f042 0201 	orr.w	r2, r2, #1
    7f1e:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
    7f20:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return z_impl_k_sem_init(sem, initial_count, limit);
    7f24:	2201      	movs	r2, #1
    7f26:	2100      	movs	r1, #0
    7f28:	f001 fa2a 	bl	9380 <z_impl_k_sem_init>
}
    7f2c:	bd38      	pop	{r3, r4, r5, pc}
    7f2e:	2301      	movs	r3, #1
    7f30:	e7f2      	b.n	7f18 <mpsc_pbuf_init+0x34>

00007f32 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    7f32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f36:	b085      	sub	sp, #20
    7f38:	9200      	str	r2, [sp, #0]
    7f3a:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    7f3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7f3e:	3b01      	subs	r3, #1
    7f40:	428b      	cmp	r3, r1
    7f42:	f0c0 8087 	bcc.w	8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    7f46:	4605      	mov	r5, r0
    7f48:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
    7f4a:	f04f 0a00 	mov.w	sl, #0
	union mpsc_pbuf_generic *item = NULL;
    7f4e:	46d3      	mov	fp, sl
    7f50:	e020      	b.n	7f94 <mpsc_pbuf_alloc+0x62>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    7f52:	1b1c      	subs	r4, r3, r4
    7f54:	3c01      	subs	r4, #1
		return false;
    7f56:	2600      	movs	r6, #0
    7f58:	e02e      	b.n	7fb8 <mpsc_pbuf_alloc+0x86>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    7f5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7f5c:	1b1c      	subs	r4, r3, r4
    7f5e:	3c01      	subs	r4, #1
		return false;
    7f60:	2600      	movs	r6, #0
    7f62:	e029      	b.n	7fb8 <mpsc_pbuf_alloc+0x86>
		return i & (buffer->size - 1);
    7f64:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7f66:	3a01      	subs	r2, #1
    7f68:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    7f6a:	602b      	str	r3, [r5, #0]
		cont = false;
    7f6c:	2600      	movs	r6, #0
    7f6e:	f387 8811 	msr	BASEPRI, r7
    7f72:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    7f76:	b15e      	cbz	r6, 7f90 <mpsc_pbuf_alloc+0x5e>
    7f78:	f1ba 0f00 	cmp.w	sl, #0
    7f7c:	d008      	beq.n	7f90 <mpsc_pbuf_alloc+0x5e>
    7f7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f82:	b12b      	cbz	r3, 7f90 <mpsc_pbuf_alloc+0x5e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    7f84:	69ab      	ldr	r3, [r5, #24]
    7f86:	4651      	mov	r1, sl
    7f88:	4628      	mov	r0, r5
    7f8a:	4798      	blx	r3
			dropped_item = NULL;
    7f8c:	f04f 0a00 	mov.w	sl, #0
		}
	} while (cont);
    7f90:	2e00      	cmp	r6, #0
    7f92:	d061      	beq.n	8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
	__asm__ volatile(
    7f94:	f04f 0320 	mov.w	r3, #32
    7f98:	f3ef 8811 	mrs	r8, BASEPRI
    7f9c:	f383 8812 	msr	BASEPRI_MAX, r3
    7fa0:	f3bf 8f6f 	isb	sy
    7fa4:	4647      	mov	r7, r8
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    7fa6:	68eb      	ldr	r3, [r5, #12]
    7fa8:	682c      	ldr	r4, [r5, #0]
    7faa:	42a3      	cmp	r3, r4
    7fac:	d8d1      	bhi.n	7f52 <mpsc_pbuf_alloc+0x20>
	} else if (!buffer->rd_idx) {
    7fae:	2b00      	cmp	r3, #0
    7fb0:	d0d3      	beq.n	7f5a <mpsc_pbuf_alloc+0x28>
	*res = buffer->size - buffer->tmp_wr_idx;
    7fb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7fb4:	1b1c      	subs	r4, r3, r4
	return true;
    7fb6:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
    7fb8:	45a1      	cmp	r9, r4
    7fba:	d819      	bhi.n	7ff0 <mpsc_pbuf_alloc+0xbe>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    7fbc:	6a2b      	ldr	r3, [r5, #32]
    7fbe:	682a      	ldr	r2, [r5, #0]
			item =
    7fc0:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
    7fc4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    7fc8:	f36f 0100 	bfc	r1, #0, #1
    7fcc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
    7fd0:	b2c9      	uxtb	r1, r1
    7fd2:	f36f 0141 	bfc	r1, #1, #1
    7fd6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    7fda:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
    7fdc:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7fde:	692a      	ldr	r2, [r5, #16]
    7fe0:	f012 0f01 	tst.w	r2, #1
    7fe4:	d1be      	bne.n	7f64 <mpsc_pbuf_alloc+0x32>
	return (i >= buffer->size) ? i - buffer->size : i;
    7fe6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7fe8:	4293      	cmp	r3, r2
    7fea:	d3be      	bcc.n	7f6a <mpsc_pbuf_alloc+0x38>
    7fec:	1a9b      	subs	r3, r3, r2
    7fee:	e7bc      	b.n	7f6a <mpsc_pbuf_alloc+0x38>
		} else if (wrap) {
    7ff0:	b9ae      	cbnz	r6, 801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    7ff2:	9b01      	ldr	r3, [sp, #4]
    7ff4:	9a00      	ldr	r2, [sp, #0]
    7ff6:	4313      	orrs	r3, r2
    7ff8:	d003      	beq.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
			   !k_is_in_isr()) {
    7ffa:	f001 f965 	bl	92c8 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    7ffe:	4606      	mov	r6, r0
    8000:	b190      	cbz	r0, 8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    8002:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    8004:	f10d 030f 	add.w	r3, sp, #15
    8008:	f3c2 0240 	ubfx	r2, r2, #1, #1
    800c:	4621      	mov	r1, r4
    800e:	4628      	mov	r0, r5
    8010:	f7ff fedf 	bl	7dd2 <drop_item_locked>
			cont = dropped_item != NULL;
    8014:	4682      	mov	sl, r0
    8016:	1e06      	subs	r6, r0, #0
    8018:	bf18      	it	ne
    801a:	2601      	movne	r6, #1
    801c:	e7a7      	b.n	7f6e <mpsc_pbuf_alloc+0x3c>
			add_skip_item(buffer, free_wlen);
    801e:	4621      	mov	r1, r4
    8020:	4628      	mov	r0, r5
    8022:	f7ff fead 	bl	7d80 <add_skip_item>
			cont = true;
    8026:	e7a2      	b.n	7f6e <mpsc_pbuf_alloc+0x3c>
	__asm__ volatile(
    8028:	f388 8811 	msr	BASEPRI, r8
    802c:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
    8030:	f105 002c 	add.w	r0, r5, #44	; 0x2c
	return z_impl_k_sem_take(sem, timeout);
    8034:	9a00      	ldr	r2, [sp, #0]
    8036:	9b01      	ldr	r3, [sp, #4]
    8038:	f7fe fbb4 	bl	67a4 <z_impl_k_sem_take>
	__asm__ volatile(
    803c:	f04f 0320 	mov.w	r3, #32
    8040:	f3ef 8711 	mrs	r7, BASEPRI
    8044:	f383 8812 	msr	BASEPRI_MAX, r3
    8048:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    804c:	2800      	cmp	r0, #0
    804e:	d18e      	bne.n	7f6e <mpsc_pbuf_alloc+0x3c>
				cont = true;
    8050:	2601      	movs	r6, #1
    8052:	e78c      	b.n	7f6e <mpsc_pbuf_alloc+0x3c>
		return NULL;
    8054:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    8058:	4658      	mov	r0, fp
    805a:	b005      	add	sp, #20
    805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008060 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    8060:	b538      	push	{r3, r4, r5, lr}
    8062:	4604      	mov	r4, r0
    8064:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    8066:	69c3      	ldr	r3, [r0, #28]
    8068:	4608      	mov	r0, r1
    806a:	4798      	blx	r3
    806c:	f04f 0320 	mov.w	r3, #32
    8070:	f3ef 8111 	mrs	r1, BASEPRI
    8074:	f383 8812 	msr	BASEPRI_MAX, r3
    8078:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    807c:	782b      	ldrb	r3, [r5, #0]
    807e:	f043 0301 	orr.w	r3, r3, #1
    8082:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    8084:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    8086:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    8088:	6923      	ldr	r3, [r4, #16]
    808a:	f013 0f01 	tst.w	r3, #1
    808e:	d104      	bne.n	809a <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
    8090:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8092:	4298      	cmp	r0, r3
    8094:	d304      	bcc.n	80a0 <mpsc_pbuf_commit+0x40>
    8096:	1ac0      	subs	r0, r0, r3
    8098:	e002      	b.n	80a0 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
    809a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    809c:	3b01      	subs	r3, #1
    809e:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    80a0:	6060      	str	r0, [r4, #4]
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    80a2:	6923      	ldr	r3, [r4, #16]
    80a4:	f013 0f04 	tst.w	r3, #4
    80a8:	d104      	bne.n	80b4 <mpsc_pbuf_commit+0x54>
	__asm__ volatile(
    80aa:	f381 8811 	msr	BASEPRI, r1
    80ae:	f3bf 8f6f 	isb	sy
	max_utilization_update(buffer);
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    80b2:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    80b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    80b6:	68e3      	ldr	r3, [r4, #12]
    80b8:	6820      	ldr	r0, [r4, #0]
    80ba:	4283      	cmp	r3, r0
    80bc:	d80f      	bhi.n	80de <mpsc_pbuf_commit+0x7e>
	} else if (!buffer->rd_idx) {
    80be:	b193      	cbz	r3, 80e6 <mpsc_pbuf_commit+0x86>
	*res = buffer->size - buffer->tmp_wr_idx;
    80c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80c2:	1a1b      	subs	r3, r3, r0
	return true;
    80c4:	2201      	movs	r2, #1
	if (free_space(buffer, &f)) {
    80c6:	b112      	cbz	r2, 80ce <mpsc_pbuf_commit+0x6e>
		f += (buffer->rd_idx - 1);
    80c8:	68e2      	ldr	r2, [r4, #12]
    80ca:	4413      	add	r3, r2
    80cc:	3b01      	subs	r3, #1
	return buffer->size - 1 - f;
    80ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    80d0:	1ad3      	subs	r3, r2, r3
    80d2:	3b01      	subs	r3, #1
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    80d4:	429d      	cmp	r5, r3
    80d6:	d90b      	bls.n	80f0 <mpsc_pbuf_commit+0x90>
    80d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    80da:	62a3      	str	r3, [r4, #40]	; 0x28
    80dc:	e7e5      	b.n	80aa <mpsc_pbuf_commit+0x4a>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    80de:	1a1b      	subs	r3, r3, r0
    80e0:	3b01      	subs	r3, #1
		return false;
    80e2:	2200      	movs	r2, #0
    80e4:	e7ef      	b.n	80c6 <mpsc_pbuf_commit+0x66>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    80e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    80e8:	1a13      	subs	r3, r2, r0
    80ea:	3b01      	subs	r3, #1
		return false;
    80ec:	2200      	movs	r2, #0
    80ee:	e7ea      	b.n	80c6 <mpsc_pbuf_commit+0x66>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    80f0:	68e2      	ldr	r2, [r4, #12]
    80f2:	6825      	ldr	r5, [r4, #0]
    80f4:	42aa      	cmp	r2, r5
    80f6:	d80b      	bhi.n	8110 <mpsc_pbuf_commit+0xb0>
	} else if (!buffer->rd_idx) {
    80f8:	b172      	cbz	r2, 8118 <mpsc_pbuf_commit+0xb8>
	*res = buffer->size - buffer->tmp_wr_idx;
    80fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80fc:	1b5a      	subs	r2, r3, r5
	return true;
    80fe:	2301      	movs	r3, #1
	if (free_space(buffer, &f)) {
    8100:	b113      	cbz	r3, 8108 <mpsc_pbuf_commit+0xa8>
		f += (buffer->rd_idx - 1);
    8102:	68e3      	ldr	r3, [r4, #12]
    8104:	4413      	add	r3, r2
    8106:	1e5a      	subs	r2, r3, #1
	return buffer->size - 1 - f;
    8108:	6a63      	ldr	r3, [r4, #36]	; 0x24
    810a:	1a9b      	subs	r3, r3, r2
    810c:	3b01      	subs	r3, #1
    810e:	e7e4      	b.n	80da <mpsc_pbuf_commit+0x7a>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    8110:	1b52      	subs	r2, r2, r5
    8112:	3a01      	subs	r2, #1
		return false;
    8114:	2300      	movs	r3, #0
    8116:	e7f3      	b.n	8100 <mpsc_pbuf_commit+0xa0>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    8118:	6a60      	ldr	r0, [r4, #36]	; 0x24
    811a:	1b42      	subs	r2, r0, r5
    811c:	3a01      	subs	r2, #1
		return false;
    811e:	2300      	movs	r3, #0
    8120:	e7ee      	b.n	8100 <mpsc_pbuf_commit+0xa0>

00008122 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    8122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8124:	4604      	mov	r4, r0
    8126:	e039      	b.n	819c <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    8128:	1a9b      	subs	r3, r3, r2
		return false;
    812a:	e045      	b.n	81b8 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
    812c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    8130:	0880      	lsrs	r0, r0, #2
    8132:	d153      	bne.n	81dc <mpsc_pbuf_claim+0xba>
    8134:	e04d      	b.n	81d2 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
    8136:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8138:	3901      	subs	r1, #1
    813a:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
    813c:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    813e:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    8140:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    8142:	b922      	cbnz	r2, 814e <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
    8144:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8146:	4298      	cmp	r0, r3
    8148:	d304      	bcc.n	8154 <mpsc_pbuf_claim+0x32>
    814a:	1ac0      	subs	r0, r0, r3
    814c:	e002      	b.n	8154 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
    814e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8150:	3b01      	subs	r3, #1
    8152:	4018      	ands	r0, r3
				buffer->rd_idx =
    8154:	60e0      	str	r0, [r4, #12]
				cont = true;
    8156:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
    8158:	e01b      	b.n	8192 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
    815a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
    815e:	f043 0302 	orr.w	r3, r3, #2
    8162:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    8166:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
    8168:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
    816a:	4630      	mov	r0, r6
    816c:	4798      	blx	r3
	uint32_t i = idx + val;
    816e:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    8170:	6923      	ldr	r3, [r4, #16]
    8172:	f013 0f01 	tst.w	r3, #1
    8176:	d104      	bne.n	8182 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
    8178:	6a63      	ldr	r3, [r4, #36]	; 0x24
    817a:	4298      	cmp	r0, r3
    817c:	d304      	bcc.n	8188 <mpsc_pbuf_claim+0x66>
    817e:	1ac0      	subs	r0, r0, r3
    8180:	e002      	b.n	8188 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
    8182:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8184:	3b01      	subs	r3, #1
    8186:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
    8188:	60a0      	str	r0, [r4, #8]
		cont = false;
    818a:	2300      	movs	r3, #0
    818c:	e001      	b.n	8192 <mpsc_pbuf_claim+0x70>
    818e:	2300      	movs	r3, #0
			item = NULL;
    8190:	461e      	mov	r6, r3
    8192:	f385 8811 	msr	BASEPRI, r5
    8196:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    819a:	b38b      	cbz	r3, 8200 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
    819c:	f04f 0320 	mov.w	r3, #32
    81a0:	f3ef 8511 	mrs	r5, BASEPRI
    81a4:	f383 8812 	msr	BASEPRI_MAX, r3
    81a8:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    81ac:	68a2      	ldr	r2, [r4, #8]
    81ae:	6863      	ldr	r3, [r4, #4]
    81b0:	429a      	cmp	r2, r3
    81b2:	d9b9      	bls.n	8128 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
    81b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    81b6:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
    81b8:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
    81ba:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    81be:	2b00      	cmp	r3, #0
    81c0:	d0e5      	beq.n	818e <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
    81c2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
    81c6:	f013 0303 	ands.w	r3, r3, #3
    81ca:	d016      	beq.n	81fa <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
    81cc:	2b02      	cmp	r3, #2
    81ce:	d0ad      	beq.n	812c <mpsc_pbuf_claim+0xa>
	return 0;
    81d0:	2000      	movs	r0, #0
	return item->hdr.valid;
    81d2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
    81d6:	f013 0f01 	tst.w	r3, #1
    81da:	d1be      	bne.n	815a <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
    81dc:	b910      	cbnz	r0, 81e4 <mpsc_pbuf_claim+0xc2>
    81de:	69e3      	ldr	r3, [r4, #28]
    81e0:	4630      	mov	r0, r6
    81e2:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    81e4:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
    81e6:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    81e8:	6922      	ldr	r2, [r4, #16]
    81ea:	f012 0201 	ands.w	r2, r2, #1
    81ee:	d1a2      	bne.n	8136 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
    81f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    81f2:	428b      	cmp	r3, r1
    81f4:	d3a2      	bcc.n	813c <mpsc_pbuf_claim+0x1a>
    81f6:	1a5b      	subs	r3, r3, r1
    81f8:	e7a0      	b.n	813c <mpsc_pbuf_claim+0x1a>
		cont = false;
    81fa:	2300      	movs	r3, #0
			item = NULL;
    81fc:	461e      	mov	r6, r3
    81fe:	e7c8      	b.n	8192 <mpsc_pbuf_claim+0x70>

	return item;
}
    8200:	4630      	mov	r0, r6
    8202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008204 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    8204:	b538      	push	{r3, r4, r5, lr}
    8206:	4604      	mov	r4, r0
    8208:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    820a:	69c3      	ldr	r3, [r0, #28]
    820c:	4608      	mov	r0, r1
    820e:	4798      	blx	r3
    8210:	f04f 0320 	mov.w	r3, #32
    8214:	f3ef 8211 	mrs	r2, BASEPRI
    8218:	f383 8812 	msr	BASEPRI_MAX, r3
    821c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    8220:	782b      	ldrb	r3, [r5, #0]
    8222:	f36f 0300 	bfc	r3, #0, #1
    8226:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    8228:	6923      	ldr	r3, [r4, #16]
    822a:	f013 0f02 	tst.w	r3, #2
    822e:	d00a      	beq.n	8246 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    8230:	6a23      	ldr	r3, [r4, #32]
    8232:	68e1      	ldr	r1, [r4, #12]
    8234:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    8238:	42ab      	cmp	r3, r5
    823a:	d004      	beq.n	8246 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
    823c:	682b      	ldr	r3, [r5, #0]
    823e:	f360 039f 	bfi	r3, r0, #2, #30
    8242:	602b      	str	r3, [r5, #0]
    8244:	e012      	b.n	826c <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
    8246:	782b      	ldrb	r3, [r5, #0]
    8248:	f36f 0341 	bfc	r3, #1, #1
    824c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    824e:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    8250:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    8252:	6923      	ldr	r3, [r4, #16]
    8254:	f013 0f01 	tst.w	r3, #1
    8258:	d104      	bne.n	8264 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
    825a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    825c:	4298      	cmp	r0, r3
    825e:	d304      	bcc.n	826a <mpsc_pbuf_free+0x66>
    8260:	1ac0      	subs	r0, r0, r3
    8262:	e002      	b.n	826a <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
    8264:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8266:	3b01      	subs	r3, #1
    8268:	4018      	ands	r0, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    826a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    826c:	f382 8811 	msr	BASEPRI, r2
    8270:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
    8274:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	z_impl_k_sem_give(sem);
    8278:	f7fe fa70 	bl	675c <z_impl_k_sem_give>
}
    827c:	bd38      	pop	{r3, r4, r5, pc}

0000827e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    827e:	6883      	ldr	r3, [r0, #8]
    8280:	6842      	ldr	r2, [r0, #4]
    8282:	4293      	cmp	r3, r2
    8284:	d905      	bls.n	8292 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
    8286:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8288:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    828a:	3800      	subs	r0, #0
    828c:	bf18      	it	ne
    828e:	2001      	movne	r0, #1
    8290:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    8292:	1ad0      	subs	r0, r2, r3
		return false;
    8294:	e7f9      	b.n	828a <mpsc_pbuf_is_pending+0xc>

00008296 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    8296:	4770      	bx	lr

00008298 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    8298:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    829a:	f013 0f04 	tst.w	r3, #4
    829e:	d001      	beq.n	82a4 <log_msg2_generic_get_wlen+0xc>
	return 0;
    82a0:	2000      	movs	r0, #0
}
    82a2:	4770      	bx	lr
		return log_msg2_get_total_wlen(msg->hdr.desc);
    82a4:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    82a6:	f3c3 2049 	ubfx	r0, r3, #9, #10
    82aa:	f3c3 43cb 	ubfx	r3, r3, #19, #12
    82ae:	4418      	add	r0, r3
    82b0:	3017      	adds	r0, #23
    82b2:	f020 0007 	bic.w	r0, r0, #7
    82b6:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    82b8:	4770      	bx	lr

000082ba <dummy_timestamp>:
}
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr

000082be <msg_filter_check>:
}
    82be:	2001      	movs	r0, #1
    82c0:	4770      	bx	lr

000082c2 <default_get_timestamp>:
{
    82c2:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    82c4:	f000 fe39 	bl	8f3a <sys_clock_cycle_get_32>
}
    82c8:	bd08      	pop	{r3, pc}

000082ca <z_log_vprintk>:
{
    82ca:	b500      	push	{lr}
    82cc:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    82ce:	9103      	str	r1, [sp, #12]
    82d0:	9002      	str	r0, [sp, #8]
    82d2:	2000      	movs	r0, #0
    82d4:	9001      	str	r0, [sp, #4]
    82d6:	9000      	str	r0, [sp, #0]
    82d8:	4603      	mov	r3, r0
    82da:	4602      	mov	r2, r0
    82dc:	4601      	mov	r1, r0
    82de:	f000 f8e8 	bl	84b2 <z_impl_z_log_msg2_runtime_vcreate>
}
    82e2:	b005      	add	sp, #20
    82e4:	f85d fb04 	ldr.w	pc, [sp], #4

000082e8 <notify_drop>:
{
    82e8:	b508      	push	{r3, lr}
	z_log_dropped(true);
    82ea:	2001      	movs	r0, #1
    82ec:	f7f9 fabe 	bl	186c <z_log_dropped>
}
    82f0:	bd08      	pop	{r3, pc}

000082f2 <get_msg>:
{
    82f2:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    82f4:	f7f9 fb3e 	bl	1974 <z_log_msg2_claim>
}
    82f8:	bd08      	pop	{r3, pc}

000082fa <next_pending>:
{
    82fa:	b508      	push	{r3, lr}
		return z_log_msg2_pending();
    82fc:	f7f9 fb74 	bl	19e8 <z_log_msg2_pending>
}
    8300:	bd08      	pop	{r3, pc}

00008302 <z_log_get_tag>:
}
    8302:	2000      	movs	r0, #0
    8304:	4770      	bx	lr

00008306 <buffer_write>:
{
    8306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8308:	4607      	mov	r7, r0
    830a:	460d      	mov	r5, r1
    830c:	4614      	mov	r4, r2
    830e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    8310:	4632      	mov	r2, r6
    8312:	4621      	mov	r1, r4
    8314:	4628      	mov	r0, r5
    8316:	47b8      	blx	r7
		buf += processed;
    8318:	4405      	add	r5, r0
	} while (len != 0);
    831a:	1a24      	subs	r4, r4, r0
    831c:	d1f8      	bne.n	8310 <buffer_write+0xa>
}
    831e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008320 <color_prefix>:
{
    8320:	b508      	push	{r3, lr}
    8322:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    8324:	2201      	movs	r2, #1
    8326:	f7f9 fca7 	bl	1c78 <color_print>
}
    832a:	bd08      	pop	{r3, pc}

0000832c <color_postfix>:
{
    832c:	b508      	push	{r3, lr}
    832e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    8330:	2200      	movs	r2, #0
    8332:	f7f9 fca1 	bl	1c78 <color_print>
}
    8336:	bd08      	pop	{r3, pc}

00008338 <postfix_print>:
{
    8338:	b538      	push	{r3, r4, r5, lr}
    833a:	4605      	mov	r5, r0
    833c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    833e:	f001 0101 	and.w	r1, r1, #1
    8342:	f7ff fff3 	bl	832c <color_postfix>
	newline_print(output, flags);
    8346:	4621      	mov	r1, r4
    8348:	4628      	mov	r0, r5
    834a:	f7f9 fcab 	bl	1ca4 <newline_print>
}
    834e:	bd38      	pop	{r3, r4, r5, pc}

00008350 <log_msg2_hexdump>:
{
    8350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8354:	b083      	sub	sp, #12
    8356:	4680      	mov	r8, r0
    8358:	460e      	mov	r6, r1
    835a:	4615      	mov	r5, r2
    835c:	461f      	mov	r7, r3
    835e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    8362:	462c      	mov	r4, r5
    8364:	2d10      	cmp	r5, #16
    8366:	bf28      	it	cs
    8368:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    836a:	f8cd 9000 	str.w	r9, [sp]
    836e:	463b      	mov	r3, r7
    8370:	4622      	mov	r2, r4
    8372:	4631      	mov	r1, r6
    8374:	4640      	mov	r0, r8
    8376:	f7f9 fca9 	bl	1ccc <hexdump_line_print>
		data += length;
    837a:	4426      	add	r6, r4
	} while (len);
    837c:	1b2d      	subs	r5, r5, r4
    837e:	d1f0      	bne.n	8362 <log_msg2_hexdump+0x12>
}
    8380:	b003      	add	sp, #12
    8382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00008386 <log_output_flush>:
{
    8386:	b510      	push	{r4, lr}
    8388:	4604      	mov	r4, r0
		     output->control_block->offset,
    838a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    838c:	6853      	ldr	r3, [r2, #4]
    838e:	6812      	ldr	r2, [r2, #0]
    8390:	6881      	ldr	r1, [r0, #8]
    8392:	6800      	ldr	r0, [r0, #0]
    8394:	f7ff ffb7 	bl	8306 <buffer_write>
	output->control_block->offset = 0;
    8398:	6863      	ldr	r3, [r4, #4]
    839a:	2200      	movs	r2, #0
    839c:	601a      	str	r2, [r3, #0]
}
    839e:	bd10      	pop	{r4, pc}

000083a0 <out_func>:
{
    83a0:	b538      	push	{r3, r4, r5, lr}
    83a2:	4605      	mov	r5, r0
    83a4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    83a6:	684b      	ldr	r3, [r1, #4]
    83a8:	681a      	ldr	r2, [r3, #0]
    83aa:	68cb      	ldr	r3, [r1, #12]
    83ac:	429a      	cmp	r2, r3
    83ae:	d00f      	beq.n	83d0 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
    83b0:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    83b2:	f3bf 8f5b 	dmb	ish
    83b6:	e853 2f00 	ldrex	r2, [r3]
    83ba:	1c51      	adds	r1, r2, #1
    83bc:	e843 1000 	strex	r0, r1, [r3]
    83c0:	2800      	cmp	r0, #0
    83c2:	d1f8      	bne.n	83b6 <out_func+0x16>
    83c4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    83c8:	68a3      	ldr	r3, [r4, #8]
    83ca:	549d      	strb	r5, [r3, r2]
}
    83cc:	2000      	movs	r0, #0
    83ce:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    83d0:	4608      	mov	r0, r1
    83d2:	f7ff ffd8 	bl	8386 <log_output_flush>
    83d6:	e7eb      	b.n	83b0 <out_func+0x10>

000083d8 <cr_out_func>:
{
    83d8:	b538      	push	{r3, r4, r5, lr}
    83da:	4604      	mov	r4, r0
    83dc:	460d      	mov	r5, r1
	out_func(c, ctx);
    83de:	f7ff ffdf 	bl	83a0 <out_func>
	if (c == '\n') {
    83e2:	2c0a      	cmp	r4, #10
    83e4:	d001      	beq.n	83ea <cr_out_func+0x12>
}
    83e6:	2000      	movs	r0, #0
    83e8:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    83ea:	4629      	mov	r1, r5
    83ec:	200d      	movs	r0, #13
    83ee:	f7ff ffd7 	bl	83a0 <out_func>
    83f2:	e7f8      	b.n	83e6 <cr_out_func+0xe>

000083f4 <z_log_msg2_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
    83f4:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    83f6:	b198      	cbz	r0, 8420 <z_log_msg2_finalize+0x2c>
    83f8:	460e      	mov	r6, r1
    83fa:	4614      	mov	r4, r2
    83fc:	4619      	mov	r1, r3
    83fe:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
    8400:	b143      	cbz	r3, 8414 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    8402:	f100 0310 	add.w	r3, r0, #16
    8406:	f3c2 2049 	ubfx	r0, r2, #9, #10

		memcpy(d, data, desc.data_len);
    840a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    840e:	4418      	add	r0, r3
    8410:	f000 f952 	bl	86b8 <memcpy>
	}

	msg->hdr.desc = desc;
    8414:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    8416:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    8418:	4628      	mov	r0, r5
    841a:	f7f9 fb5f 	bl	1adc <z_log_msg2_commit>
}
    841e:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    8420:	f7f9 fa24 	bl	186c <z_log_dropped>
		return;
    8424:	e7fb      	b.n	841e <z_log_msg2_finalize+0x2a>

00008426 <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
    8426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    842a:	b086      	sub	sp, #24
    842c:	4605      	mov	r5, r0
    842e:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg2_desc out_desc = desc;
    8430:	460f      	mov	r7, r1
	int inlen = desc.package_len;
    8432:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg2 *msg;

	if (inlen > 0) {
    8436:	b34c      	cbz	r4, 848c <z_impl_z_log_msg2_static_create+0x66>
    8438:	4690      	mov	r8, r2
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    843a:	2304      	movs	r3, #4
    843c:	9302      	str	r3, [sp, #8]
    843e:	ab04      	add	r3, sp, #16
    8440:	9301      	str	r3, [sp, #4]
    8442:	2302      	movs	r3, #2
    8444:	9300      	str	r3, [sp, #0]
    8446:	2300      	movs	r3, #0
    8448:	461a      	mov	r2, r3
    844a:	4621      	mov	r1, r4
    844c:	4640      	mov	r0, r8
    844e:	f7f8 fa9b 	bl	988 <cbprintf_package_copy>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    8452:	f3c0 0909 	ubfx	r9, r0, #0, #10
    8456:	f369 2752 	bfi	r7, r9, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    845a:	f3c7 40cb 	ubfx	r0, r7, #19, #12
    845e:	4448      	add	r0, r9
    8460:	3017      	adds	r0, #23
    8462:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    8466:	0880      	lsrs	r0, r0, #2
    8468:	f7f9 fa7a 	bl	1960 <z_log_msg2_alloc>
		if (msg) {
    846c:	4682      	mov	sl, r0
    846e:	b1b8      	cbz	r0, 84a0 <z_impl_z_log_msg2_static_create+0x7a>
			len = cbprintf_package_copy(package, inlen,
    8470:	2304      	movs	r3, #4
    8472:	9302      	str	r3, [sp, #8]
    8474:	ab04      	add	r3, sp, #16
    8476:	9301      	str	r3, [sp, #4]
    8478:	2302      	movs	r3, #2
    847a:	9300      	str	r3, [sp, #0]
    847c:	464b      	mov	r3, r9
    847e:	f100 0210 	add.w	r2, r0, #16
    8482:	4621      	mov	r1, r4
    8484:	4640      	mov	r0, r8
    8486:	f7f8 fa7f 	bl	988 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    848a:	e009      	b.n	84a0 <z_impl_z_log_msg2_static_create+0x7a>
    848c:	f3c1 41cb 	ubfx	r1, r1, #19, #12
    8490:	440c      	add	r4, r1
    8492:	3417      	adds	r4, #23
    8494:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    8498:	08a0      	lsrs	r0, r4, #2
    849a:	f7f9 fa61 	bl	1960 <z_log_msg2_alloc>
    849e:	4682      	mov	sl, r0
	}

	z_log_msg2_finalize(msg, source, out_desc, data);
    84a0:	4633      	mov	r3, r6
    84a2:	463a      	mov	r2, r7
    84a4:	4629      	mov	r1, r5
    84a6:	4650      	mov	r0, sl
    84a8:	f7ff ffa4 	bl	83f4 <z_log_msg2_finalize>
}
    84ac:	b006      	add	sp, #24
    84ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000084b2 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    84b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84b6:	b085      	sub	sp, #20
    84b8:	4681      	mov	r9, r0
    84ba:	460d      	mov	r5, r1
    84bc:	4690      	mov	r8, r2
    84be:	461e      	mov	r6, r3
    84c0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    84c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
    84c6:	b3bf      	cbz	r7, 8538 <z_impl_z_log_msg2_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
    84c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    84ca:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    84cc:	9300      	str	r3, [sp, #0]
    84ce:	463b      	mov	r3, r7
    84d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    84d2:	2110      	movs	r1, #16
    84d4:	2000      	movs	r0, #0
    84d6:	f7f7 fff9 	bl	4cc <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    84da:	4682      	mov	sl, r0
    84dc:	eb00 030b 	add.w	r3, r0, fp
    84e0:	3317      	adds	r3, #23
    84e2:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    84e6:	2400      	movs	r4, #0
    84e8:	f36f 0400 	bfc	r4, #0, #1
    84ec:	f36f 0441 	bfc	r4, #1, #1
    84f0:	f36f 0482 	bfc	r4, #2, #1
    84f4:	f369 04c5 	bfi	r4, r9, #3, #3
    84f8:	f368 1488 	bfi	r4, r8, #6, #3
    84fc:	f360 2452 	bfi	r4, r0, #9, #10
    8500:	f36b 44de 	bfi	r4, fp, #19, #12
    8504:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    8508:	0898      	lsrs	r0, r3, #2
    850a:	f7f9 fa29 	bl	1960 <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    850e:	4680      	mov	r8, r0
    8510:	b148      	cbz	r0, 8526 <z_impl_z_log_msg2_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    8512:	3010      	adds	r0, #16
    8514:	d007      	beq.n	8526 <z_impl_z_log_msg2_runtime_vcreate+0x74>
    8516:	b137      	cbz	r7, 8526 <z_impl_z_log_msg2_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    8518:	9b11      	ldr	r3, [sp, #68]	; 0x44
    851a:	9300      	str	r3, [sp, #0]
    851c:	463b      	mov	r3, r7
    851e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8520:	4651      	mov	r1, sl
    8522:	f7f7 ffd3 	bl	4cc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    8526:	4633      	mov	r3, r6
    8528:	4622      	mov	r2, r4
    852a:	4629      	mov	r1, r5
    852c:	4640      	mov	r0, r8
    852e:	f7ff ff61 	bl	83f4 <z_log_msg2_finalize>
	}
}
    8532:	b005      	add	sp, #20
    8534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    8538:	2000      	movs	r0, #0
    853a:	e7ce      	b.n	84da <z_impl_z_log_msg2_runtime_vcreate+0x28>

0000853c <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    853c:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
    853e:	f7f9 fe35 	bl	21ac <__do_global_ctors_aux>
	__do_init_array_aux();
    8542:	f7f9 fe25 	bl	2190 <__do_init_array_aux>
}
    8546:	bd08      	pop	{r3, pc}

00008548 <abort_function>:
{
    8548:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    854a:	2000      	movs	r0, #0
    854c:	f7f9 f8d4 	bl	16f8 <sys_reboot>

00008550 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8550:	b538      	push	{r3, r4, r5, lr}
    8552:	4604      	mov	r4, r0

	if (esf != NULL) {
    8554:	460d      	mov	r5, r1
    8556:	b111      	cbz	r1, 855e <z_arm_fatal_error+0xe>
		esf_dump(esf);
    8558:	4608      	mov	r0, r1
    855a:	f7fa f8a9 	bl	26b0 <esf_dump>
	}
	z_fatal_error(reason, esf);
    855e:	4629      	mov	r1, r5
    8560:	4620      	mov	r0, r4
    8562:	f7fd fcc1 	bl	5ee8 <z_fatal_error>
}
    8566:	bd38      	pop	{r3, r4, r5, pc}

00008568 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8568:	b508      	push	{r3, lr}
    856a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    856c:	6800      	ldr	r0, [r0, #0]
    856e:	f7ff ffef 	bl	8550 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    8572:	bd08      	pop	{r3, pc}

00008574 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    8574:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8576:	2100      	movs	r1, #0
    8578:	2001      	movs	r0, #1
    857a:	f7ff ffe9 	bl	8550 <z_arm_fatal_error>
}
    857e:	bd08      	pop	{r3, pc}

00008580 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    8580:	b508      	push	{r3, lr}
	handler();
    8582:	f7fa f9f3 	bl	296c <z_SysNmiOnReset>
	z_arm_int_exit();
    8586:	f7fa fae9 	bl	2b5c <z_arm_exc_exit>
}
    858a:	bd08      	pop	{r3, pc}

0000858c <memory_fault_recoverable>:
}
    858c:	2000      	movs	r0, #0
    858e:	4770      	bx	lr

00008590 <fault_handle>:
{
    8590:	b508      	push	{r3, lr}
	*recoverable = false;
    8592:	2300      	movs	r3, #0
    8594:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    8596:	1ecb      	subs	r3, r1, #3
    8598:	2b09      	cmp	r3, #9
    859a:	d81a      	bhi.n	85d2 <fault_handle+0x42>
    859c:	e8df f003 	tbb	[pc, r3]
    85a0:	110d0905 	.word	0x110d0905
    85a4:	19191919 	.word	0x19191919
    85a8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    85aa:	4611      	mov	r1, r2
    85ac:	f7fb f828 	bl	3600 <hard_fault>
}
    85b0:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    85b2:	2100      	movs	r1, #0
    85b4:	f7fa fe7a 	bl	32ac <mem_manage_fault>
		break;
    85b8:	e7fa      	b.n	85b0 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    85ba:	2100      	movs	r1, #0
    85bc:	f7fa fadc 	bl	2b78 <bus_fault>
		break;
    85c0:	e7f6      	b.n	85b0 <fault_handle+0x20>
		reason = usage_fault(esf);
    85c2:	f7fa fc89 	bl	2ed8 <usage_fault>
		break;
    85c6:	e7f3      	b.n	85b0 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    85c8:	4611      	mov	r1, r2
    85ca:	f7fa fdcf 	bl	316c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    85ce:	2000      	movs	r0, #0
		break;
    85d0:	e7ee      	b.n	85b0 <fault_handle+0x20>
		reserved_exception(esf, fault);
    85d2:	f7fa fdfb 	bl	31cc <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    85d6:	2000      	movs	r0, #0
	return reason;
    85d8:	e7ea      	b.n	85b0 <fault_handle+0x20>

000085da <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    85da:	6843      	ldr	r3, [r0, #4]
    85dc:	1e5a      	subs	r2, r3, #1
		&&
    85de:	4213      	tst	r3, r2
    85e0:	d106      	bne.n	85f0 <mpu_partition_is_valid+0x16>
		&&
    85e2:	2b1f      	cmp	r3, #31
    85e4:	d906      	bls.n	85f4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    85e6:	6803      	ldr	r3, [r0, #0]
		&&
    85e8:	421a      	tst	r2, r3
    85ea:	d005      	beq.n	85f8 <mpu_partition_is_valid+0x1e>
    85ec:	2000      	movs	r0, #0
    85ee:	4770      	bx	lr
    85f0:	2000      	movs	r0, #0
    85f2:	4770      	bx	lr
    85f4:	2000      	movs	r0, #0
    85f6:	4770      	bx	lr
    85f8:	2001      	movs	r0, #1
}
    85fa:	4770      	bx	lr

000085fc <mpu_configure_region>:
{
    85fc:	b500      	push	{lr}
    85fe:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    8600:	680b      	ldr	r3, [r1, #0]
    8602:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    8604:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8606:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    8608:	2b20      	cmp	r3, #32
    860a:	d912      	bls.n	8632 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    860c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8610:	d811      	bhi.n	8636 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    8612:	3b01      	subs	r3, #1
    8614:	fab3 f383 	clz	r3, r3
    8618:	f1c3 031f 	rsb	r3, r3, #31
    861c:	005b      	lsls	r3, r3, #1
    861e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8622:	4313      	orrs	r3, r2
    8624:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    8626:	a901      	add	r1, sp, #4
    8628:	f7fb fa6c 	bl	3b04 <region_allocate_and_init>
}
    862c:	b005      	add	sp, #20
    862e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    8632:	2308      	movs	r3, #8
    8634:	e7f5      	b.n	8622 <mpu_configure_region+0x26>
		return REGION_4G;
    8636:	233e      	movs	r3, #62	; 0x3e
    8638:	e7f3      	b.n	8622 <mpu_configure_region+0x26>

0000863a <arm_core_mpu_configure_static_mpu_regions>:
{
    863a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    863c:	f7fb fb1e 	bl	3c7c <mpu_configure_static_mpu_regions>
}
    8640:	bd08      	pop	{r3, pc}

00008642 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    8642:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    8644:	f7fb fb24 	bl	3c90 <mpu_configure_dynamic_mpu_regions>
}
    8648:	bd08      	pop	{r3, pc}

0000864a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    864a:	4602      	mov	r2, r0
    864c:	e002      	b.n	8654 <strcpy+0xa>
		*d = *s;
    864e:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    8652:	3101      	adds	r1, #1
	while (*s != '\0') {
    8654:	780b      	ldrb	r3, [r1, #0]
    8656:	2b00      	cmp	r3, #0
    8658:	d1f9      	bne.n	864e <strcpy+0x4>
	}

	*d = '\0';
    865a:	7013      	strb	r3, [r2, #0]

	return dest;
}
    865c:	4770      	bx	lr

0000865e <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    865e:	4603      	mov	r3, r0
    8660:	b1a2      	cbz	r2, 868c <strncpy+0x2e>
{
    8662:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    8664:	780c      	ldrb	r4, [r1, #0]
    8666:	b12c      	cbz	r4, 8674 <strncpy+0x16>
		*d = *s;
    8668:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    866c:	3101      	adds	r1, #1
		d++;
		n--;
    866e:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    8670:	2a00      	cmp	r2, #0
    8672:	d1f7      	bne.n	8664 <strncpy+0x6>
	}

	while (n > 0) {
    8674:	b122      	cbz	r2, 8680 <strncpy+0x22>
		*d = '\0';
    8676:	2100      	movs	r1, #0
    8678:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    867c:	3a01      	subs	r2, #1
    867e:	e7f9      	b.n	8674 <strncpy+0x16>
	}

	return dest;
}
    8680:	bc10      	pop	{r4}
    8682:	4770      	bx	lr
		*d = '\0';
    8684:	2100      	movs	r1, #0
    8686:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    868a:	3a01      	subs	r2, #1
	while (n > 0) {
    868c:	2a00      	cmp	r2, #0
    868e:	d1f9      	bne.n	8684 <strncpy+0x26>
    8690:	4770      	bx	lr

00008692 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8692:	4603      	mov	r3, r0
	size_t n = 0;
    8694:	2000      	movs	r0, #0

	while (*s != '\0') {
    8696:	e001      	b.n	869c <strlen+0xa>
		s++;
    8698:	3301      	adds	r3, #1
		n++;
    869a:	3001      	adds	r0, #1
	while (*s != '\0') {
    869c:	781a      	ldrb	r2, [r3, #0]
    869e:	2a00      	cmp	r2, #0
    86a0:	d1fa      	bne.n	8698 <strlen+0x6>
	}

	return n;
}
    86a2:	4770      	bx	lr

000086a4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    86a4:	4603      	mov	r3, r0
	size_t n = 0;
    86a6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    86a8:	e001      	b.n	86ae <strnlen+0xa>
		s++;
    86aa:	3301      	adds	r3, #1
		n++;
    86ac:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    86ae:	781a      	ldrb	r2, [r3, #0]
    86b0:	b10a      	cbz	r2, 86b6 <strnlen+0x12>
    86b2:	4288      	cmp	r0, r1
    86b4:	d3f9      	bcc.n	86aa <strnlen+0x6>
	}

	return n;
}
    86b6:	4770      	bx	lr

000086b8 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    86b8:	ea80 0301 	eor.w	r3, r0, r1
    86bc:	f013 0f03 	tst.w	r3, #3
    86c0:	d001      	beq.n	86c6 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    86c2:	4603      	mov	r3, r0
    86c4:	e023      	b.n	870e <memcpy+0x56>
    86c6:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    86c8:	f013 0f03 	tst.w	r3, #3
    86cc:	d00f      	beq.n	86ee <memcpy+0x36>
			if (n == 0) {
    86ce:	b30a      	cbz	r2, 8714 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    86d0:	f811 cb01 	ldrb.w	ip, [r1], #1
    86d4:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    86d8:	3a01      	subs	r2, #1
    86da:	e7f5      	b.n	86c8 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    86dc:	f811 cb01 	ldrb.w	ip, [r1], #1
    86e0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    86e4:	3a01      	subs	r2, #1
	while (n > 0) {
    86e6:	2a00      	cmp	r2, #0
    86e8:	d1f8      	bne.n	86dc <memcpy+0x24>
	}

	return d;
}
    86ea:	bc10      	pop	{r4}
    86ec:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    86ee:	2a03      	cmp	r2, #3
    86f0:	d90d      	bls.n	870e <memcpy+0x56>
{
    86f2:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    86f4:	f851 4b04 	ldr.w	r4, [r1], #4
    86f8:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    86fc:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    86fe:	2a03      	cmp	r2, #3
    8700:	d8f8      	bhi.n	86f4 <memcpy+0x3c>
    8702:	e7f0      	b.n	86e6 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    8704:	f811 cb01 	ldrb.w	ip, [r1], #1
    8708:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    870c:	3a01      	subs	r2, #1
	while (n > 0) {
    870e:	2a00      	cmp	r2, #0
    8710:	d1f8      	bne.n	8704 <memcpy+0x4c>
    8712:	4770      	bx	lr
}
    8714:	4770      	bx	lr

00008716 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8716:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    871a:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    871c:	e002      	b.n	8724 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    871e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8722:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8724:	f013 0f03 	tst.w	r3, #3
    8728:	d002      	beq.n	8730 <memset+0x1a>
		if (n == 0) {
    872a:	2a00      	cmp	r2, #0
    872c:	d1f7      	bne.n	871e <memset+0x8>
    872e:	e00f      	b.n	8750 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    8730:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    8732:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    8736:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    873a:	2a03      	cmp	r2, #3
    873c:	d906      	bls.n	874c <memset+0x36>
		*(d_word++) = c_word;
    873e:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    8742:	3a04      	subs	r2, #4
    8744:	e7f9      	b.n	873a <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    8746:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    874a:	3a01      	subs	r2, #1
	while (n > 0) {
    874c:	2a00      	cmp	r2, #0
    874e:	d1fa      	bne.n	8746 <memset+0x30>
	}

	return buf;
}
    8750:	4770      	bx	lr

00008752 <_stdout_hook_default>:
}
    8752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8756:	4770      	bx	lr

00008758 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    875c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8760:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    8764:	2a08      	cmp	r2, #8
    8766:	d001      	beq.n	876c <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    8768:	2000      	movs	r0, #0
    876a:	4770      	bx	lr
                switch(var2)
    876c:	2b02      	cmp	r3, #2
    876e:	d001      	beq.n	8774 <nrf52_errata_197+0x1c>
                        return false;
    8770:	2000      	movs	r0, #0
    8772:	4770      	bx	lr
                        return true;
    8774:	2001      	movs	r0, #1
    #endif
}
    8776:	4770      	bx	lr

00008778 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    8778:	2806      	cmp	r0, #6
    877a:	d000      	beq.n	877e <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    877c:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    877e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8782:	2201      	movs	r2, #1
    8784:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8788:	f3bf 8f4f 	dsb	sy
        __WFE();
    878c:	bf20      	wfe
    while (true)
    878e:	e7fd      	b.n	878c <pm_state_set+0x14>

00008790 <pm_state_exit_post_ops>:
    8790:	2300      	movs	r3, #0
    8792:	f383 8811 	msr	BASEPRI, r3
    8796:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    879a:	4770      	bx	lr

0000879c <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    879c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    879e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    87a2:	0089      	lsls	r1, r1, #2
    87a4:	3140      	adds	r1, #64	; 0x40
}
    87a6:	4408      	add	r0, r1
    87a8:	4770      	bx	lr

000087aa <get_sub_config>:
	const struct nrf_clock_control_config *config =
    87aa:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    87ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    87b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    87b4:	4770      	bx	lr

000087b6 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    87b6:	6900      	ldr	r0, [r0, #16]
}
    87b8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    87bc:	4770      	bx	lr

000087be <get_status>:
{
    87be:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    87c0:	b2c9      	uxtb	r1, r1
    87c2:	f7ff ffeb 	bl	879c <get_sub_data>
    87c6:	6880      	ldr	r0, [r0, #8]
}
    87c8:	f000 0007 	and.w	r0, r0, #7
    87cc:	bd08      	pop	{r3, pc}

000087ce <set_off_state>:
	__asm__ volatile(
    87ce:	f04f 0320 	mov.w	r3, #32
    87d2:	f3ef 8211 	mrs	r2, BASEPRI
    87d6:	f383 8812 	msr	BASEPRI_MAX, r3
    87da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    87de:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    87e0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    87e4:	d001      	beq.n	87ea <set_off_state+0x1c>
    87e6:	428b      	cmp	r3, r1
    87e8:	d107      	bne.n	87fa <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    87ea:	2301      	movs	r3, #1
    87ec:	6003      	str	r3, [r0, #0]
	int err = 0;
    87ee:	2000      	movs	r0, #0
	__asm__ volatile(
    87f0:	f382 8811 	msr	BASEPRI, r2
    87f4:	f3bf 8f6f 	isb	sy
}
    87f8:	4770      	bx	lr
		err = -EPERM;
    87fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    87fe:	e7f7      	b.n	87f0 <set_off_state+0x22>

00008800 <set_starting_state>:
	__asm__ volatile(
    8800:	f04f 0320 	mov.w	r3, #32
    8804:	f3ef 8211 	mrs	r2, BASEPRI
    8808:	f383 8812 	msr	BASEPRI_MAX, r3
    880c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8810:	6803      	ldr	r3, [r0, #0]
    8812:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8816:	f003 0307 	and.w	r3, r3, #7
    881a:	2b01      	cmp	r3, #1
    881c:	d008      	beq.n	8830 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    881e:	458c      	cmp	ip, r1
    8820:	d009      	beq.n	8836 <set_starting_state+0x36>
		err = -EPERM;
    8822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    8826:	f382 8811 	msr	BASEPRI, r2
    882a:	f3bf 8f6f 	isb	sy
}
    882e:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8830:	6001      	str	r1, [r0, #0]
	int err = 0;
    8832:	2000      	movs	r0, #0
    8834:	e7f7      	b.n	8826 <set_starting_state+0x26>
		err = -EALREADY;
    8836:	f06f 0077 	mvn.w	r0, #119	; 0x77
    883a:	e7f4      	b.n	8826 <set_starting_state+0x26>

0000883c <set_on_state>:
	__asm__ volatile(
    883c:	f04f 0320 	mov.w	r3, #32
    8840:	f3ef 8211 	mrs	r2, BASEPRI
    8844:	f383 8812 	msr	BASEPRI_MAX, r3
    8848:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    884c:	6803      	ldr	r3, [r0, #0]
    884e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8852:	f043 0302 	orr.w	r3, r3, #2
    8856:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8858:	f382 8811 	msr	BASEPRI, r2
    885c:	f3bf 8f6f 	isb	sy
}
    8860:	4770      	bx	lr

00008862 <clkstarted_handle>:
{
    8862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8864:	4606      	mov	r6, r0
    8866:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    8868:	f7ff ff98 	bl	879c <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    886c:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    886e:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    8870:	2300      	movs	r3, #0
    8872:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    8876:	f7ff ffe1 	bl	883c <set_on_state>
	if (callback) {
    887a:	b11d      	cbz	r5, 8884 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    887c:	463a      	mov	r2, r7
    887e:	4621      	mov	r1, r4
    8880:	4630      	mov	r0, r6
    8882:	47a8      	blx	r5
}
    8884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008886 <stop>:
{
    8886:	b570      	push	{r4, r5, r6, lr}
    8888:	4606      	mov	r6, r0
    888a:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    888c:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    888e:	4621      	mov	r1, r4
    8890:	f7ff ff84 	bl	879c <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    8894:	4629      	mov	r1, r5
    8896:	3008      	adds	r0, #8
    8898:	f7ff ff99 	bl	87ce <set_off_state>
	if (err < 0) {
    889c:	2800      	cmp	r0, #0
    889e:	db06      	blt.n	88ae <stop+0x28>
	get_sub_config(dev, type)->stop();
    88a0:	4621      	mov	r1, r4
    88a2:	4630      	mov	r0, r6
    88a4:	f7ff ff81 	bl	87aa <get_sub_config>
    88a8:	6843      	ldr	r3, [r0, #4]
    88aa:	4798      	blx	r3
	return 0;
    88ac:	2000      	movs	r0, #0
}
    88ae:	bd70      	pop	{r4, r5, r6, pc}

000088b0 <api_stop>:
{
    88b0:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    88b2:	2280      	movs	r2, #128	; 0x80
    88b4:	f7ff ffe7 	bl	8886 <stop>
}
    88b8:	bd08      	pop	{r3, pc}

000088ba <async_start>:
{
    88ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88be:	4606      	mov	r6, r0
    88c0:	4690      	mov	r8, r2
    88c2:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    88c4:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    88c6:	4629      	mov	r1, r5
    88c8:	f7ff ff68 	bl	879c <get_sub_data>
    88cc:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    88ce:	9906      	ldr	r1, [sp, #24]
    88d0:	3008      	adds	r0, #8
    88d2:	f7ff ff95 	bl	8800 <set_starting_state>
	if (err < 0) {
    88d6:	2800      	cmp	r0, #0
    88d8:	db09      	blt.n	88ee <async_start+0x34>
	subdata->cb = cb;
    88da:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    88de:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    88e0:	4629      	mov	r1, r5
    88e2:	4630      	mov	r0, r6
    88e4:	f7ff ff61 	bl	87aa <get_sub_config>
    88e8:	6803      	ldr	r3, [r0, #0]
    88ea:	4798      	blx	r3
	return 0;
    88ec:	2000      	movs	r0, #0
}
    88ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000088f2 <api_start>:
{
    88f2:	b510      	push	{r4, lr}
    88f4:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    88f6:	2480      	movs	r4, #128	; 0x80
    88f8:	9400      	str	r4, [sp, #0]
    88fa:	f7ff ffde 	bl	88ba <async_start>
}
    88fe:	b002      	add	sp, #8
    8900:	bd10      	pop	{r4, pc}

00008902 <onoff_started_callback>:
{
    8902:	b510      	push	{r4, lr}
    8904:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    8906:	b2c9      	uxtb	r1, r1
    8908:	f7ff ff55 	bl	87b6 <get_onoff_manager>
	notify(mgr, 0);
    890c:	2100      	movs	r1, #0
    890e:	47a0      	blx	r4
}
    8910:	bd10      	pop	{r4, pc}

00008912 <hfclk_start>:
{
    8912:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    8914:	2001      	movs	r0, #1
    8916:	f000 fbe4 	bl	90e2 <nrfx_clock_start>
}
    891a:	bd08      	pop	{r3, pc}

0000891c <lfclk_start>:
{
    891c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    891e:	2000      	movs	r0, #0
    8920:	f000 fbdf 	bl	90e2 <nrfx_clock_start>
}
    8924:	bd08      	pop	{r3, pc}

00008926 <hfclk_stop>:
{
    8926:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    8928:	2001      	movs	r0, #1
    892a:	f000 fc2a 	bl	9182 <nrfx_clock_stop>
}
    892e:	bd08      	pop	{r3, pc}

00008930 <lfclk_stop>:
{
    8930:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8932:	2000      	movs	r0, #0
    8934:	f000 fc25 	bl	9182 <nrfx_clock_stop>
}
    8938:	bd08      	pop	{r3, pc}

0000893a <blocking_start_callback>:
{
    893a:	b508      	push	{r3, lr}
    893c:	4610      	mov	r0, r2
    893e:	f7fd ff0d 	bl	675c <z_impl_k_sem_give>
}
    8942:	bd08      	pop	{r3, pc}

00008944 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    8944:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    8948:	f020 0001 	bic.w	r0, r0, #1
    894c:	0540      	lsls	r0, r0, #21
    894e:	0d40      	lsrs	r0, r0, #21
    8950:	f240 2306 	movw	r3, #518	; 0x206
    8954:	4298      	cmp	r0, r3
    8956:	d033      	beq.n	89c0 <get_drive+0x7c>
    8958:	d816      	bhi.n	8988 <get_drive+0x44>
    895a:	2806      	cmp	r0, #6
    895c:	d02c      	beq.n	89b8 <get_drive+0x74>
    895e:	d906      	bls.n	896e <get_drive+0x2a>
    8960:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    8964:	d10d      	bne.n	8982 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    8966:	2301      	movs	r3, #1
    8968:	700b      	strb	r3, [r1, #0]
	int err = 0;
    896a:	2000      	movs	r0, #0
		break;
    896c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    896e:	b300      	cbz	r0, 89b2 <get_drive+0x6e>
    8970:	2802      	cmp	r0, #2
    8972:	d103      	bne.n	897c <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    8974:	2304      	movs	r3, #4
    8976:	700b      	strb	r3, [r1, #0]
	int err = 0;
    8978:	2000      	movs	r0, #0
		break;
    897a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    897c:	f06f 0015 	mvn.w	r0, #21
    8980:	4770      	bx	lr
    8982:	f06f 0015 	mvn.w	r0, #21
    8986:	4770      	bx	lr
    8988:	f240 4302 	movw	r3, #1026	; 0x402
    898c:	4298      	cmp	r0, r3
    898e:	d01b      	beq.n	89c8 <get_drive+0x84>
    8990:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    8994:	d103      	bne.n	899e <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    8996:	2303      	movs	r3, #3
    8998:	700b      	strb	r3, [r1, #0]
	int err = 0;
    899a:	2000      	movs	r0, #0
		break;
    899c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    899e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    89a2:	d103      	bne.n	89ac <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    89a4:	2302      	movs	r3, #2
    89a6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    89a8:	2000      	movs	r0, #0
		break;
    89aa:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    89ac:	f06f 0015 	mvn.w	r0, #21
    89b0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    89b2:	2000      	movs	r0, #0
    89b4:	7008      	strb	r0, [r1, #0]
		break;
    89b6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    89b8:	2306      	movs	r3, #6
    89ba:	700b      	strb	r3, [r1, #0]
	int err = 0;
    89bc:	2000      	movs	r0, #0
		break;
    89be:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    89c0:	2307      	movs	r3, #7
    89c2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    89c4:	2000      	movs	r0, #0
		break;
    89c6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    89c8:	2305      	movs	r3, #5
    89ca:	700b      	strb	r3, [r1, #0]
	int err = 0;
    89cc:	2000      	movs	r0, #0
}
    89ce:	4770      	bx	lr

000089d0 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    89d0:	f010 0f10 	tst.w	r0, #16
    89d4:	d104      	bne.n	89e0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    89d6:	f010 0f20 	tst.w	r0, #32
    89da:	d103      	bne.n	89e4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    89dc:	2000      	movs	r0, #0
    89de:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    89e0:	2003      	movs	r0, #3
    89e2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    89e4:	2001      	movs	r0, #1
}
    89e6:	4770      	bx	lr

000089e8 <gpio_nrfx_port_get_raw>:
	return port->config;
    89e8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    89ea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    89ec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    89f0:	600b      	str	r3, [r1, #0]
}
    89f2:	2000      	movs	r0, #0
    89f4:	4770      	bx	lr

000089f6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    89f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    89f8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    89fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    89fe:	4042      	eors	r2, r0
    8a00:	400a      	ands	r2, r1
    8a02:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8a04:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8a08:	2000      	movs	r0, #0
    8a0a:	4770      	bx	lr

00008a0c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    8a0c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8a0e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    8a10:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    8a14:	2000      	movs	r0, #0
    8a16:	4770      	bx	lr

00008a18 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    8a18:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8a1a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    8a1c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    8a20:	2000      	movs	r0, #0
    8a22:	4770      	bx	lr

00008a24 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    8a24:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8a26:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8a28:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8a2c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8a2e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8a32:	2000      	movs	r0, #0
    8a34:	4770      	bx	lr

00008a36 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    8a36:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    8a3a:	d007      	beq.n	8a4c <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    8a3c:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    8a40:	d00d      	beq.n	8a5e <get_trigger+0x28>
    8a42:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    8a46:	d008      	beq.n	8a5a <get_trigger+0x24>
    8a48:	2001      	movs	r0, #1
}
    8a4a:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    8a4c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    8a50:	d001      	beq.n	8a56 <get_trigger+0x20>
    8a52:	2005      	movs	r0, #5
    8a54:	4770      	bx	lr
    8a56:	2004      	movs	r0, #4
    8a58:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    8a5a:	2002      	movs	r0, #2
    8a5c:	4770      	bx	lr
    8a5e:	2003      	movs	r0, #3
    8a60:	4770      	bx	lr

00008a62 <gpio_nrfx_manage_callback>:
{
    8a62:	b410      	push	{r4}
	return port->data;
    8a64:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    8a66:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
    8a6a:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    8a6c:	b1fb      	cbz	r3, 8aae <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8a6e:	2000      	movs	r0, #0
    8a70:	e00d      	b.n	8a8e <gpio_nrfx_manage_callback+0x2c>
	return node->next;
    8a72:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    8a74:	6063      	str	r3, [r4, #4]
	return list->tail;
    8a76:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    8a7a:	4281      	cmp	r1, r0
    8a7c:	d112      	bne.n	8aa4 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    8a7e:	f8cc 3004 	str.w	r3, [ip, #4]
}
    8a82:	e00f      	b.n	8aa4 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    8a84:	f8cc 0004 	str.w	r0, [ip, #4]
}
    8a88:	e00c      	b.n	8aa4 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8a8a:	4618      	mov	r0, r3
    8a8c:	681b      	ldr	r3, [r3, #0]
    8a8e:	b163      	cbz	r3, 8aaa <gpio_nrfx_manage_callback+0x48>
    8a90:	4299      	cmp	r1, r3
    8a92:	d1fa      	bne.n	8a8a <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
    8a94:	2800      	cmp	r0, #0
    8a96:	d0ec      	beq.n	8a72 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    8a98:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    8a9a:	6003      	str	r3, [r0, #0]
	return list->tail;
    8a9c:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    8aa0:	4299      	cmp	r1, r3
    8aa2:	d0ef      	beq.n	8a84 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
    8aa4:	2300      	movs	r3, #0
    8aa6:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8aa8:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    8aaa:	b903      	cbnz	r3, 8aae <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
    8aac:	b162      	cbz	r2, 8ac8 <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
    8aae:	b172      	cbz	r2, 8ace <gpio_nrfx_manage_callback+0x6c>
	return list->head;
    8ab0:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
    8ab2:	600b      	str	r3, [r1, #0]
	list->head = node;
    8ab4:	6061      	str	r1, [r4, #4]
	return list->tail;
    8ab6:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
    8aba:	b10b      	cbz	r3, 8ac0 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    8abc:	2000      	movs	r0, #0
    8abe:	e007      	b.n	8ad0 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
    8ac0:	f8cc 1004 	str.w	r1, [ip, #4]
    8ac4:	2000      	movs	r0, #0
}
    8ac6:	e003      	b.n	8ad0 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
    8ac8:	f06f 0015 	mvn.w	r0, #21
    8acc:	e000      	b.n	8ad0 <gpio_nrfx_manage_callback+0x6e>
	return 0;
    8ace:	2000      	movs	r0, #0
}
    8ad0:	bc10      	pop	{r4}
    8ad2:	4770      	bx	lr

00008ad4 <nrfx_gpio_handler>:
{
    8ad4:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    8ad6:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    8ada:	0940      	lsrs	r0, r0, #5
    8adc:	f7fb fb2e 	bl	413c <get_dev>
	if (port == NULL) {
    8ae0:	b1d8      	cbz	r0, 8b1a <nrfx_gpio_handler+0x46>
    8ae2:	4606      	mov	r6, r0
	return port->data;
    8ae4:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    8ae6:	2501      	movs	r5, #1
    8ae8:	40a5      	lsls	r5, r4
	return list->head;
    8aea:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8aec:	b119      	cbz	r1, 8af6 <nrfx_gpio_handler+0x22>
    8aee:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    8af0:	b149      	cbz	r1, 8b06 <nrfx_gpio_handler+0x32>
	return node->next;
    8af2:	680c      	ldr	r4, [r1, #0]
    8af4:	e007      	b.n	8b06 <nrfx_gpio_handler+0x32>
    8af6:	460c      	mov	r4, r1
    8af8:	e005      	b.n	8b06 <nrfx_gpio_handler+0x32>
    8afa:	b164      	cbz	r4, 8b16 <nrfx_gpio_handler+0x42>
    8afc:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    8afe:	b104      	cbz	r4, 8b02 <nrfx_gpio_handler+0x2e>
	return node->next;
    8b00:	6823      	ldr	r3, [r4, #0]
    8b02:	4621      	mov	r1, r4
    8b04:	461c      	mov	r4, r3
    8b06:	b141      	cbz	r1, 8b1a <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    8b08:	688a      	ldr	r2, [r1, #8]
    8b0a:	402a      	ands	r2, r5
    8b0c:	d0f5      	beq.n	8afa <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    8b0e:	684b      	ldr	r3, [r1, #4]
    8b10:	4630      	mov	r0, r6
    8b12:	4798      	blx	r3
    8b14:	e7f1      	b.n	8afa <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8b16:	4623      	mov	r3, r4
    8b18:	e7f3      	b.n	8b02 <nrfx_gpio_handler+0x2e>
}
    8b1a:	bd70      	pop	{r4, r5, r6, pc}

00008b1c <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    8b1c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8b1e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    8b20:	f04f 0120 	mov.w	r1, #32
    8b24:	f3ef 8211 	mrs	r2, BASEPRI
    8b28:	f381 8812 	msr	BASEPRI_MAX, r1
    8b2c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8b30:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8b34:	b131      	cbz	r1, 8b44 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8b36:	2100      	movs	r1, #0
    8b38:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    8b3c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8b40:	2101      	movs	r1, #1
    8b42:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    8b44:	f382 8811 	msr	BASEPRI, r2
    8b48:	f3bf 8f6f 	isb	sy
}
    8b4c:	4770      	bx	lr

00008b4e <uarte_nrfx_isr_int>:
{
    8b4e:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    8b50:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    8b52:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    8b54:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8b58:	f413 7f80 	tst.w	r3, #256	; 0x100
    8b5c:	d002      	beq.n	8b64 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8b5e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8b62:	b9d3      	cbnz	r3, 8b9a <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8b64:	686b      	ldr	r3, [r5, #4]
    8b66:	f013 0f10 	tst.w	r3, #16
    8b6a:	d015      	beq.n	8b98 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    8b6c:	f04f 0220 	mov.w	r2, #32
    8b70:	f3ef 8311 	mrs	r3, BASEPRI
    8b74:	f382 8812 	msr	BASEPRI_MAX, r2
    8b78:	f3bf 8f6f 	isb	sy
    8b7c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8b80:	b112      	cbz	r2, 8b88 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8b82:	2200      	movs	r2, #0
    8b84:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    8b88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8b8c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    8b90:	f383 8811 	msr	BASEPRI, r3
    8b94:	f3bf 8f6f 	isb	sy
}
    8b98:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    8b9a:	f7ff ffbf 	bl	8b1c <endtx_isr>
    8b9e:	e7e1      	b.n	8b64 <uarte_nrfx_isr_int+0x16>

00008ba0 <uarte_nrfx_configure>:
{
    8ba0:	b570      	push	{r4, r5, r6, lr}
    8ba2:	b082      	sub	sp, #8
    8ba4:	4606      	mov	r6, r0
    8ba6:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    8ba8:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    8baa:	794b      	ldrb	r3, [r1, #5]
    8bac:	2b01      	cmp	r3, #1
    8bae:	d006      	beq.n	8bbe <uarte_nrfx_configure+0x1e>
    8bb0:	2b03      	cmp	r3, #3
    8bb2:	d011      	beq.n	8bd8 <uarte_nrfx_configure+0x38>
    8bb4:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    8bb8:	4618      	mov	r0, r3
    8bba:	b002      	add	sp, #8
    8bbc:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    8bbe:	2300      	movs	r3, #0
    8bc0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    8bc4:	79a3      	ldrb	r3, [r4, #6]
    8bc6:	2b03      	cmp	r3, #3
    8bc8:	d137      	bne.n	8c3a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    8bca:	79e3      	ldrb	r3, [r4, #7]
    8bcc:	b143      	cbz	r3, 8be0 <uarte_nrfx_configure+0x40>
    8bce:	2b01      	cmp	r3, #1
    8bd0:	d010      	beq.n	8bf4 <uarte_nrfx_configure+0x54>
    8bd2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8bd6:	e7ef      	b.n	8bb8 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    8bd8:	2310      	movs	r3, #16
    8bda:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    8bde:	e7f1      	b.n	8bc4 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    8be0:	2300      	movs	r3, #0
    8be2:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    8be6:	7923      	ldrb	r3, [r4, #4]
    8be8:	b143      	cbz	r3, 8bfc <uarte_nrfx_configure+0x5c>
    8bea:	2b02      	cmp	r3, #2
    8bec:	d021      	beq.n	8c32 <uarte_nrfx_configure+0x92>
    8bee:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8bf2:	e7e1      	b.n	8bb8 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    8bf4:	2301      	movs	r3, #1
    8bf6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    8bfa:	e7f4      	b.n	8be6 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    8bfc:	2300      	movs	r3, #0
    8bfe:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    8c02:	6821      	ldr	r1, [r4, #0]
    8c04:	4630      	mov	r0, r6
    8c06:	f7fb fbcf 	bl	43a8 <baudrate_set>
    8c0a:	4603      	mov	r3, r0
    8c0c:	b9c0      	cbnz	r0, 8c40 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    8c0e:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    8c10:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    8c12:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    8c16:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    8c1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8c1e:	4331      	orrs	r1, r6
    8c20:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    8c22:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    8c26:	3504      	adds	r5, #4
    8c28:	e894 0003 	ldmia.w	r4, {r0, r1}
    8c2c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    8c30:	e7c2      	b.n	8bb8 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    8c32:	230e      	movs	r3, #14
    8c34:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    8c38:	e7e3      	b.n	8c02 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    8c3a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8c3e:	e7bb      	b.n	8bb8 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    8c40:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8c44:	e7b8      	b.n	8bb8 <uarte_nrfx_configure+0x18>

00008c46 <uarte_nrfx_config_get>:
{
    8c46:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    8c48:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    8c4a:	3304      	adds	r3, #4
    8c4c:	e893 0003 	ldmia.w	r3, {r0, r1}
    8c50:	e882 0003 	stmia.w	r2, {r0, r1}
}
    8c54:	2000      	movs	r0, #0
    8c56:	4770      	bx	lr

00008c58 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    8c58:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8c5a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8c5c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8c60:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8c64:	4770      	bx	lr

00008c66 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    8c66:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8c68:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8c6a:	685b      	ldr	r3, [r3, #4]
    8c6c:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8c70:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8c74:	b929      	cbnz	r1, 8c82 <is_tx_ready+0x1c>
    8c76:	b933      	cbnz	r3, 8c86 <is_tx_ready+0x20>
    8c78:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    8c7c:	b92b      	cbnz	r3, 8c8a <is_tx_ready+0x24>
    8c7e:	2000      	movs	r0, #0
    8c80:	4770      	bx	lr
    8c82:	2001      	movs	r0, #1
    8c84:	4770      	bx	lr
    8c86:	2000      	movs	r0, #0
    8c88:	4770      	bx	lr
    8c8a:	2001      	movs	r0, #1
}
    8c8c:	4770      	bx	lr

00008c8e <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    8c8e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8c90:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8c92:	2208      	movs	r2, #8
    8c94:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    8c98:	4770      	bx	lr

00008c9a <tx_start>:
{
    8c9a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    8c9c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8c9e:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8ca0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8ca4:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ca8:	2200      	movs	r2, #0
    8caa:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    8cae:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    8cb2:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    8cb6:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8cba:	685b      	ldr	r3, [r3, #4]
    8cbc:	f013 0f10 	tst.w	r3, #16
    8cc0:	d102      	bne.n	8cc8 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8cc2:	2301      	movs	r3, #1
    8cc4:	60a3      	str	r3, [r4, #8]
}
    8cc6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    8cc8:	2101      	movs	r1, #1
    8cca:	f7ff ffe0 	bl	8c8e <uarte_enable>
    p_reg->INTENSET = mask;
    8cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    8cd2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    8cd6:	e7f4      	b.n	8cc2 <tx_start+0x28>

00008cd8 <uarte_nrfx_poll_in>:
{
    8cd8:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    8cda:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    8cdc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8cde:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ce0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8ce4:	b152      	cbz	r2, 8cfc <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    8ce6:	7c62      	ldrb	r2, [r4, #17]
    8ce8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8cea:	2000      	movs	r0, #0
    8cec:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8cf0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8cf4:	2201      	movs	r2, #1
    8cf6:	601a      	str	r2, [r3, #0]
}
    8cf8:	bc10      	pop	{r4}
    8cfa:	4770      	bx	lr
		return -1;
    8cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8d00:	e7fa      	b.n	8cf8 <uarte_nrfx_poll_in+0x20>

00008d02 <wait_tx_ready>:
{
    8d02:	b570      	push	{r4, r5, r6, lr}
    8d04:	4606      	mov	r6, r0
    8d06:	e014      	b.n	8d32 <wait_tx_ready+0x30>
		if (res) {
    8d08:	b17d      	cbz	r5, 8d2a <wait_tx_ready+0x28>
	__asm__ volatile(
    8d0a:	f04f 0320 	mov.w	r3, #32
    8d0e:	f3ef 8411 	mrs	r4, BASEPRI
    8d12:	f383 8812 	msr	BASEPRI_MAX, r3
    8d16:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    8d1a:	4630      	mov	r0, r6
    8d1c:	f7ff ffa3 	bl	8c66 <is_tx_ready>
    8d20:	b9a0      	cbnz	r0, 8d4c <wait_tx_ready+0x4a>
	__asm__ volatile(
    8d22:	f384 8811 	msr	BASEPRI, r4
    8d26:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    8d2a:	2021      	movs	r0, #33	; 0x21
    8d2c:	2100      	movs	r1, #0
    8d2e:	f7fe f90f 	bl	6f50 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    8d32:	2464      	movs	r4, #100	; 0x64
    8d34:	4630      	mov	r0, r6
    8d36:	f7ff ff96 	bl	8c66 <is_tx_ready>
    8d3a:	4605      	mov	r5, r0
    8d3c:	2800      	cmp	r0, #0
    8d3e:	d1e3      	bne.n	8d08 <wait_tx_ready+0x6>
    8d40:	2001      	movs	r0, #1
    8d42:	f000 f9a3 	bl	908c <nrfx_busy_wait>
    8d46:	3c01      	subs	r4, #1
    8d48:	d1f4      	bne.n	8d34 <wait_tx_ready+0x32>
    8d4a:	e7dd      	b.n	8d08 <wait_tx_ready+0x6>
}
    8d4c:	4620      	mov	r0, r4
    8d4e:	bd70      	pop	{r4, r5, r6, pc}

00008d50 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    8d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8d54:	b083      	sub	sp, #12
    8d56:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    8d58:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    8d5a:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    8d5c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8d60:	2100      	movs	r1, #0
    8d62:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    8d66:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    8d6a:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    8d6e:	aa01      	add	r2, sp, #4
    8d70:	4648      	mov	r0, r9
    8d72:	f000 f8e6 	bl	8f42 <pinctrl_lookup_state>
	if (ret < 0) {
    8d76:	1e04      	subs	r4, r0, #0
    8d78:	db07      	blt.n	8d8a <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    8d7a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    8d7c:	f8d9 2000 	ldr.w	r2, [r9]
    8d80:	7919      	ldrb	r1, [r3, #4]
    8d82:	6818      	ldr	r0, [r3, #0]
    8d84:	f7fb feae 	bl	4ae4 <pinctrl_configure_pins>
    8d88:	4604      	mov	r4, r0
	if (err < 0) {
    8d8a:	2c00      	cmp	r4, #0
    8d8c:	db35      	blt.n	8dfa <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    8d8e:	f108 0104 	add.w	r1, r8, #4
    8d92:	4628      	mov	r0, r5
    8d94:	f7ff ff04 	bl	8ba0 <uarte_nrfx_configure>
	if (err) {
    8d98:	4604      	mov	r4, r0
    8d9a:	bb70      	cbnz	r0, 8dfa <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    8d9c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    8d9e:	f013 0f02 	tst.w	r3, #2
    8da2:	d12e      	bne.n	8e02 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8da4:	2308      	movs	r3, #8
    8da6:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    8daa:	7a3b      	ldrb	r3, [r7, #8]
    8dac:	b95b      	cbnz	r3, 8dc6 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8dae:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    8db2:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8db6:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8dba:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    8dbe:	2301      	movs	r3, #1
    8dc0:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8dc4:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8dc6:	687b      	ldr	r3, [r7, #4]
    8dc8:	f013 0f02 	tst.w	r3, #2
    8dcc:	d103      	bne.n	8dd6 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    8dce:	f44f 7380 	mov.w	r3, #256	; 0x100
    8dd2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8dd6:	687b      	ldr	r3, [r7, #4]
    8dd8:	f013 0f10 	tst.w	r3, #16
    8ddc:	d003      	beq.n	8de6 <uarte_instance_init+0x96>
    8dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    8de2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    8de6:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8dea:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8dee:	2300      	movs	r3, #0
    8df0:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8df4:	2301      	movs	r3, #1
    8df6:	60b3      	str	r3, [r6, #8]
    8df8:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    8dfa:	4620      	mov	r0, r4
    8dfc:	b003      	add	sp, #12
    8dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    8e02:	4641      	mov	r1, r8
    8e04:	4630      	mov	r0, r6
    8e06:	f7fb fbaf 	bl	4568 <endtx_stoptx_ppi_init>
		if (err < 0) {
    8e0a:	2800      	cmp	r0, #0
    8e0c:	daca      	bge.n	8da4 <uarte_instance_init+0x54>
			return err;
    8e0e:	4604      	mov	r4, r0
    8e10:	e7f3      	b.n	8dfa <uarte_instance_init+0xaa>

00008e12 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8e12:	b510      	push	{r4, lr}
    8e14:	4604      	mov	r4, r0
    8e16:	2200      	movs	r2, #0
    8e18:	2101      	movs	r1, #1
    8e1a:	2002      	movs	r0, #2
    8e1c:	f7f9 fd90 	bl	2940 <z_arm_irq_priority_set>
    8e20:	2002      	movs	r0, #2
    8e22:	f7f9 fd71 	bl	2908 <arch_irq_enable>
    8e26:	2100      	movs	r1, #0
    8e28:	4620      	mov	r0, r4
    8e2a:	f7ff ff91 	bl	8d50 <uarte_instance_init>
    8e2e:	bd10      	pop	{r4, pc}

00008e30 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    8e30:	b510      	push	{r4, lr}
    8e32:	4604      	mov	r4, r0
    8e34:	2200      	movs	r2, #0
    8e36:	2101      	movs	r1, #1
    8e38:	2028      	movs	r0, #40	; 0x28
    8e3a:	f7f9 fd81 	bl	2940 <z_arm_irq_priority_set>
    8e3e:	2028      	movs	r0, #40	; 0x28
    8e40:	f7f9 fd62 	bl	2908 <arch_irq_enable>
    8e44:	2100      	movs	r1, #0
    8e46:	4620      	mov	r0, r4
    8e48:	f7ff ff82 	bl	8d50 <uarte_instance_init>
    8e4c:	bd10      	pop	{r4, pc}

00008e4e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8e4e:	4770      	bx	lr

00008e50 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    8e50:	1a40      	subs	r0, r0, r1
}
    8e52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8e56:	4770      	bx	lr

00008e58 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8e58:	f100 0350 	add.w	r3, r0, #80	; 0x50
    8e5c:	009b      	lsls	r3, r3, #2
    8e5e:	b29b      	uxth	r3, r3
    8e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8e64:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    8e68:	2200      	movs	r2, #0
    8e6a:	601a      	str	r2, [r3, #0]
    8e6c:	681b      	ldr	r3, [r3, #0]
}
    8e6e:	4770      	bx	lr

00008e70 <absolute_time_to_cc>:
}
    8e70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8e74:	4770      	bx	lr

00008e76 <full_int_lock>:
	__asm__ volatile(
    8e76:	f04f 0320 	mov.w	r3, #32
    8e7a:	f3ef 8011 	mrs	r0, BASEPRI
    8e7e:	f383 8812 	msr	BASEPRI_MAX, r3
    8e82:	f3bf 8f6f 	isb	sy
}
    8e86:	4770      	bx	lr

00008e88 <full_int_unlock>:
	__asm__ volatile(
    8e88:	f380 8811 	msr	BASEPRI, r0
    8e8c:	f3bf 8f6f 	isb	sy
}
    8e90:	4770      	bx	lr

00008e92 <set_absolute_alarm>:
{
    8e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e94:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    8e96:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    8e9a:	f7fb fbbd 	bl	4618 <get_comparator>
    8e9e:	4607      	mov	r7, r0
    8ea0:	e019      	b.n	8ed6 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    8ea2:	2013      	movs	r0, #19
    8ea4:	f000 fc3e 	bl	9724 <z_impl_k_busy_wait>
}
    8ea8:	e022      	b.n	8ef0 <set_absolute_alarm+0x5e>
		event_clear(chan);
    8eaa:	4630      	mov	r0, r6
    8eac:	f7ff ffd4 	bl	8e58 <event_clear>
		event_enable(chan);
    8eb0:	4630      	mov	r0, r6
    8eb2:	f7fb fbb9 	bl	4628 <event_enable>
		set_comparator(chan, cc_val);
    8eb6:	4629      	mov	r1, r5
    8eb8:	4630      	mov	r0, r6
    8eba:	f7fb fba3 	bl	4604 <set_comparator>
		now2 = counter();
    8ebe:	f7fb fbc7 	bl	4650 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    8ec2:	4284      	cmp	r4, r0
    8ec4:	d01e      	beq.n	8f04 <set_absolute_alarm+0x72>
    8ec6:	1c81      	adds	r1, r0, #2
    8ec8:	4628      	mov	r0, r5
    8eca:	f7ff ffc1 	bl	8e50 <counter_sub>
	} while ((now2 != now) &&
    8ece:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8ed2:	d917      	bls.n	8f04 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    8ed4:	462f      	mov	r7, r5
		now = counter();
    8ed6:	f7fb fbbb 	bl	4650 <counter>
    8eda:	4604      	mov	r4, r0
		set_comparator(chan, now);
    8edc:	4601      	mov	r1, r0
    8ede:	4630      	mov	r0, r6
    8ee0:	f7fb fb90 	bl	4604 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    8ee4:	4621      	mov	r1, r4
    8ee6:	4638      	mov	r0, r7
    8ee8:	f7ff ffb2 	bl	8e50 <counter_sub>
    8eec:	2801      	cmp	r0, #1
    8eee:	d0d8      	beq.n	8ea2 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    8ef0:	1ca7      	adds	r7, r4, #2
    8ef2:	4639      	mov	r1, r7
    8ef4:	4628      	mov	r0, r5
    8ef6:	f7ff ffab 	bl	8e50 <counter_sub>
    8efa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8efe:	d9d4      	bls.n	8eaa <set_absolute_alarm+0x18>
			cc_val = now + 2;
    8f00:	463d      	mov	r5, r7
    8f02:	e7d2      	b.n	8eaa <set_absolute_alarm+0x18>
}
    8f04:	4628      	mov	r0, r5
    8f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008f08 <compare_set>:
{
    8f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f0a:	b083      	sub	sp, #12
    8f0c:	4604      	mov	r4, r0
    8f0e:	4617      	mov	r7, r2
    8f10:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    8f12:	f7fb fba3 	bl	465c <compare_int_lock>
    8f16:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    8f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8f1a:	9301      	str	r3, [sp, #4]
    8f1c:	9b08      	ldr	r3, [sp, #32]
    8f1e:	9300      	str	r3, [sp, #0]
    8f20:	463a      	mov	r2, r7
    8f22:	462b      	mov	r3, r5
    8f24:	4620      	mov	r0, r4
    8f26:	f7fb fc89 	bl	483c <compare_set_nolocks>
    8f2a:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    8f2c:	4631      	mov	r1, r6
    8f2e:	4620      	mov	r0, r4
    8f30:	f7fb fbf8 	bl	4724 <compare_int_unlock>
}
    8f34:	4628      	mov	r0, r5
    8f36:	b003      	add	sp, #12
    8f38:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008f3a <sys_clock_cycle_get_32>:
{
    8f3a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    8f3c:	f7fb fc5e 	bl	47fc <z_nrf_rtc_timer_read>
}
    8f40:	bd08      	pop	{r3, pc}

00008f42 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    8f42:	b410      	push	{r4}
	*state = &config->states[0];
    8f44:	6843      	ldr	r3, [r0, #4]
    8f46:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    8f48:	e001      	b.n	8f4e <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    8f4a:	3408      	adds	r4, #8
    8f4c:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    8f4e:	6814      	ldr	r4, [r2, #0]
    8f50:	7a03      	ldrb	r3, [r0, #8]
    8f52:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    8f56:	3b01      	subs	r3, #1
    8f58:	f8d0 c004 	ldr.w	ip, [r0, #4]
    8f5c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    8f60:	429c      	cmp	r4, r3
    8f62:	d804      	bhi.n	8f6e <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    8f64:	7963      	ldrb	r3, [r4, #5]
    8f66:	428b      	cmp	r3, r1
    8f68:	d1ef      	bne.n	8f4a <pinctrl_lookup_state+0x8>
			return 0;
    8f6a:	2000      	movs	r0, #0
    8f6c:	e001      	b.n	8f72 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    8f6e:	f06f 0001 	mvn.w	r0, #1
}
    8f72:	bc10      	pop	{r4}
    8f74:	4770      	bx	lr

00008f76 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    8f76:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8f78:	f7fe fa64 	bl	7444 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    8f7c:	bd08      	pop	{r3, pc}

00008f7e <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    8f7e:	b510      	push	{r4, lr}
    8f80:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8f82:	f7f9 faa5 	bl	24d0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8f86:	f7f9 fb61 	bl	264c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    8f8a:	4620      	mov	r0, r4
    8f8c:	f7ff fff3 	bl	8f76 <hw_cc3xx_init_internal>
	return res;
}
    8f90:	bd10      	pop	{r4, pc}

00008f92 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8f92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8f96:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    8f9a:	2b08      	cmp	r3, #8
    8f9c:	d001      	beq.n	8fa2 <nrf52_errata_36+0x10>
        return false;
    8f9e:	2000      	movs	r0, #0
    8fa0:	4770      	bx	lr
                        return true;
    8fa2:	2001      	movs	r0, #1
}
    8fa4:	4770      	bx	lr

00008fa6 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8fa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8faa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    8fae:	2b08      	cmp	r3, #8
    8fb0:	d001      	beq.n	8fb6 <nrf52_errata_66+0x10>
        return false;
    8fb2:	2000      	movs	r0, #0
    8fb4:	4770      	bx	lr
                        return true;
    8fb6:	2001      	movs	r0, #1
}
    8fb8:	4770      	bx	lr

00008fba <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8fba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8fbe:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8fc2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    8fc6:	2a08      	cmp	r2, #8
    8fc8:	d001      	beq.n	8fce <nrf52_errata_98+0x14>
        return false;
    8fca:	2000      	movs	r0, #0
    8fcc:	4770      	bx	lr
                switch(var2)
    8fce:	2b00      	cmp	r3, #0
    8fd0:	d804      	bhi.n	8fdc <nrf52_errata_98+0x22>
    8fd2:	e8df f003 	tbb	[pc, r3]
    8fd6:	01          	.byte	0x01
    8fd7:	00          	.byte	0x00
    8fd8:	2001      	movs	r0, #1
    8fda:	4770      	bx	lr
                        return false;
    8fdc:	2000      	movs	r0, #0
}
    8fde:	4770      	bx	lr

00008fe0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8fe4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8fe8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    8fec:	2a08      	cmp	r2, #8
    8fee:	d001      	beq.n	8ff4 <nrf52_errata_103+0x14>
        return false;
    8ff0:	2000      	movs	r0, #0
    8ff2:	4770      	bx	lr
                switch(var2)
    8ff4:	2b00      	cmp	r3, #0
    8ff6:	d804      	bhi.n	9002 <nrf52_errata_103+0x22>
    8ff8:	e8df f003 	tbb	[pc, r3]
    8ffc:	01          	.byte	0x01
    8ffd:	00          	.byte	0x00
    8ffe:	2001      	movs	r0, #1
    9000:	4770      	bx	lr
                        return false;
    9002:	2000      	movs	r0, #0
}
    9004:	4770      	bx	lr

00009006 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    900a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    900e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    9012:	2a08      	cmp	r2, #8
    9014:	d001      	beq.n	901a <nrf52_errata_115+0x14>
        return false;
    9016:	2000      	movs	r0, #0
    9018:	4770      	bx	lr
                switch(var2)
    901a:	2b00      	cmp	r3, #0
    901c:	d804      	bhi.n	9028 <nrf52_errata_115+0x22>
    901e:	e8df f003 	tbb	[pc, r3]
    9022:	01          	.byte	0x01
    9023:	00          	.byte	0x00
    9024:	2001      	movs	r0, #1
    9026:	4770      	bx	lr
                        return false;
    9028:	2000      	movs	r0, #0
}
    902a:	4770      	bx	lr

0000902c <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    902c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9030:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9034:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    9038:	2a08      	cmp	r2, #8
    903a:	d001      	beq.n	9040 <nrf52_errata_120+0x14>
        return false;
    903c:	2000      	movs	r0, #0
    903e:	4770      	bx	lr
                switch(var2)
    9040:	2b00      	cmp	r3, #0
    9042:	d804      	bhi.n	904e <nrf52_errata_120+0x22>
    9044:	e8df f003 	tbb	[pc, r3]
    9048:	01          	.byte	0x01
    9049:	00          	.byte	0x00
    904a:	2001      	movs	r0, #1
    904c:	4770      	bx	lr
                        return false;
    904e:	2000      	movs	r0, #0
}
    9050:	4770      	bx	lr

00009052 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9052:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9056:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    905a:	2b08      	cmp	r3, #8
    905c:	d001      	beq.n	9062 <nrf52_errata_136+0x10>
        return false;
    905e:	2000      	movs	r0, #0
    9060:	4770      	bx	lr
                        return true;
    9062:	2001      	movs	r0, #1
}
    9064:	4770      	bx	lr

00009066 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9066:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    906a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    906e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    9072:	2a08      	cmp	r2, #8
    9074:	d001      	beq.n	907a <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    9076:	2000      	movs	r0, #0
    9078:	4770      	bx	lr
                switch(var2)
    907a:	2b04      	cmp	r3, #4
    907c:	d801      	bhi.n	9082 <nrf52_configuration_249+0x1c>
    907e:	2000      	movs	r0, #0
    9080:	4770      	bx	lr
                        return true;
    9082:	2001      	movs	r0, #1
    #endif
}
    9084:	4770      	bx	lr

00009086 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    9086:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    9088:	4780      	blx	r0
}
    908a:	bd08      	pop	{r3, pc}

0000908c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    908c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    908e:	f000 fb49 	bl	9724 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    9092:	bd08      	pop	{r3, pc}

00009094 <clock_initial_lfclksrc_get>:
}
    9094:	2000      	movs	r0, #0
    9096:	4770      	bx	lr

00009098 <clock_lfclksrc_tweak>:
{
    9098:	b538      	push	{r3, r4, r5, lr}
    909a:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    909c:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    909e:	2b01      	cmp	r3, #1
    90a0:	d002      	beq.n	90a8 <clock_lfclksrc_tweak+0x10>
    90a2:	b933      	cbnz	r3, 90b2 <clock_lfclksrc_tweak+0x1a>
    90a4:	2301      	movs	r3, #1
    90a6:	e000      	b.n	90aa <clock_lfclksrc_tweak+0x12>
    90a8:	2301      	movs	r3, #1
    if (!is_correct_clk)
    90aa:	461d      	mov	r5, r3
    90ac:	b11b      	cbz	r3, 90b6 <clock_lfclksrc_tweak+0x1e>
}
    90ae:	4628      	mov	r0, r5
    90b0:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    90b2:	2300      	movs	r3, #0
    90b4:	e7f9      	b.n	90aa <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    90b6:	2000      	movs	r0, #0
    90b8:	f7fc f866 	bl	5188 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    90bc:	f7ff ffea 	bl	9094 <clock_initial_lfclksrc_get>
    90c0:	6020      	str	r0, [r4, #0]
    90c2:	e7f4      	b.n	90ae <clock_lfclksrc_tweak+0x16>

000090c4 <nrfx_clock_enable>:
{
    90c4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    90c6:	2000      	movs	r0, #0
    90c8:	f7f9 fc2c 	bl	2924 <arch_irq_is_enabled>
    90cc:	b130      	cbz	r0, 90dc <nrfx_clock_enable+0x18>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    90ce:	f7ff ffe1 	bl	9094 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    90d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    90d6:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    90da:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    90dc:	f7f9 fc14 	bl	2908 <arch_irq_enable>
    90e0:	e7f5      	b.n	90ce <nrfx_clock_enable+0xa>

000090e2 <nrfx_clock_start>:
    switch (domain)
    90e2:	b110      	cbz	r0, 90ea <nrfx_clock_start+0x8>
    90e4:	2801      	cmp	r0, #1
    90e6:	d040      	beq.n	916a <nrfx_clock_start+0x88>
    90e8:	4770      	bx	lr
{
    90ea:	b500      	push	{lr}
    90ec:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    90ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    90f2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    90f6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    90fa:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    90fc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    9100:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9104:	d11b      	bne.n	913e <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    9106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    910a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    910e:	f013 0f01 	tst.w	r3, #1
    9112:	d118      	bne.n	9146 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
    9114:	f7ff ffbe 	bl	9094 <clock_initial_lfclksrc_get>
    9118:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    911a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    911e:	9a01      	ldr	r2, [sp, #4]
    9120:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9124:	2200      	movs	r2, #0
    9126:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    912a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    912e:	2202      	movs	r2, #2
    9130:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9134:	2201      	movs	r2, #1
    9136:	609a      	str	r2, [r3, #8]
}
    9138:	b003      	add	sp, #12
    913a:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    913e:	a801      	add	r0, sp, #4
    9140:	f7ff ffaa 	bl	9098 <clock_lfclksrc_tweak>
    9144:	e7e9      	b.n	911a <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    914a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    914e:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    9152:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    9154:	a801      	add	r0, sp, #4
    9156:	f7ff ff9f 	bl	9098 <clock_lfclksrc_tweak>
    915a:	2800      	cmp	r0, #0
    915c:	d0dd      	beq.n	911a <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    915e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9162:	2202      	movs	r2, #2
    9164:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    9168:	e7e6      	b.n	9138 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    916a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    916e:	2200      	movs	r2, #0
    9170:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9174:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    9178:	2201      	movs	r2, #1
    917a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    917e:	601a      	str	r2, [r3, #0]
    9180:	4770      	bx	lr

00009182 <nrfx_clock_stop>:
{
    9182:	b508      	push	{r3, lr}
    clock_stop(domain);
    9184:	f7fc f800 	bl	5188 <clock_stop>
}
    9188:	bd08      	pop	{r3, pc}

0000918a <pin_is_task_output>:
{
    918a:	b510      	push	{r4, lr}
    918c:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    918e:	f7fc f8d7 	bl	5340 <pin_is_output>
    9192:	b128      	cbz	r0, 91a0 <pin_is_task_output+0x16>
    9194:	4620      	mov	r0, r4
    9196:	f7fc f8bd 	bl	5314 <pin_in_use_by_te>
    919a:	b118      	cbz	r0, 91a4 <pin_is_task_output+0x1a>
    919c:	2001      	movs	r0, #1
    919e:	e000      	b.n	91a2 <pin_is_task_output+0x18>
    91a0:	2000      	movs	r0, #0
}
    91a2:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    91a4:	2000      	movs	r0, #0
    91a6:	e7fc      	b.n	91a2 <pin_is_task_output+0x18>

000091a8 <pin_is_input>:
{
    91a8:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    91aa:	f7fc f8c9 	bl	5340 <pin_is_output>
    91ae:	f080 0001 	eor.w	r0, r0, #1
}
    91b2:	b2c0      	uxtb	r0, r0
    91b4:	bd08      	pop	{r3, pc}

000091b6 <gpiote_polarity_to_trigger>:
}
    91b6:	4770      	bx	lr

000091b8 <gpiote_trigger_to_polarity>:
}
    91b8:	4770      	bx	lr

000091ba <is_level>:
}
    91ba:	2803      	cmp	r0, #3
    91bc:	bf94      	ite	ls
    91be:	2000      	movls	r0, #0
    91c0:	2001      	movhi	r0, #1
    91c2:	4770      	bx	lr

000091c4 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    91c4:	b508      	push	{r3, lr}
  _DoInit();
    91c6:	f7fc fd87 	bl	5cd8 <_DoInit>
}
    91ca:	bd08      	pop	{r3, pc}

000091cc <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    91cc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    91ce:	f7ff fff9 	bl	91c4 <SEGGER_RTT_Init>

	return 0;
}
    91d2:	2000      	movs	r0, #0
    91d4:	bd08      	pop	{r3, pc}

000091d6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    91d6:	b148      	cbz	r0, 91ec <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    91d8:	68c3      	ldr	r3, [r0, #12]
    91da:	8818      	ldrh	r0, [r3, #0]
    91dc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    91e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    91e4:	bf14      	ite	ne
    91e6:	2000      	movne	r0, #0
    91e8:	2001      	moveq	r0, #1
    91ea:	4770      	bx	lr
		return false;
    91ec:	2000      	movs	r0, #0
}
    91ee:	4770      	bx	lr

000091f0 <z_early_memset>:
{
    91f0:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    91f2:	f7ff fa90 	bl	8716 <memset>
}
    91f6:	bd08      	pop	{r3, pc}

000091f8 <z_early_memcpy>:
{
    91f8:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    91fa:	f7ff fa5d 	bl	86b8 <memcpy>
}
    91fe:	bd08      	pop	{r3, pc}

00009200 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9200:	6902      	ldr	r2, [r0, #16]
    9202:	6943      	ldr	r3, [r0, #20]
    9204:	431a      	orrs	r2, r3
    9206:	f012 0203 	ands.w	r2, r2, #3
    920a:	d10d      	bne.n	9228 <create_free_list+0x28>
	slab->free_list = NULL;
    920c:	2100      	movs	r1, #0
    920e:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9210:	e005      	b.n	921e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    9212:	6981      	ldr	r1, [r0, #24]
    9214:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    9216:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    9218:	6901      	ldr	r1, [r0, #16]
    921a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    921c:	3201      	adds	r2, #1
    921e:	68c1      	ldr	r1, [r0, #12]
    9220:	4291      	cmp	r1, r2
    9222:	d8f6      	bhi.n	9212 <create_free_list+0x12>
	return 0;
    9224:	2000      	movs	r0, #0
    9226:	4770      	bx	lr
		return -EINVAL;
    9228:	f06f 0015 	mvn.w	r0, #21
}
    922c:	4770      	bx	lr

0000922e <k_mem_slab_init>:
{
    922e:	b510      	push	{r4, lr}
    9230:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    9232:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    9234:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    9236:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    9238:	2300      	movs	r3, #0
    923a:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    923c:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
    923e:	f7ff ffdf 	bl	9200 <create_free_list>
	if (rc < 0) {
    9242:	2800      	cmp	r0, #0
    9244:	db01      	blt.n	924a <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    9246:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    9248:	6064      	str	r4, [r4, #4]
}
    924a:	bd10      	pop	{r4, pc}

0000924c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    924e:	4604      	mov	r4, r0
    9250:	460d      	mov	r5, r1
	__asm__ volatile(
    9252:	f04f 0320 	mov.w	r3, #32
    9256:	f3ef 8611 	mrs	r6, BASEPRI
    925a:	f383 8812 	msr	BASEPRI_MAX, r3
    925e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    9262:	6983      	ldr	r3, [r0, #24]
    9264:	b163      	cbz	r3, 9280 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    9266:	682b      	ldr	r3, [r5, #0]
    9268:	69a2      	ldr	r2, [r4, #24]
    926a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    926c:	682b      	ldr	r3, [r5, #0]
    926e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    9270:	69e3      	ldr	r3, [r4, #28]
    9272:	3b01      	subs	r3, #1
    9274:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    9276:	f386 8811 	msr	BASEPRI, r6
    927a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9280:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    9284:	f000 f9a4 	bl	95d0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    9288:	2800      	cmp	r0, #0
    928a:	d0ec      	beq.n	9266 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    928c:	682a      	ldr	r2, [r5, #0]
    928e:	2100      	movs	r1, #0
    9290:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    9294:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    9296:	f000 f8d4 	bl	9442 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    929a:	4631      	mov	r1, r6
    929c:	4638      	mov	r0, r7
    929e:	f7fd fb07 	bl	68b0 <z_reschedule>
			return;
    92a2:	e7ec      	b.n	927e <k_mem_slab_free+0x32>

000092a4 <setup_thread_stack>:
{
    92a4:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    92a6:	3207      	adds	r2, #7
    92a8:	f022 0207 	bic.w	r2, r2, #7
    92ac:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    92b0:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    92b4:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    92b8:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    92bc:	2200      	movs	r2, #0
    92be:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    92c2:	18c8      	adds	r0, r1, r3
    92c4:	bc10      	pop	{r4}
    92c6:	4770      	bx	lr

000092c8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    92c8:	f3ef 8005 	mrs	r0, IPSR
}
    92cc:	3800      	subs	r0, #0
    92ce:	bf18      	it	ne
    92d0:	2001      	movne	r0, #1
    92d2:	4770      	bx	lr

000092d4 <k_thread_name_get>:
}
    92d4:	3074      	adds	r0, #116	; 0x74
    92d6:	4770      	bx	lr

000092d8 <z_impl_k_thread_start>:
{
    92d8:	b508      	push	{r3, lr}
	z_sched_start(thread);
    92da:	f7fd fc37 	bl	6b4c <z_sched_start>
}
    92de:	bd08      	pop	{r3, pc}

000092e0 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    92e0:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    92e2:	2400      	movs	r4, #0
    92e4:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    92e6:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    92e8:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    92ea:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    92ec:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    92ee:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    92f0:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    92f2:	bc10      	pop	{r4}
    92f4:	4770      	bx	lr

000092f6 <z_impl_k_thread_create>:
{
    92f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    92f8:	b087      	sub	sp, #28
    92fa:	4604      	mov	r4, r0
    92fc:	9e12      	ldr	r6, [sp, #72]	; 0x48
    92fe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9300:	2700      	movs	r7, #0
    9302:	9705      	str	r7, [sp, #20]
    9304:	9f10      	ldr	r7, [sp, #64]	; 0x40
    9306:	9704      	str	r7, [sp, #16]
    9308:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    930a:	9703      	str	r7, [sp, #12]
    930c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    930e:	9702      	str	r7, [sp, #8]
    9310:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    9312:	9701      	str	r7, [sp, #4]
    9314:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    9316:	9700      	str	r7, [sp, #0]
    9318:	f7fd f886 	bl	6428 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    931c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    9320:	bf08      	it	eq
    9322:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    9326:	d102      	bne.n	932e <z_impl_k_thread_create+0x38>
}
    9328:	4620      	mov	r0, r4
    932a:	b007      	add	sp, #28
    932c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    932e:	4632      	mov	r2, r6
    9330:	462b      	mov	r3, r5
    9332:	4620      	mov	r0, r4
    9334:	f7fd f86a 	bl	640c <schedule_new_thread>
    9338:	e7f6      	b.n	9328 <z_impl_k_thread_create+0x32>

0000933a <z_pm_save_idle_exit>:
{
    933a:	b508      	push	{r3, lr}
	pm_system_resume();
    933c:	f7f8 ff46 	bl	21cc <pm_system_resume>
	sys_clock_idle_exit();
    9340:	f7ff fd85 	bl	8e4e <sys_clock_idle_exit>
}
    9344:	bd08      	pop	{r3, pc}

00009346 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    9346:	4288      	cmp	r0, r1
    9348:	da00      	bge.n	934c <new_prio_for_inheritance+0x6>
    934a:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    934c:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    9350:	db01      	blt.n	9356 <new_prio_for_inheritance+0x10>
    9352:	4608      	mov	r0, r1
    9354:	4770      	bx	lr
    9356:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    935a:	4770      	bx	lr

0000935c <adjust_owner_prio>:
{
    935c:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    935e:	6880      	ldr	r0, [r0, #8]
    9360:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9364:	428b      	cmp	r3, r1
    9366:	d101      	bne.n	936c <adjust_owner_prio+0x10>
	return false;
    9368:	2000      	movs	r0, #0
}
    936a:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    936c:	f7fd fc3c 	bl	6be8 <z_set_prio>
    9370:	e7fb      	b.n	936a <adjust_owner_prio+0xe>

00009372 <z_impl_k_mutex_init>:
{
    9372:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9374:	2000      	movs	r0, #0
    9376:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    9378:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    937a:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    937c:	605b      	str	r3, [r3, #4]
}
    937e:	4770      	bx	lr

00009380 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    9380:	b13a      	cbz	r2, 9392 <z_impl_k_sem_init+0x12>
    9382:	428a      	cmp	r2, r1
    9384:	d308      	bcc.n	9398 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    9386:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    9388:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    938a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    938c:	6040      	str	r0, [r0, #4]
	return 0;
    938e:	2000      	movs	r0, #0
    9390:	4770      	bx	lr
		return -EINVAL;
    9392:	f06f 0015 	mvn.w	r0, #21
    9396:	4770      	bx	lr
    9398:	f06f 0015 	mvn.w	r0, #21
}
    939c:	4770      	bx	lr

0000939e <thread_active_elsewhere>:
}
    939e:	2000      	movs	r0, #0
    93a0:	4770      	bx	lr

000093a2 <pended_on_thread>:
}
    93a2:	6880      	ldr	r0, [r0, #8]
    93a4:	4770      	bx	lr

000093a6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    93a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    93aa:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    93ae:	4283      	cmp	r3, r0
    93b0:	d001      	beq.n	93b6 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    93b2:	1ac0      	subs	r0, r0, r3
    93b4:	4770      	bx	lr
	return 0;
    93b6:	2000      	movs	r0, #0
}
    93b8:	4770      	bx	lr

000093ba <z_unpend_thread_no_timeout>:
{
    93ba:	b538      	push	{r3, r4, r5, lr}
    93bc:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    93be:	2300      	movs	r3, #0
	__asm__ volatile(
    93c0:	f04f 0220 	mov.w	r2, #32
    93c4:	f3ef 8511 	mrs	r5, BASEPRI
    93c8:	f382 8812 	msr	BASEPRI_MAX, r2
    93cc:	f3bf 8f6f 	isb	sy
    93d0:	e010      	b.n	93f4 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    93d2:	4620      	mov	r0, r4
    93d4:	f7ff ffe5 	bl	93a2 <pended_on_thread>
    93d8:	4621      	mov	r1, r4
    93da:	f000 f823 	bl	9424 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    93de:	7b63      	ldrb	r3, [r4, #13]
    93e0:	f023 0302 	bic.w	r3, r3, #2
    93e4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    93e6:	2300      	movs	r3, #0
    93e8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    93ea:	f385 8811 	msr	BASEPRI, r5
    93ee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    93f2:	2301      	movs	r3, #1
    93f4:	2b00      	cmp	r3, #0
    93f6:	d0ec      	beq.n	93d2 <z_unpend_thread_no_timeout+0x18>
}
    93f8:	bd38      	pop	{r3, r4, r5, pc}

000093fa <z_reschedule_irqlock>:
{
    93fa:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    93fc:	4603      	mov	r3, r0
    93fe:	b920      	cbnz	r0, 940a <z_reschedule_irqlock+0x10>
    9400:	f3ef 8205 	mrs	r2, IPSR
    9404:	b942      	cbnz	r2, 9418 <z_reschedule_irqlock+0x1e>
    9406:	2201      	movs	r2, #1
    9408:	e000      	b.n	940c <z_reschedule_irqlock+0x12>
    940a:	2200      	movs	r2, #0
	if (resched(key)) {
    940c:	b932      	cbnz	r2, 941c <z_reschedule_irqlock+0x22>
    940e:	f383 8811 	msr	BASEPRI, r3
    9412:	f3bf 8f6f 	isb	sy
}
    9416:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9418:	2200      	movs	r2, #0
    941a:	e7f7      	b.n	940c <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    941c:	4618      	mov	r0, r3
    941e:	f7f9 fac5 	bl	29ac <arch_swap>
	return ret;
    9422:	e7f8      	b.n	9416 <z_reschedule_irqlock+0x1c>

00009424 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    9424:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    9426:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    9428:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    942a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    942c:	2300      	movs	r3, #0
    942e:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    9430:	604b      	str	r3, [r1, #4]
}
    9432:	4770      	bx	lr

00009434 <z_priq_dumb_best>:
{
    9434:	4603      	mov	r3, r0
	return list->head == list;
    9436:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9438:	4283      	cmp	r3, r0
    943a:	d000      	beq.n	943e <z_priq_dumb_best+0xa>
}
    943c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    943e:	2000      	movs	r0, #0
	return thread;
    9440:	e7fc      	b.n	943c <z_priq_dumb_best+0x8>

00009442 <z_ready_thread>:
{
    9442:	b538      	push	{r3, r4, r5, lr}
    9444:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    9446:	2300      	movs	r3, #0
	__asm__ volatile(
    9448:	f04f 0220 	mov.w	r2, #32
    944c:	f3ef 8511 	mrs	r5, BASEPRI
    9450:	f382 8812 	msr	BASEPRI_MAX, r2
    9454:	f3bf 8f6f 	isb	sy
    9458:	e004      	b.n	9464 <z_ready_thread+0x22>
	__asm__ volatile(
    945a:	f385 8811 	msr	BASEPRI, r5
    945e:	f3bf 8f6f 	isb	sy
    9462:	2301      	movs	r3, #1
    9464:	b943      	cbnz	r3, 9478 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    9466:	4620      	mov	r0, r4
    9468:	f7ff ff99 	bl	939e <thread_active_elsewhere>
    946c:	2800      	cmp	r0, #0
    946e:	d1f4      	bne.n	945a <z_ready_thread+0x18>
			ready_thread(thread);
    9470:	4620      	mov	r0, r4
    9472:	f7fd fb2b 	bl	6acc <ready_thread>
    9476:	e7f0      	b.n	945a <z_ready_thread+0x18>
}
    9478:	bd38      	pop	{r3, r4, r5, pc}

0000947a <z_thread_timeout>:
{
    947a:	b570      	push	{r4, r5, r6, lr}
    947c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    947e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    9482:	2300      	movs	r3, #0
	__asm__ volatile(
    9484:	f04f 0220 	mov.w	r2, #32
    9488:	f3ef 8611 	mrs	r6, BASEPRI
    948c:	f382 8812 	msr	BASEPRI_MAX, r2
    9490:	f3bf 8f6f 	isb	sy
    9494:	e011      	b.n	94ba <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9496:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    949a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    949e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    94a2:	f023 0310 	bic.w	r3, r3, #16
    94a6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    94aa:	4628      	mov	r0, r5
    94ac:	f7fd fb0e 	bl	6acc <ready_thread>
	__asm__ volatile(
    94b0:	f386 8811 	msr	BASEPRI, r6
    94b4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    94b8:	2301      	movs	r3, #1
    94ba:	b9ab      	cbnz	r3, 94e8 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    94bc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    94c0:	f013 0f28 	tst.w	r3, #40	; 0x28
    94c4:	d1f4      	bne.n	94b0 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    94c6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    94ca:	2b00      	cmp	r3, #0
    94cc:	d0e3      	beq.n	9496 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    94ce:	4628      	mov	r0, r5
    94d0:	f7ff ff67 	bl	93a2 <pended_on_thread>
    94d4:	4629      	mov	r1, r5
    94d6:	f7ff ffa5 	bl	9424 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    94da:	7b6b      	ldrb	r3, [r5, #13]
    94dc:	f023 0302 	bic.w	r3, r3, #2
    94e0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    94e2:	2300      	movs	r3, #0
    94e4:	60ab      	str	r3, [r5, #8]
}
    94e6:	e7d6      	b.n	9496 <z_thread_timeout+0x1c>
}
    94e8:	bd70      	pop	{r4, r5, r6, pc}

000094ea <add_to_waitq_locked>:
{
    94ea:	b570      	push	{r4, r5, r6, lr}
    94ec:	4605      	mov	r5, r0
    94ee:	460e      	mov	r6, r1
	unready_thread(thread);
    94f0:	f7fd fb4a 	bl	6b88 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    94f4:	7b6b      	ldrb	r3, [r5, #13]
    94f6:	f043 0302 	orr.w	r3, r3, #2
    94fa:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    94fc:	b1b6      	cbz	r6, 952c <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    94fe:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    9500:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9502:	42a6      	cmp	r6, r4
    9504:	d019      	beq.n	953a <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9506:	b164      	cbz	r4, 9522 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9508:	4621      	mov	r1, r4
    950a:	4628      	mov	r0, r5
    950c:	f7ff ff4b 	bl	93a6 <z_sched_prio_cmp>
    9510:	2800      	cmp	r0, #0
    9512:	dc0c      	bgt.n	952e <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9514:	b12c      	cbz	r4, 9522 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    9516:	6873      	ldr	r3, [r6, #4]
    9518:	429c      	cmp	r4, r3
    951a:	d002      	beq.n	9522 <add_to_waitq_locked+0x38>
    951c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    951e:	2c00      	cmp	r4, #0
    9520:	d1f1      	bne.n	9506 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    9522:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    9524:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    9526:	606b      	str	r3, [r5, #4]
	tail->next = node;
    9528:	601d      	str	r5, [r3, #0]
	list->tail = node;
    952a:	6075      	str	r5, [r6, #4]
}
    952c:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    952e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9530:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9532:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9534:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9536:	6065      	str	r5, [r4, #4]
}
    9538:	e7f8      	b.n	952c <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    953a:	2400      	movs	r4, #0
    953c:	e7e3      	b.n	9506 <add_to_waitq_locked+0x1c>

0000953e <pend>:
{
    953e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9542:	4605      	mov	r5, r0
    9544:	460e      	mov	r6, r1
    9546:	4691      	mov	r9, r2
    9548:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    954a:	2400      	movs	r4, #0
	__asm__ volatile(
    954c:	f04f 0320 	mov.w	r3, #32
    9550:	f3ef 8711 	mrs	r7, BASEPRI
    9554:	f383 8812 	msr	BASEPRI_MAX, r3
    9558:	f3bf 8f6f 	isb	sy
    955c:	e008      	b.n	9570 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    955e:	4631      	mov	r1, r6
    9560:	4628      	mov	r0, r5
    9562:	f7ff ffc2 	bl	94ea <add_to_waitq_locked>
	__asm__ volatile(
    9566:	f387 8811 	msr	BASEPRI, r7
    956a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    956e:	2401      	movs	r4, #1
    9570:	2c00      	cmp	r4, #0
    9572:	d0f4      	beq.n	955e <pend+0x20>
	add_thread_timeout(thread, timeout);
    9574:	464a      	mov	r2, r9
    9576:	4643      	mov	r3, r8
    9578:	4628      	mov	r0, r5
    957a:	f7fd f93b 	bl	67f4 <add_thread_timeout>
}
    957e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009582 <z_unpend1_no_timeout>:
{
    9582:	b570      	push	{r4, r5, r6, lr}
    9584:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    9586:	2300      	movs	r3, #0
	__asm__ volatile(
    9588:	f04f 0220 	mov.w	r2, #32
    958c:	f3ef 8611 	mrs	r6, BASEPRI
    9590:	f382 8812 	msr	BASEPRI_MAX, r2
    9594:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    9598:	461c      	mov	r4, r3
    959a:	e004      	b.n	95a6 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    959c:	f386 8811 	msr	BASEPRI, r6
    95a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    95a4:	2301      	movs	r3, #1
    95a6:	b98b      	cbnz	r3, 95cc <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    95a8:	4628      	mov	r0, r5
    95aa:	f7ff ff43 	bl	9434 <z_priq_dumb_best>
		if (thread != NULL) {
    95ae:	4604      	mov	r4, r0
    95b0:	2800      	cmp	r0, #0
    95b2:	d0f3      	beq.n	959c <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    95b4:	f7ff fef5 	bl	93a2 <pended_on_thread>
    95b8:	4621      	mov	r1, r4
    95ba:	f7ff ff33 	bl	9424 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    95be:	7b63      	ldrb	r3, [r4, #13]
    95c0:	f023 0302 	bic.w	r3, r3, #2
    95c4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    95c6:	2300      	movs	r3, #0
    95c8:	60a3      	str	r3, [r4, #8]
}
    95ca:	e7e7      	b.n	959c <z_unpend1_no_timeout+0x1a>
}
    95cc:	4620      	mov	r0, r4
    95ce:	bd70      	pop	{r4, r5, r6, pc}

000095d0 <z_unpend_first_thread>:
{
    95d0:	b570      	push	{r4, r5, r6, lr}
    95d2:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    95d4:	2300      	movs	r3, #0
	__asm__ volatile(
    95d6:	f04f 0220 	mov.w	r2, #32
    95da:	f3ef 8611 	mrs	r6, BASEPRI
    95de:	f382 8812 	msr	BASEPRI_MAX, r2
    95e2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    95e6:	461c      	mov	r4, r3
    95e8:	e004      	b.n	95f4 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    95ea:	f386 8811 	msr	BASEPRI, r6
    95ee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    95f2:	2301      	movs	r3, #1
    95f4:	b9ab      	cbnz	r3, 9622 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    95f6:	4628      	mov	r0, r5
    95f8:	f7ff ff1c 	bl	9434 <z_priq_dumb_best>
		if (thread != NULL) {
    95fc:	4604      	mov	r4, r0
    95fe:	2800      	cmp	r0, #0
    9600:	d0f3      	beq.n	95ea <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9602:	f7ff fece 	bl	93a2 <pended_on_thread>
    9606:	4621      	mov	r1, r4
    9608:	f7ff ff0c 	bl	9424 <z_priq_dumb_remove>
    960c:	7b63      	ldrb	r3, [r4, #13]
    960e:	f023 0302 	bic.w	r3, r3, #2
    9612:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9614:	2300      	movs	r3, #0
    9616:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    9618:	f104 0018 	add.w	r0, r4, #24
    961c:	f000 f81e 	bl	965c <z_abort_timeout>
    9620:	e7e3      	b.n	95ea <z_unpend_first_thread+0x1a>
}
    9622:	4620      	mov	r0, r4
    9624:	bd70      	pop	{r4, r5, r6, pc}

00009626 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    9626:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    9628:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    962a:	6083      	str	r3, [r0, #8]
}
    962c:	4770      	bx	lr

0000962e <remove_timeout>:
{
    962e:	b510      	push	{r4, lr}
    9630:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    9632:	f7fd fd0b 	bl	704c <next>
    9636:	b148      	cbz	r0, 964c <remove_timeout+0x1e>
    9638:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    963a:	6920      	ldr	r0, [r4, #16]
    963c:	6961      	ldr	r1, [r4, #20]
    963e:	6913      	ldr	r3, [r2, #16]
    9640:	181b      	adds	r3, r3, r0
    9642:	6950      	ldr	r0, [r2, #20]
    9644:	eb41 0100 	adc.w	r1, r1, r0
    9648:	6113      	str	r3, [r2, #16]
    964a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    964c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    964e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    9650:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9652:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9654:	2300      	movs	r3, #0
    9656:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    9658:	6063      	str	r3, [r4, #4]
}
    965a:	bd10      	pop	{r4, pc}

0000965c <z_abort_timeout>:
{
    965c:	b570      	push	{r4, r5, r6, lr}
    965e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    9660:	2300      	movs	r3, #0
	__asm__ volatile(
    9662:	f04f 0220 	mov.w	r2, #32
    9666:	f3ef 8611 	mrs	r6, BASEPRI
    966a:	f382 8812 	msr	BASEPRI_MAX, r2
    966e:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    9672:	f06f 0015 	mvn.w	r0, #21
    9676:	e004      	b.n	9682 <z_abort_timeout+0x26>
	__asm__ volatile(
    9678:	f386 8811 	msr	BASEPRI, r6
    967c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9680:	2301      	movs	r3, #1
    9682:	461d      	mov	r5, r3
    9684:	b93b      	cbnz	r3, 9696 <z_abort_timeout+0x3a>
	return node->next != NULL;
    9686:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9688:	2b00      	cmp	r3, #0
    968a:	d0f5      	beq.n	9678 <z_abort_timeout+0x1c>
			remove_timeout(to);
    968c:	4620      	mov	r0, r4
    968e:	f7ff ffce 	bl	962e <remove_timeout>
			ret = 0;
    9692:	4628      	mov	r0, r5
    9694:	e7f0      	b.n	9678 <z_abort_timeout+0x1c>
}
    9696:	bd70      	pop	{r4, r5, r6, pc}

00009698 <z_get_next_timeout_expiry>:
{
    9698:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    969a:	2300      	movs	r3, #0
	__asm__ volatile(
    969c:	f04f 0220 	mov.w	r2, #32
    96a0:	f3ef 8411 	mrs	r4, BASEPRI
    96a4:	f382 8812 	msr	BASEPRI_MAX, r2
    96a8:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    96ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    96b0:	e006      	b.n	96c0 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    96b2:	f7fd fce3 	bl	707c <next_timeout>
	__asm__ volatile(
    96b6:	f384 8811 	msr	BASEPRI, r4
    96ba:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    96be:	2301      	movs	r3, #1
    96c0:	2b00      	cmp	r3, #0
    96c2:	d0f6      	beq.n	96b2 <z_get_next_timeout_expiry+0x1a>
}
    96c4:	bd10      	pop	{r4, pc}

000096c6 <z_set_timeout_expiry>:
{
    96c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96c8:	4605      	mov	r5, r0
    96ca:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    96cc:	2300      	movs	r3, #0
	__asm__ volatile(
    96ce:	f04f 0220 	mov.w	r2, #32
    96d2:	f3ef 8611 	mrs	r6, BASEPRI
    96d6:	f382 8812 	msr	BASEPRI_MAX, r2
    96da:	f3bf 8f6f 	isb	sy
    96de:	e00a      	b.n	96f6 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    96e0:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    96e2:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    96e6:	2801      	cmp	r0, #1
    96e8:	dd00      	ble.n	96ec <z_set_timeout_expiry+0x26>
    96ea:	b97c      	cbnz	r4, 970c <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    96ec:	f386 8811 	msr	BASEPRI, r6
    96f0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    96f4:	2301      	movs	r3, #1
    96f6:	461c      	mov	r4, r3
    96f8:	b97b      	cbnz	r3, 971a <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    96fa:	f7fd fcbf 	bl	707c <next_timeout>
			      || (ticks <= next_to);
    96fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9702:	d0ed      	beq.n	96e0 <z_set_timeout_expiry+0x1a>
    9704:	42a8      	cmp	r0, r5
    9706:	dbec      	blt.n	96e2 <z_set_timeout_expiry+0x1c>
    9708:	2401      	movs	r4, #1
    970a:	e7ea      	b.n	96e2 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    970c:	4639      	mov	r1, r7
    970e:	42a8      	cmp	r0, r5
    9710:	bfa8      	it	ge
    9712:	4628      	movge	r0, r5
    9714:	f7fb f988 	bl	4a28 <sys_clock_set_timeout>
    9718:	e7e8      	b.n	96ec <z_set_timeout_expiry+0x26>
}
    971a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000971c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    971c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    971e:	f7fd fdc1 	bl	72a4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9722:	bd08      	pop	{r3, pc}

00009724 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9724:	b900      	cbnz	r0, 9728 <z_impl_k_busy_wait+0x4>
    9726:	4770      	bx	lr
{
    9728:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    972a:	f7fa fb45 	bl	3db8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    972e:	bd08      	pop	{r3, pc}

00009730 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    9730:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    9732:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    9734:	2300      	movs	r3, #0
    9736:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    9738:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    973c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    973e:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    9740:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    9742:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    9744:	6343      	str	r3, [r0, #52]	; 0x34
}
    9746:	4770      	bx	lr

00009748 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    9748:	b510      	push	{r4, lr}
    974a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    974c:	f7ff ff86 	bl	965c <z_abort_timeout>

	if (inactive) {
    9750:	b9a0      	cbnz	r0, 977c <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    9752:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9754:	b10b      	cbz	r3, 975a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    9756:	4620      	mov	r0, r4
    9758:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    975a:	f104 0018 	add.w	r0, r4, #24
    975e:	f7ff ff10 	bl	9582 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    9762:	b158      	cbz	r0, 977c <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    9764:	f7ff fe6d 	bl	9442 <z_ready_thread>
	__asm__ volatile(
    9768:	f04f 0320 	mov.w	r3, #32
    976c:	f3ef 8011 	mrs	r0, BASEPRI
    9770:	f383 8812 	msr	BASEPRI_MAX, r3
    9774:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9778:	f7ff fe3f 	bl	93fa <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    977c:	bd10      	pop	{r4, pc}

0000977e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    977e:	4770      	bx	lr

00009780 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9780:	f7fb bbe2 	b.w	4f48 <SystemInit>
